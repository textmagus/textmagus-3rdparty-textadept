ANNOTATION_BOXED _SCINTILLA.constants.ANNOTATION_BOXED\n2
ANNOTATION_HIDDEN _SCINTILLA.constants.ANNOTATION_HIDDEN\n0
ANNOTATION_STANDARD _SCINTILLA.constants.ANNOTATION_STANDARD\n1
APPLEEVENT_ODOC events.APPLEEVENT_ODOC (string)\nEmitted when Mac OSX tells Textadept to open a document.\nArguments:\n\n* _`uri`_: The UTF-8-encoded URI to open.
AUTOINDENT _M.textadept.editing.AUTOINDENT (bool)\nMatch the indentation level of the previous line when inserting a new line.\nThe default value is `true`.
AUTOPAIR _M.textadept.editing.AUTOPAIR (bool)\nAutomatically close opening '(', '[', '{', '"', or '''\ncharacters.\nThe default value is `true`.\nAuto-paired characters are defined in the `char_matches`\ntable.
AUTO_C_CHAR_DELETED events.AUTO_C_CHAR_DELETED (string)\nEmitted when deleting a character while the autocompletion list is active.
AUTO_C_RELEASE events.AUTO_C_RELEASE (string)\nEmitted when canceling the autocompletion list.
AUTO_C_SELECTION events.AUTO_C_SELECTION (string)\nEmitted when selecting an item in the autocompletion list and before\ninserting the selection.\nAutomatic insertion can be cancelled by calling\n`buffer:auto_c_cancel()` before returning from the event handler.\nArguments:\n\n* _`text`_: The text of the selection.\n* _`position`_: The position in the buffer of the beginning of the\n  autocompleted word.
B lpeg.B(patt)\nReturns a pattern that matches only if the input string at the current\nposition is preceded by `patt`. Pattern `patt` must match only strings with\nsome fixed length, and it cannot contain captures.\n\nLike the and predicate, this pattern never consumes any input, independently\nof success or failure.
BOOKMARK_COLOR _M.textadept.bookmarks.BOOKMARK_COLOR (string)\nThe name of the color in the current theme to mark a bookmarked line with.
BUFFER_AFTER_SWITCH events.BUFFER_AFTER_SWITCH (string)\nEmitted right after switching to another buffer.\nEmitted by `view:goto_buffer()`.
BUFFER_BEFORE_SWITCH events.BUFFER_BEFORE_SWITCH (string)\nEmitted right before switching to another buffer.\nEmitted by `view:goto_buffer()`.
BUFFER_DELETED events.BUFFER_DELETED (string)\nEmitted after deleting a buffer.\nEmitted by `buffer:delete()`.
BUFFER_NEW events.BUFFER_NEW (string)\nEmitted after creating a new buffer.\nEmitted on startup and by `buffer.new()`.
C lpeg.C(patt)\nCreates a simple capture, which captures the substring of the subject that\nmatches `patt`. The captured value is a string. If `patt` has other captures,\ntheir values are returned after this one.
CALL_TIP_CLICK events.CALL_TIP_CLICK (string)\nEmitted when clicking on a calltip.\nArguments:\n\n* _`position`_: `1` if the up arrow was clicked, 2 if the down arrow was\n  clicked, and 0 otherwise.
CARETSTYLE_BLOCK _SCINTILLA.constants.CARETSTYLE_BLOCK\n2
CARETSTYLE_INVISIBLE _SCINTILLA.constants.CARETSTYLE_INVISIBLE\n0
CARETSTYLE_LINE _SCINTILLA.constants.CARETSTYLE_LINE\n1
CARET_EVEN _SCINTILLA.constants.CARET_EVEN\n8
CARET_JUMPS _SCINTILLA.constants.CARET_JUMPS\n16
CARET_SLOP _SCINTILLA.constants.CARET_SLOP\n1
CARET_STRICT _SCINTILLA.constants.CARET_STRICT\n4
CHAR_ADDED events.CHAR_ADDED (string)\nEmitted after adding an ordinary text character to the buffer.\nArguments:\n\n* _`ch`_: The text character byte.
CLASS _M.textadept.adeptsense.CLASS (string)\nCtags kind for Adeptsense classes.
CLASS lexer.CLASS (string)\nThe token name for class tokens.
CLEAR keys.CLEAR (string)\nThe string representing the key sequence that clears the current key chain.\nIt cannot be part of a key chain.\nThe default value is `'esc'` for the `Esc` (`âŽ‹` on Mac OSX | `Esc` in\ncurses) key.
COMMAND_ENTRY_KEYPRESS events.COMMAND_ENTRY_KEYPRESS (string)\nEmitted when pressing a key in the Command Entry.\nIf any handler returns `true`, the key is not inserted into the entry.\nArguments:\n\n* _`code`_: The numeric key code.\n* _`shift`_: The "Shift" modifier key is held down.\n* _`ctrl`_: The "Control"/"Command" modifier key is held down.\n* _`alt`_: The "Alt"/"Option" modifier key is held down.\n* _`meta`_: The "Control" modifier key on Mac OSX is held down.
COMMENT lexer.COMMENT (string)\nThe token name for comment tokens.
COMPILE_OUTPUT events.COMPILE_OUTPUT (string)\nEmitted after executing a language's compile command.\nBy default, compiler output is printed to the message buffer. To override\nthis behavior, connect to the event with an index of `1` and return `true`.\nArguments:\n\n* `lexer`: The lexer language name.\n* `output`: The string output from the command.
CONSTANT lexer.CONSTANT (string)\nThe token name for constant tokens.
CURSES _G.CURSES (bool)\nIf Textadept is running in the terminal, this flag is `true`.\nCurses feature incompatibilities are listed in the Appendix.
Carg lpeg.Carg(n)\nCreates an argument capture. This pattern matches the empty string and\nproduces the value given as the nth extra argument given in the call to\n`lpeg.match`.
Cb lpeg.Cb(name)\nCreates a back capture. This pattern matches the empty string and produces\nthe values produced by the most recent group capture named `name`.\n\nMost recent means the last complete outermost group capture with the given\nname. A Complete capture means that the entire pattern corresponding to the\ncapture has matched. An Outermost capture means that the capture is not\ninside another complete capture.
Cc lpeg.Cc([value, ...])\nCreates a constant capture. This pattern matches the empty string and\nproduces all given values as its captured values.
Cf lpeg.Cf(patt, func)\nCreates a fold capture. If patt produces a list of captures C1 C2 ... Cn,\nthis capture will produce the value func(...func(func(C1, C2), C3)..., Cn),\nthat is, it will fold (or accumulate, or reduce) the captures from `patt`\nusing function `func`.\n\nThis capture assumes that `patt` should produce at least one capture with at\nleast one value (of any type), which becomes the initial value of an\naccumulator. (If you need a specific initial value, you may prefix a constant\ncapture to `patt`.) For each subsequent capture, LPeg calls `func` with this\naccumulator as the first argument and all values produced by the capture as\nextra arguments; the first result from this call becomes the new value for\nthe accumulator. The final value of the accumulator becomes the captured\nvalue.\n\nAs an example, the following pattern matches a list of numbers separated by\ncommas and returns their addition:\n\n  -- matches a numeral and captures its numerical value\n  number = lpeg.R"09"^1 / tonumber\n  -- matches a list of numbers, capturing their values\n  list = number * ("," * number)^0\n  -- auxiliary function to add two numbers\n  function add (acc, newvalue) return acc + newvalue end\n  -- folds the list of numbers adding them\n  sum = lpeg.Cf(list, add)\n  -- example of use\n  print(sum:match("10,30,43"))   --> 83
Cg lpeg.Cg(patt [, name])\nCreates a group capture. It groups all values returned by `patt` into a\nsingle capture. The group may be anonymous (if no name is given) or named\nwith the given name.\n\nAn anonymous group serves to join values from several captures into a single\ncapture. A named group has a different behavior. In most situations, a named\ngroup returns no values at all. Its values are only relevant for a following\nback capture or when used inside a table capture.
Cmt lpeg.Cmt(patt, function)\nCreates a match-time capture. Unlike all other captures, this one is\nevaluated immediately when a match occurs. It forces the immediate evaluation\nof all its nested captures and then calls `function`.\n\nThe given function gets as arguments the entire subject, the current position\n(after the match of `patt`), plus any capture values produced by `patt`.\n\nThe first value returned by `function` defines how the match happens. If the\ncall returns a number, the match succeeds and the returned number becomes the\nnew current position. (Assuming a subject s and current position i, the\nreturned number must be in the range [i, len(s) + 1].) If the call returns\ntrue, the match succeeds without consuming any input. (So, to return true is\nequivalent to return i.) If the call returns false, nil, or no value, the\nmatch fails.\n\nAny extra values returned by the function become the values produced by the\ncapture.
Cp lpeg.Cp()\nCreates a position capture. It matches the empty string and captures the\nposition in the subject where the match occurs. The captured value is a\nnumber.
Cs lpeg.Cs(patt)\nCreates a substitution capture, which captures the substring of the subject\nthat matches `patt`, with substitutions. For any capture inside `patt` with a\nvalue, the substring that matched the capture is replaced by the capture\nvalue (which should be a string). The final captured value is the string\nresulting from all replacements.
Ct lpeg.Ct(patt)\nCreates a table capture. This capture creates a table and puts all values\nfrom all anonymous captures made by `patt` inside this table in successive\ninteger keys, starting at 1. Moreover, for each named capture group created\nby `patt`, the first value of the group is put into the table with the group\nname as its key. The captured value is only the table.
DEFAULT lexer.DEFAULT (string)\nThe token name for default tokens.
DEFAULT_SESSION _M.textadept.session.DEFAULT_SESSION (string)\nThe path to the default session file, *`_USERHOME`/session*, or\n*`_USERHOME`/session_term* if `_G.CURSES` is `true`.
DOUBLE_CLICK events.DOUBLE_CLICK (string)\nEmitted after double-clicking the mouse button.\nArguments:\n\n* _`position`_: The position in the buffer double-clicked.\n* _`line`_: The line number double-clicked.\n* _`modifiers`_: A bit-mask of modifier keys held down. Modifiers are\n  `_SCINTILLA.constants.SCMOD_ALT`, `_SCINTILLA.constants.SCMOD_CTRL`,\n  `_SCINTILLA.constants.SCMOD_SHIFT`, and\n  `_SCINTILLA.constants.SCMOD_META`.\n  Note: If you set `buffer.rectangular_selection_modifier` to\n  `_SCINTILLA.constants.SCMOD_CTRL`, the "Control" modifier is reported as\n  *both* "Control" and "Alt" due to a Scintilla limitation with GTK+.
DWELL_END events.DWELL_END (string)\nEmitted after a `DWELL_START` when the mouse moves, a key is pressed, etc.\nArguments:\n\n* _`position`_: The position in the buffer closest to *x* and *y*.\n* _`x`_: The x-coordinate of the mouse in the view.\n* _`y`_: The y-coordinate of the mouse in the view.
DWELL_START events.DWELL_START (string)\nEmitted after keeping the mouse stationary for the dwell period\nArguments:\n\n* _`position`_: The position in the buffer closest to *x* and *y*.\n* _`x`_: The x-coordinate of the mouse in the view.\n* _`y`_: The y-coordinate of the mouse in the view.
EDGE_BACKGROUND _SCINTILLA.constants.EDGE_BACKGROUND\n2
EDGE_LINE _SCINTILLA.constants.EDGE_LINE\n1
EDGE_NONE _SCINTILLA.constants.EDGE_NONE\n0
ERROR events.ERROR (string)\nEmitted when an error occurs.\nArguments:\n\n* _`text`_: The error text.
ERROR lexer.ERROR (string)\nThe token name for error tokens.
ERROR_COLOR _M.textadept.run.ERROR_COLOR (string)\nThe name of the color in the current theme to mark a line containing a\nrecognized run or compile error.
FIELD _M.textadept.adeptsense.FIELD (string)\nCtags kind for Adeptsense fields.
FIELD_IMAGE _M.textadept.adeptsense.FIELD_IMAGE (string)\nXPM image for Adeptsense fields.
FILE_AFTER_SAVE events.FILE_AFTER_SAVE (string)\nEmitted right after saving a file to disk.\nEmitted by `buffer:save()`.\nArguments:\n\n* _`filename`_: The UTF-8-encoded filename.
FILE_BEFORE_SAVE events.FILE_BEFORE_SAVE (string)\nEmitted right before saving a file to disk.\nEmitted by `buffer:save()`.\nArguments:\n\n* _`filename`_: The UTF-8-encoded filename.
FILE_OPENED events.FILE_OPENED (string)\nEmitted when opening a file in a new buffer.\nEmitted by `open_file()`.\nArguments:\n\n* _`filename`_: The UTF-8-encoded filename.
FILE_SAVED_AS events.FILE_SAVED_AS (string)\nEmitted after saving a file under a different filename.\nEmitted by `buffer:save_as()`.\nArguments:\n\n* _`filename`_: The UTF-8-encoded filename.
FILTER gui.find.FILTER (table)\nTable of Lua patterns matching files and folders to exclude when finding in\nfiles.\nEach filter string is a pattern that matches filenames to exclude, with\npatterns matching folders to exclude listed in a `folders` sub-table.\nPatterns starting with '!' exclude files and folders that do not match the\npattern that follows. Use a table of raw file extensions assigned to an\n`extensions` key for fast filtering by extension. All strings must be encoded\nin `_G._CHARSET`, not UTF-8.\nThe default value is `lfs.FILTER`, a filter for common binary file extensions\nand version control folders.\n@see find_in_files
FILTER lfs.FILTER (table)\nFilter table containing common binary file extensions and version control\nfolders to exclude when iterating over files and directories using\n`dir_foreach` when its `exclude_FILTER` argument is `false`.\n@see dir_foreach
FIND events.FIND (string)\nEmitted to find text via the Find dialog box.\nArguments:\n\n* _`text`_: The text to search for.\n* _`next`_: Whether or not to search forward.
FIND_WRAPPED events.FIND_WRAPPED (string)\nEmitted when a search for text wraps, either from bottom to top when\nsearching for a next occurrence, or from top to bottom when searching for a\nprevious occurrence.\nThis is useful for implementing a more visual or audible notice when a\nsearch wraps in addition to the statusbar message.
FOLD_BASE lexer.FOLD_BASE (number)\nThe initial (root) fold level.
FOLD_BLANK lexer.FOLD_BLANK (number)\nFlag indicating that the line is blank.
FOLD_HEADER lexer.FOLD_HEADER (number)\nFlag indicating the line is fold point.
FUNCTION _M.textadept.adeptsense.FUNCTION (string)\nCtags kind for Adeptsense functions.
FUNCTION lexer.FUNCTION (string)\nThe token name for function tokens.
FUNCTION_IMAGE _M.textadept.adeptsense.FUNCTION_IMAGE (string)\nXPM image for Adeptsense functions.
HIGHLIGHT_BRACES _M.textadept.editing.HIGHLIGHT_BRACES (bool)\nHighlight matching brace characters like "()[]{}".\nThe default value is `true`.\nMatching braces are defined in the `braces` table.
HIGHLIGHT_COLOR _M.textadept.editing.HIGHLIGHT_COLOR (string)\nThe name of the color in the current theme to\nhighlight words with.
HOTSPOT_CLICK events.HOTSPOT_CLICK (string)\nEmitted when clicking on text that is in a style with the hotspot attribute\nset.\nArguments:\n\n* _`position`_: The position in the buffer clicked.\n* _`modifiers`_: A bit-mask of modifier keys held down. Modifiers are\n  `_SCINTILLA.constants.SCMOD_ALT`, `_SCINTILLA.constants.SCMOD_CTRL`,\n  `_SCINTILLA.constants.SCMOD_SHIFT`, and\n  `_SCINTILLA.constants.SCMOD_META`.\n  Note: If you set `buffer.rectangular_selection_modifier` to\n  `_SCINTILLA.constants.SCMOD_CTRL`, the "Control" modifier is reported as\n  *both* "Control" and "Alt" due to a Scintilla limitation with GTK+.
HOTSPOT_DOUBLE_CLICK events.HOTSPOT_DOUBLE_CLICK (string)\nEmitted when double-clicking on text that is in a style with the hotspot\nattribute set.\nArguments:\n\n* _`position`_: The position in the buffer double-clicked.\n* _`modifiers`_: A bit-mask of modifier keys held down. Modifiers are\n  `_SCINTILLA.constants.SCMOD_ALT`, `_SCINTILLA.constants.SCMOD_CTRL`,\n  `_SCINTILLA.constants.SCMOD_SHIFT`, and\n  `_SCINTILLA.constants.SCMOD_META`.\n  Note: If you set `buffer.rectangular_selection_modifier` to\n  `_SCINTILLA.constants.SCMOD_CTRL`, the "Control" modifier is reported as\n  *both* "Control" and "Alt" due to a Scintilla limitation with GTK+.
HOTSPOT_RELEASE_CLICK events.HOTSPOT_RELEASE_CLICK (string)\nEmitted after releasing the mouse after clicking on text that was in a\nstyle with the hotspot attribute set.\nArguments:\n\n* _`position`_: The position in the buffer unclicked.
IDENTIFIER lexer.IDENTIFIER (string)\nThe token name for identifier tokens.
INDIC0_MASK _SCINTILLA.constants.INDIC0_MASK\n32
INDIC1_MASK _SCINTILLA.constants.INDIC1_MASK\n64
INDIC2_MASK _SCINTILLA.constants.INDIC2_MASK\n128
INDICATOR_CLICK events.INDICATOR_CLICK (string)\nEmitted when clicking the mouse on text that has an indicator.\nArguments:\n\n* _`position`_: The position in the buffer clicked.\n* _`modifiers`_: A bit-mask of modifier keys held down. Modifiers are\n  `_SCINTILLA.constants.SCMOD_ALT`, `_SCINTILLA.constants.SCMOD_CTRL`,\n  `_SCINTILLA.constants.SCMOD_SHIFT`, and\n  `_SCINTILLA.constants.SCMOD_META`.\n  Note: If you set `buffer.rectangular_selection_modifier` to\n  `_SCINTILLA.constants.SCMOD_CTRL`, the "Control" modifier is reported as\n  *both* "Control" and "Alt" due to a Scintilla limitation with GTK+.
INDICATOR_RELEASE events.INDICATOR_RELEASE (string)\nEmitted after releasing the mouse after clicking on text that had an\nindicator.\nArguments:\n\n* _`position`_: The position in the buffer unclicked.
INDICS_MASK _SCINTILLA.constants.INDICS_MASK\n224
INDIC_BOX _SCINTILLA.constants.INDIC_BOX\n6
INDIC_COMPOSITIONTHICK _SCINTILLA.constants.INDIC_COMPOSITIONTHICK\n14
INDIC_CONTAINER _SCINTILLA.constants.INDIC_CONTAINER\n8
INDIC_DASH _SCINTILLA.constants.INDIC_DASH\n9
INDIC_DIAGONAL _SCINTILLA.constants.INDIC_DIAGONAL\n3
INDIC_DOTBOX _SCINTILLA.constants.INDIC_DOTBOX\n12
INDIC_DOTS _SCINTILLA.constants.INDIC_DOTS\n10
INDIC_HIDDEN _SCINTILLA.constants.INDIC_HIDDEN\n5
INDIC_MAX _SCINTILLA.constants.INDIC_MAX\n31
INDIC_PLAIN _SCINTILLA.constants.INDIC_PLAIN\n0
INDIC_ROUNDBOX _SCINTILLA.constants.INDIC_ROUNDBOX\n7
INDIC_SQUIGGLE _SCINTILLA.constants.INDIC_SQUIGGLE\n1
INDIC_SQUIGGLELOW _SCINTILLA.constants.INDIC_SQUIGGLELOW\n11
INDIC_SQUIGGLEPIXMAP _SCINTILLA.constants.INDIC_SQUIGGLEPIXMAP\n13
INDIC_STRAIGHTBOX _SCINTILLA.constants.INDIC_STRAIGHTBOX\n8
INDIC_STRIKE _SCINTILLA.constants.INDIC_STRIKE\n4
INDIC_TT _SCINTILLA.constants.INDIC_TT\n2
INVALID_POSITION _SCINTILLA.constants.INVALID_POSITION\n-1
KEYPRESS events.KEYPRESS (string)\nEmitted when pressing a key.\nIf any handler returns `true`, the key is not inserted into the buffer.\nArguments:\n\n* _`code`_: The numeric key code.\n* _`shift`_: The "Shift" modifier key is held down.\n* _`ctrl`_: The "Control"/"Command" modifier key is held down.\n* _`alt`_: The "Alt"/"Option" modifier key is held down.\n* _`meta`_: The "Control" modifier key on Mac OSX is held down.
KEYSYMS keys.KEYSYMS (table)\nLookup table for string representations of key codes higher than 255.\nKey codes can be identified by temporarily uncommenting the `print()`\nstatements in *core/keys.lua*.
KEYWORD lexer.KEYWORD (string)\nThe token name for keyword tokens.
KEYWORDSET_MAX _SCINTILLA.constants.KEYWORDSET_MAX\n8
LABEL lexer.LABEL (string)\nThe token name for label tokens.
LANGUAGE_MODULE_LOADED events.LANGUAGE_MODULE_LOADED (string)\nEmitted after loading a language-specific module.\nThis is useful for overriding a language-specific module's key bindings\nor other properties since the module is not loaded when Textadept starts.\nArguments:\n\n* *`lang`*: The language lexer name.
LANGUAGE_MODULE_PREFIX keys.LANGUAGE_MODULE_PREFIX (string)\nThe starting key of the key chain reserved for language-specific modules.\nThe default value is `'cl'` on platforms other than Mac OSX, `'ml'`\notherwise. Equivalent to `Ctrl+L` (`âŒ˜L` on Mac OSX | `M-L` in curses).
MARGIN_CLICK events.MARGIN_CLICK (string)\nEmitted when clicking the mouse inside a margin.\nArguments:\n\n* _`margin`_: The margin number clicked.\n* _`position`_: The position of the start of the line in the buffer whose\n  margin line was clicked.\n* _`modifiers`_: A bit-mask of modifier keys held down. Modifiers are\n  `_SCINTILLA.constants.SCMOD_ALT`, `_SCINTILLA.constants.SCMOD_CTRL`,\n  `_SCINTILLA.constants.SCMOD_SHIFT`, and\n  `_SCINTILLA.constants.SCMOD_META`.\n  Note: If you set `buffer.rectangular_selection_modifier` to\n  `_SCINTILLA.constants.SCMOD_CTRL`, the "Control" modifier is reported as\n  *both* "Control" and "Alt" due to a Scintilla limitation with GTK+.
MARKER_MAX _SCINTILLA.constants.MARKER_MAX\n31
MAX_RECENT_FILES _M.textadept.session.MAX_RECENT_FILES (number)\nThe maximum number of recent files to save to the session.\nRecent files are stored in `io.recent_files`.\nThe default value is `10`.
MENU_CLICKED events.MENU_CLICKED (string)\nEmitted after selecting a menu item.\nArguments:\n\n* _`menu_id`_: The numeric ID of the menu item set in `gui.menu()`.
MODE keys.MODE (string)\nThe current key mode.\nWhen non-`nil`, all key bindings defined outside of `keys[MODE]` are\nignored.\nThe default value is `nil`.
NUMBER lexer.NUMBER (string)\nThe token name for number tokens.
OPERATOR lexer.OPERATOR (string)\nThe token name for operator tokens.
OSX _G.OSX (bool)\nIf Textadept is running on Mac OSX, this flag is `true`.
P lpeg.P(value)\nConverts the given value into a proper pattern, according to the following\nrules:\n  * If the argument is a pattern, it is returned unmodified.\n  * If the argument is a string, it is translated to a pattern that matches\n    the string literally.\n  * If the argument is a non-negative number n, the result is a pattern that\n    matches exactly n characters.\n  * If the argument is a negative number -n, the result is a pattern that\n    succeeds only if the input string has less than n characters left:\n    `lpeg.P(-n)` is equivalent to `-lpeg.P(n)` (see the unary minus\n    operation).\n  * If the argument is a boolean, the result is a pattern that always\n    succeeds or always fails (according to the boolean value), without\n    consuming any input.\n  * If the argument is a table, it is interpreted as a grammar (see\n    Grammars).\n  * If the argument is a function, returns a pattern equivalent to a\n    match-time capture over the empty string.
PREPROCESSOR lexer.PREPROCESSOR (string)\nThe token name for preprocessor tokens.
QUIT events.QUIT (string)\nEmitted when quitting Textadept.\nWhen connecting to this event, connect with an index of 1 or the handler\nwill be ignored.\nEmitted by `quit()`.
R lpeg.R({range})\nReturns a pattern that matches any single character belonging to one of the\ngiven ranges. Each `range` is a string xy of length 2, representing all\ncharacters with code between the codes of x and y (both inclusive).\n\nAs an example, the pattern `lpeg.R("09")` matches any digit, and\n`lpeg.R("az", "AZ")` matches any ASCII letter.
REGEX lexer.REGEX (string)\nThe token name for regex tokens.
REPLACE events.REPLACE (string)\nEmitted to replace selected (found) text.\nArguments:\n\n* _`text`_: The text to replace the selected text with.
REPLACE_ALL events.REPLACE_ALL (string)\nEmitted to replace all occurrences of found text.\nArguments:\n\n* _`find_text`_: The text to search for.\n* _`repl_text`_: The text to replace found text with.
RESET_AFTER events.RESET_AFTER (string)\nEmitted after resetting the Lua state.\nEmitted by `reset()`.
RESET_BEFORE events.RESET_BEFORE (string)\nEmitted before resetting the Lua state.\nEmitted by `reset()`.
RUN_OUTPUT events.RUN_OUTPUT (string)\nEmitted after executing a language's run command.\nBy default, output is printed to the message buffer. To override this\nbehavior, connect to the event with an index of `1` and return `true`.\nArguments:\n\n* `lexer`: The lexer language name.\n* `output`: The string output from the command.
S lpeg.S(string)\nReturns a pattern that matches any single character that appears in the given\nstring. (The S stands for Set.)\n\nAs an example, the pattern `lpeg.S("+-*/")` matches any arithmetic operator.\n\nNote that, if `s` is a character (that is, a string of length 1), then\n`lpeg.P(s)` is equivalent to `lpeg.S(s)` which is equivalent to\n`lpeg.R(s..s)`. Note also that both `lpeg.S("")` and `lpeg.R()` are patterns\nthat always fail.
SAVE_ON_QUIT _M.textadept.session.SAVE_ON_QUIT (bool)\nSave the session when quitting.\nThe session file saved is always `DEFAULT_SESSION`, even if a different\nsession was loaded with `load()`.\nThe default value is `true`, but is disabled when passing the command line\nswitch `-n` or `--nosession` to Textadept.
SAVE_POINT_LEFT events.SAVE_POINT_LEFT (string)\nEmitted after leaving a save point.
SAVE_POINT_REACHED events.SAVE_POINT_REACHED (string)\nEmitted after reaching a save point.
SCEN_CHANGE _SCINTILLA.constants.SCEN_CHANGE\n768
SCEN_KILLFOCUS _SCINTILLA.constants.SCEN_KILLFOCUS\n256
SCEN_SETFOCUS _SCINTILLA.constants.SCEN_SETFOCUS\n512
SCFIND_MATCHCASE _SCINTILLA.constants.SCFIND_MATCHCASE\n4
SCFIND_POSIX _SCINTILLA.constants.SCFIND_POSIX\n4194304
SCFIND_REGEXP _SCINTILLA.constants.SCFIND_REGEXP\n2097152
SCFIND_WHOLEWORD _SCINTILLA.constants.SCFIND_WHOLEWORD\n2
SCFIND_WORDSTART _SCINTILLA.constants.SCFIND_WORDSTART\n1048576
SCI_ANNOTATIONGETLINES _SCINTILLA.constants.SCI_ANNOTATIONGETLINES\n2546
SCI_ANNOTATIONGETSTYLE _SCINTILLA.constants.SCI_ANNOTATIONGETSTYLE\n2543
SCI_ANNOTATIONGETSTYLEOFFSET _SCINTILLA.constants.SCI_ANNOTATIONGETSTYLEOFFSET\n2551
SCI_ANNOTATIONGETSTYLES _SCINTILLA.constants.SCI_ANNOTATIONGETSTYLES\n2545
SCI_ANNOTATIONGETTEXT _SCINTILLA.constants.SCI_ANNOTATIONGETTEXT\n2541
SCI_ANNOTATIONGETVISIBLE _SCINTILLA.constants.SCI_ANNOTATIONGETVISIBLE\n2549
SCI_ANNOTATIONSETSTYLE _SCINTILLA.constants.SCI_ANNOTATIONSETSTYLE\n2542
SCI_ANNOTATIONSETSTYLEOFFSET _SCINTILLA.constants.SCI_ANNOTATIONSETSTYLEOFFSET\n2550
SCI_ANNOTATIONSETSTYLES _SCINTILLA.constants.SCI_ANNOTATIONSETSTYLES\n2544
SCI_ANNOTATIONSETTEXT _SCINTILLA.constants.SCI_ANNOTATIONSETTEXT\n2540
SCI_ANNOTATIONSETVISIBLE _SCINTILLA.constants.SCI_ANNOTATIONSETVISIBLE\n2548
SCI_AUTOCGETAUTOHIDE _SCINTILLA.constants.SCI_AUTOCGETAUTOHIDE\n2119
SCI_AUTOCGETCANCELATSTART _SCINTILLA.constants.SCI_AUTOCGETCANCELATSTART\n2111
SCI_AUTOCGETCASEINSENSITIVEBEHAVIOUR _SCINTILLA.constants.SCI_AUTOCGETCASEINSENSITIVEBEHAVIOUR\n2635
SCI_AUTOCGETCHOOSESINGLE _SCINTILLA.constants.SCI_AUTOCGETCHOOSESINGLE\n2114
SCI_AUTOCGETCURRENT _SCINTILLA.constants.SCI_AUTOCGETCURRENT\n2445
SCI_AUTOCGETCURRENTTEXT _SCINTILLA.constants.SCI_AUTOCGETCURRENTTEXT\n2610
SCI_AUTOCGETDROPRESTOFWORD _SCINTILLA.constants.SCI_AUTOCGETDROPRESTOFWORD\n2271
SCI_AUTOCGETIGNORECASE _SCINTILLA.constants.SCI_AUTOCGETIGNORECASE\n2116
SCI_AUTOCGETMAXHEIGHT _SCINTILLA.constants.SCI_AUTOCGETMAXHEIGHT\n2211
SCI_AUTOCGETMAXWIDTH _SCINTILLA.constants.SCI_AUTOCGETMAXWIDTH\n2209
SCI_AUTOCGETORDER _SCINTILLA.constants.SCI_AUTOCGETORDER\n2661
SCI_AUTOCGETSEPARATOR _SCINTILLA.constants.SCI_AUTOCGETSEPARATOR\n2107
SCI_AUTOCGETTYPESEPARATOR _SCINTILLA.constants.SCI_AUTOCGETTYPESEPARATOR\n2285
SCI_AUTOCSETAUTOHIDE _SCINTILLA.constants.SCI_AUTOCSETAUTOHIDE\n2118
SCI_AUTOCSETCANCELATSTART _SCINTILLA.constants.SCI_AUTOCSETCANCELATSTART\n2110
SCI_AUTOCSETCASEINSENSITIVEBEHAVIOUR _SCINTILLA.constants.SCI_AUTOCSETCASEINSENSITIVEBEHAVIOUR\n2634
SCI_AUTOCSETCHOOSESINGLE _SCINTILLA.constants.SCI_AUTOCSETCHOOSESINGLE\n2113
SCI_AUTOCSETDROPRESTOFWORD _SCINTILLA.constants.SCI_AUTOCSETDROPRESTOFWORD\n2270
SCI_AUTOCSETFILLUPS _SCINTILLA.constants.SCI_AUTOCSETFILLUPS\n2112
SCI_AUTOCSETIGNORECASE _SCINTILLA.constants.SCI_AUTOCSETIGNORECASE\n2115
SCI_AUTOCSETMAXHEIGHT _SCINTILLA.constants.SCI_AUTOCSETMAXHEIGHT\n2210
SCI_AUTOCSETMAXWIDTH _SCINTILLA.constants.SCI_AUTOCSETMAXWIDTH\n2208
SCI_AUTOCSETORDER _SCINTILLA.constants.SCI_AUTOCSETORDER\n2660
SCI_AUTOCSETSEPARATOR _SCINTILLA.constants.SCI_AUTOCSETSEPARATOR\n2106
SCI_AUTOCSETTYPESEPARATOR _SCINTILLA.constants.SCI_AUTOCSETTYPESEPARATOR\n2286
SCI_CALLTIPSETBACK _SCINTILLA.constants.SCI_CALLTIPSETBACK\n2205
SCI_CALLTIPSETFORE _SCINTILLA.constants.SCI_CALLTIPSETFORE\n2206
SCI_CALLTIPSETFOREHLT _SCINTILLA.constants.SCI_CALLTIPSETFOREHLT\n2207
SCI_CALLTIPSETPOSITION _SCINTILLA.constants.SCI_CALLTIPSETPOSITION\n2213
SCI_CALLTIPUSESTYLE _SCINTILLA.constants.SCI_CALLTIPUSESTYLE\n2212
SCI_DISTANCETOSECONDARYSTYLES _SCINTILLA.constants.SCI_DISTANCETOSECONDARYSTYLES\n4025
SCI_GETADDITIONALCARETFORE _SCINTILLA.constants.SCI_GETADDITIONALCARETFORE\n2605
SCI_GETADDITIONALCARETSBLINK _SCINTILLA.constants.SCI_GETADDITIONALCARETSBLINK\n2568
SCI_GETADDITIONALCARETSVISIBLE _SCINTILLA.constants.SCI_GETADDITIONALCARETSVISIBLE\n2609
SCI_GETADDITIONALSELALPHA _SCINTILLA.constants.SCI_GETADDITIONALSELALPHA\n2603
SCI_GETADDITIONALSELECTIONTYPING _SCINTILLA.constants.SCI_GETADDITIONALSELECTIONTYPING\n2566
SCI_GETALLLINESVISIBLE _SCINTILLA.constants.SCI_GETALLLINESVISIBLE\n2236
SCI_GETANCHOR _SCINTILLA.constants.SCI_GETANCHOR\n2009
SCI_GETAUTOMATICFOLD _SCINTILLA.constants.SCI_GETAUTOMATICFOLD\n2664
SCI_GETBACKSPACEUNINDENTS _SCINTILLA.constants.SCI_GETBACKSPACEUNINDENTS\n2263
SCI_GETBUFFEREDDRAW _SCINTILLA.constants.SCI_GETBUFFEREDDRAW\n2034
SCI_GETCARETFORE _SCINTILLA.constants.SCI_GETCARETFORE\n2138
SCI_GETCARETLINEBACK _SCINTILLA.constants.SCI_GETCARETLINEBACK\n2097
SCI_GETCARETLINEBACKALPHA _SCINTILLA.constants.SCI_GETCARETLINEBACKALPHA\n2471
SCI_GETCARETLINEVISIBLE _SCINTILLA.constants.SCI_GETCARETLINEVISIBLE\n2095
SCI_GETCARETLINEVISIBLEALWAYS _SCINTILLA.constants.SCI_GETCARETLINEVISIBLEALWAYS\n2654
SCI_GETCARETPERIOD _SCINTILLA.constants.SCI_GETCARETPERIOD\n2075
SCI_GETCARETSTICKY _SCINTILLA.constants.SCI_GETCARETSTICKY\n2457
SCI_GETCARETSTYLE _SCINTILLA.constants.SCI_GETCARETSTYLE\n2513
SCI_GETCARETWIDTH _SCINTILLA.constants.SCI_GETCARETWIDTH\n2189
SCI_GETCHARACTERPOINTER _SCINTILLA.constants.SCI_GETCHARACTERPOINTER\n2520
SCI_GETCHARAT _SCINTILLA.constants.SCI_GETCHARAT\n2007
SCI_GETCODEPAGE _SCINTILLA.constants.SCI_GETCODEPAGE\n2137
SCI_GETCOLUMN _SCINTILLA.constants.SCI_GETCOLUMN\n2129
SCI_GETCONTROLCHARSYMBOL _SCINTILLA.constants.SCI_GETCONTROLCHARSYMBOL\n2389
SCI_GETCURRENTPOS _SCINTILLA.constants.SCI_GETCURRENTPOS\n2008
SCI_GETCURSOR _SCINTILLA.constants.SCI_GETCURSOR\n2387
SCI_GETDIRECTFUNCTION _SCINTILLA.constants.SCI_GETDIRECTFUNCTION\n2184
SCI_GETDIRECTPOINTER _SCINTILLA.constants.SCI_GETDIRECTPOINTER\n2185
SCI_GETDOCPOINTER _SCINTILLA.constants.SCI_GETDOCPOINTER\n2357
SCI_GETEDGECOLOUR _SCINTILLA.constants.SCI_GETEDGECOLOUR\n2364
SCI_GETEDGECOLUMN _SCINTILLA.constants.SCI_GETEDGECOLUMN\n2360
SCI_GETEDGEMODE _SCINTILLA.constants.SCI_GETEDGEMODE\n2362
SCI_GETENDATLASTLINE _SCINTILLA.constants.SCI_GETENDATLASTLINE\n2278
SCI_GETENDSTYLED _SCINTILLA.constants.SCI_GETENDSTYLED\n2028
SCI_GETEOLMODE _SCINTILLA.constants.SCI_GETEOLMODE\n2030
SCI_GETEXTRAASCENT _SCINTILLA.constants.SCI_GETEXTRAASCENT\n2526
SCI_GETEXTRADESCENT _SCINTILLA.constants.SCI_GETEXTRADESCENT\n2528
SCI_GETFIRSTVISIBLELINE _SCINTILLA.constants.SCI_GETFIRSTVISIBLELINE\n2152
SCI_GETFOCUS _SCINTILLA.constants.SCI_GETFOCUS\n2381
SCI_GETFOLDEXPANDED _SCINTILLA.constants.SCI_GETFOLDEXPANDED\n2230
SCI_GETFOLDLEVEL _SCINTILLA.constants.SCI_GETFOLDLEVEL\n2223
SCI_GETFOLDPARENT _SCINTILLA.constants.SCI_GETFOLDPARENT\n2225
SCI_GETFONTQUALITY _SCINTILLA.constants.SCI_GETFONTQUALITY\n2612
SCI_GETGAPPOSITION _SCINTILLA.constants.SCI_GETGAPPOSITION\n2644
SCI_GETHIGHLIGHTGUIDE _SCINTILLA.constants.SCI_GETHIGHLIGHTGUIDE\n2135
SCI_GETHOTSPOTACTIVEUNDERLINE _SCINTILLA.constants.SCI_GETHOTSPOTACTIVEUNDERLINE\n2496
SCI_GETHOTSPOTSINGLELINE _SCINTILLA.constants.SCI_GETHOTSPOTSINGLELINE\n2497
SCI_GETHSCROLLBAR _SCINTILLA.constants.SCI_GETHSCROLLBAR\n2131
SCI_GETIDENTIFIER _SCINTILLA.constants.SCI_GETIDENTIFIER\n2623
SCI_GETINDENT _SCINTILLA.constants.SCI_GETINDENT\n2123
SCI_GETINDENTATIONGUIDES _SCINTILLA.constants.SCI_GETINDENTATIONGUIDES\n2133
SCI_GETINDICATORCURRENT _SCINTILLA.constants.SCI_GETINDICATORCURRENT\n2501
SCI_GETINDICATORVALUE _SCINTILLA.constants.SCI_GETINDICATORVALUE\n2503
SCI_GETKEYSUNICODE _SCINTILLA.constants.SCI_GETKEYSUNICODE\n2522
SCI_GETLAYOUTCACHE _SCINTILLA.constants.SCI_GETLAYOUTCACHE\n2273
SCI_GETLENGTH _SCINTILLA.constants.SCI_GETLENGTH\n2006
SCI_GETLEXER _SCINTILLA.constants.SCI_GETLEXER\n4002
SCI_GETLEXERLANGUAGE _SCINTILLA.constants.SCI_GETLEXERLANGUAGE\n4012
SCI_GETLINECOUNT _SCINTILLA.constants.SCI_GETLINECOUNT\n2154
SCI_GETLINEENDPOSITION _SCINTILLA.constants.SCI_GETLINEENDPOSITION\n2136
SCI_GETLINEENDTYPESACTIVE _SCINTILLA.constants.SCI_GETLINEENDTYPESACTIVE\n2658
SCI_GETLINEENDTYPESALLOWED _SCINTILLA.constants.SCI_GETLINEENDTYPESALLOWED\n2657
SCI_GETLINEENDTYPESSUPPORTED _SCINTILLA.constants.SCI_GETLINEENDTYPESSUPPORTED\n4018
SCI_GETLINEINDENTATION _SCINTILLA.constants.SCI_GETLINEINDENTATION\n2127
SCI_GETLINEINDENTPOSITION _SCINTILLA.constants.SCI_GETLINEINDENTPOSITION\n2128
SCI_GETLINESTATE _SCINTILLA.constants.SCI_GETLINESTATE\n2093
SCI_GETLINEVISIBLE _SCINTILLA.constants.SCI_GETLINEVISIBLE\n2228
SCI_GETMAINSELECTION _SCINTILLA.constants.SCI_GETMAINSELECTION\n2575
SCI_GETMARGINCURSORN _SCINTILLA.constants.SCI_GETMARGINCURSORN\n2249
SCI_GETMARGINLEFT _SCINTILLA.constants.SCI_GETMARGINLEFT\n2156
SCI_GETMARGINMASKN _SCINTILLA.constants.SCI_GETMARGINMASKN\n2245
SCI_GETMARGINOPTIONS _SCINTILLA.constants.SCI_GETMARGINOPTIONS\n2557
SCI_GETMARGINRIGHT _SCINTILLA.constants.SCI_GETMARGINRIGHT\n2158
SCI_GETMARGINSENSITIVEN _SCINTILLA.constants.SCI_GETMARGINSENSITIVEN\n2247
SCI_GETMARGINTYPEN _SCINTILLA.constants.SCI_GETMARGINTYPEN\n2241
SCI_GETMARGINWIDTHN _SCINTILLA.constants.SCI_GETMARGINWIDTHN\n2243
SCI_GETMAXLINESTATE _SCINTILLA.constants.SCI_GETMAXLINESTATE\n2094
SCI_GETMODEVENTMASK _SCINTILLA.constants.SCI_GETMODEVENTMASK\n2378
SCI_GETMODIFY _SCINTILLA.constants.SCI_GETMODIFY\n2159
SCI_GETMOUSEDOWNCAPTURES _SCINTILLA.constants.SCI_GETMOUSEDOWNCAPTURES\n2385
SCI_GETMOUSEDWELLTIME _SCINTILLA.constants.SCI_GETMOUSEDWELLTIME\n2265
SCI_GETMULTIPASTE _SCINTILLA.constants.SCI_GETMULTIPASTE\n2615
SCI_GETMULTIPLESELECTION _SCINTILLA.constants.SCI_GETMULTIPLESELECTION\n2564
SCI_GETOVERTYPE _SCINTILLA.constants.SCI_GETOVERTYPE\n2187
SCI_GETPASTECONVERTENDINGS _SCINTILLA.constants.SCI_GETPASTECONVERTENDINGS\n2468
SCI_GETPOSITIONCACHE _SCINTILLA.constants.SCI_GETPOSITIONCACHE\n2515
SCI_GETPRINTCOLOURMODE _SCINTILLA.constants.SCI_GETPRINTCOLOURMODE\n2149
SCI_GETPRINTMAGNIFICATION _SCINTILLA.constants.SCI_GETPRINTMAGNIFICATION\n2147
SCI_GETPRINTWRAPMODE _SCINTILLA.constants.SCI_GETPRINTWRAPMODE\n2407
SCI_GETPROPERTY _SCINTILLA.constants.SCI_GETPROPERTY\n4008
SCI_GETPROPERTYEXPANDED _SCINTILLA.constants.SCI_GETPROPERTYEXPANDED\n4009
SCI_GETPROPERTYINT _SCINTILLA.constants.SCI_GETPROPERTYINT\n4010
SCI_GETPUNCTUATIONCHARS _SCINTILLA.constants.SCI_GETPUNCTUATIONCHARS\n2649
SCI_GETREADONLY _SCINTILLA.constants.SCI_GETREADONLY\n2140
SCI_GETRECTANGULARSELECTIONANCHOR _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONANCHOR\n2591
SCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE\n2595
SCI_GETRECTANGULARSELECTIONCARET _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONCARET\n2589
SCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE\n2593
SCI_GETRECTANGULARSELECTIONMODIFIER _SCINTILLA.constants.SCI_GETRECTANGULARSELECTIONMODIFIER\n2599
SCI_GETSCROLLWIDTH _SCINTILLA.constants.SCI_GETSCROLLWIDTH\n2275
SCI_GETSCROLLWIDTHTRACKING _SCINTILLA.constants.SCI_GETSCROLLWIDTHTRACKING\n2517
SCI_GETSEARCHFLAGS _SCINTILLA.constants.SCI_GETSEARCHFLAGS\n2199
SCI_GETSELALPHA _SCINTILLA.constants.SCI_GETSELALPHA\n2477
SCI_GETSELECTIONEMPTY _SCINTILLA.constants.SCI_GETSELECTIONEMPTY\n2650
SCI_GETSELECTIONEND _SCINTILLA.constants.SCI_GETSELECTIONEND\n2145
SCI_GETSELECTIONMODE _SCINTILLA.constants.SCI_GETSELECTIONMODE\n2423
SCI_GETSELECTIONNANCHOR _SCINTILLA.constants.SCI_GETSELECTIONNANCHOR\n2579
SCI_GETSELECTIONNANCHORVIRTUALSPACE _SCINTILLA.constants.SCI_GETSELECTIONNANCHORVIRTUALSPACE\n2583
SCI_GETSELECTIONNCARET _SCINTILLA.constants.SCI_GETSELECTIONNCARET\n2577
SCI_GETSELECTIONNCARETVIRTUALSPACE _SCINTILLA.constants.SCI_GETSELECTIONNCARETVIRTUALSPACE\n2581
SCI_GETSELECTIONNEND _SCINTILLA.constants.SCI_GETSELECTIONNEND\n2587
SCI_GETSELECTIONNSTART _SCINTILLA.constants.SCI_GETSELECTIONNSTART\n2585
SCI_GETSELECTIONS _SCINTILLA.constants.SCI_GETSELECTIONS\n2570
SCI_GETSELECTIONSTART _SCINTILLA.constants.SCI_GETSELECTIONSTART\n2143
SCI_GETSELEOLFILLED _SCINTILLA.constants.SCI_GETSELEOLFILLED\n2479
SCI_GETSTATUS _SCINTILLA.constants.SCI_GETSTATUS\n2383
SCI_GETSTYLEAT _SCINTILLA.constants.SCI_GETSTYLEAT\n2010
SCI_GETSTYLEBITS _SCINTILLA.constants.SCI_GETSTYLEBITS\n2091
SCI_GETSTYLEBITSNEEDED _SCINTILLA.constants.SCI_GETSTYLEBITSNEEDED\n4011
SCI_GETSUBSTYLEBASES _SCINTILLA.constants.SCI_GETSUBSTYLEBASES\n4026
SCI_GETSUBSTYLESLENGTH _SCINTILLA.constants.SCI_GETSUBSTYLESLENGTH\n4022
SCI_GETSUBSTYLESSTART _SCINTILLA.constants.SCI_GETSUBSTYLESSTART\n4021
SCI_GETTABINDENTS _SCINTILLA.constants.SCI_GETTABINDENTS\n2261
SCI_GETTABWIDTH _SCINTILLA.constants.SCI_GETTABWIDTH\n2121
SCI_GETTAG _SCINTILLA.constants.SCI_GETTAG\n2616
SCI_GETTARGETEND _SCINTILLA.constants.SCI_GETTARGETEND\n2193
SCI_GETTARGETSTART _SCINTILLA.constants.SCI_GETTARGETSTART\n2191
SCI_GETTECHNOLOGY _SCINTILLA.constants.SCI_GETTECHNOLOGY\n2631
SCI_GETTEXTLENGTH _SCINTILLA.constants.SCI_GETTEXTLENGTH\n2183
SCI_GETTWOPHASEDRAW _SCINTILLA.constants.SCI_GETTWOPHASEDRAW\n2283
SCI_GETUNDOCOLLECTION _SCINTILLA.constants.SCI_GETUNDOCOLLECTION\n2019
SCI_GETUSETABS _SCINTILLA.constants.SCI_GETUSETABS\n2125
SCI_GETVIEWEOL _SCINTILLA.constants.SCI_GETVIEWEOL\n2355
SCI_GETVIEWWS _SCINTILLA.constants.SCI_GETVIEWWS\n2020
SCI_GETVIRTUALSPACEOPTIONS _SCINTILLA.constants.SCI_GETVIRTUALSPACEOPTIONS\n2597
SCI_GETVSCROLLBAR _SCINTILLA.constants.SCI_GETVSCROLLBAR\n2281
SCI_GETWHITESPACECHARS _SCINTILLA.constants.SCI_GETWHITESPACECHARS\n2647
SCI_GETWHITESPACESIZE _SCINTILLA.constants.SCI_GETWHITESPACESIZE\n2087
SCI_GETWORDCHARS _SCINTILLA.constants.SCI_GETWORDCHARS\n2646
SCI_GETWRAPINDENTMODE _SCINTILLA.constants.SCI_GETWRAPINDENTMODE\n2473
SCI_GETWRAPMODE _SCINTILLA.constants.SCI_GETWRAPMODE\n2269
SCI_GETWRAPSTARTINDENT _SCINTILLA.constants.SCI_GETWRAPSTARTINDENT\n2465
SCI_GETWRAPVISUALFLAGS _SCINTILLA.constants.SCI_GETWRAPVISUALFLAGS\n2461
SCI_GETWRAPVISUALFLAGSLOCATION _SCINTILLA.constants.SCI_GETWRAPVISUALFLAGSLOCATION\n2463
SCI_GETXOFFSET _SCINTILLA.constants.SCI_GETXOFFSET\n2398
SCI_GETZOOM _SCINTILLA.constants.SCI_GETZOOM\n2374
SCI_INDICGETALPHA _SCINTILLA.constants.SCI_INDICGETALPHA\n2524
SCI_INDICGETFORE _SCINTILLA.constants.SCI_INDICGETFORE\n2083
SCI_INDICGETOUTLINEALPHA _SCINTILLA.constants.SCI_INDICGETOUTLINEALPHA\n2559
SCI_INDICGETSTYLE _SCINTILLA.constants.SCI_INDICGETSTYLE\n2081
SCI_INDICGETUNDER _SCINTILLA.constants.SCI_INDICGETUNDER\n2511
SCI_INDICSETALPHA _SCINTILLA.constants.SCI_INDICSETALPHA\n2523
SCI_INDICSETFORE _SCINTILLA.constants.SCI_INDICSETFORE\n2082
SCI_INDICSETOUTLINEALPHA _SCINTILLA.constants.SCI_INDICSETOUTLINEALPHA\n2558
SCI_INDICSETSTYLE _SCINTILLA.constants.SCI_INDICSETSTYLE\n2080
SCI_INDICSETUNDER _SCINTILLA.constants.SCI_INDICSETUNDER\n2510
SCI_LEXER_START _SCINTILLA.constants.SCI_LEXER_START\n4000
SCI_LINESONSCREEN _SCINTILLA.constants.SCI_LINESONSCREEN\n2370
SCI_MARGINGETSTYLE _SCINTILLA.constants.SCI_MARGINGETSTYLE\n2533
SCI_MARGINGETSTYLEOFFSET _SCINTILLA.constants.SCI_MARGINGETSTYLEOFFSET\n2538
SCI_MARGINGETSTYLES _SCINTILLA.constants.SCI_MARGINGETSTYLES\n2535
SCI_MARGINGETTEXT _SCINTILLA.constants.SCI_MARGINGETTEXT\n2531
SCI_MARGINSETSTYLE _SCINTILLA.constants.SCI_MARGINSETSTYLE\n2532
SCI_MARGINSETSTYLEOFFSET _SCINTILLA.constants.SCI_MARGINSETSTYLEOFFSET\n2537
SCI_MARGINSETSTYLES _SCINTILLA.constants.SCI_MARGINSETSTYLES\n2534
SCI_MARGINSETTEXT _SCINTILLA.constants.SCI_MARGINSETTEXT\n2530
SCI_MARKERSETALPHA _SCINTILLA.constants.SCI_MARKERSETALPHA\n2476
SCI_MARKERSETBACK _SCINTILLA.constants.SCI_MARKERSETBACK\n2042
SCI_MARKERSETBACKSELECTED _SCINTILLA.constants.SCI_MARKERSETBACKSELECTED\n2292
SCI_MARKERSETFORE _SCINTILLA.constants.SCI_MARKERSETFORE\n2041
SCI_OPTIONAL_START _SCINTILLA.constants.SCI_OPTIONAL_START\n3000
SCI_RGBAIMAGESETHEIGHT _SCINTILLA.constants.SCI_RGBAIMAGESETHEIGHT\n2625
SCI_RGBAIMAGESETSCALE _SCINTILLA.constants.SCI_RGBAIMAGESETSCALE\n2651
SCI_RGBAIMAGESETWIDTH _SCINTILLA.constants.SCI_RGBAIMAGESETWIDTH\n2624
SCI_SELECTIONISRECTANGLE _SCINTILLA.constants.SCI_SELECTIONISRECTANGLE\n2372
SCI_SETADDITIONALCARETFORE _SCINTILLA.constants.SCI_SETADDITIONALCARETFORE\n2604
SCI_SETADDITIONALCARETSBLINK _SCINTILLA.constants.SCI_SETADDITIONALCARETSBLINK\n2567
SCI_SETADDITIONALCARETSVISIBLE _SCINTILLA.constants.SCI_SETADDITIONALCARETSVISIBLE\n2608
SCI_SETADDITIONALSELALPHA _SCINTILLA.constants.SCI_SETADDITIONALSELALPHA\n2602
SCI_SETADDITIONALSELBACK _SCINTILLA.constants.SCI_SETADDITIONALSELBACK\n2601
SCI_SETADDITIONALSELECTIONTYPING _SCINTILLA.constants.SCI_SETADDITIONALSELECTIONTYPING\n2565
SCI_SETADDITIONALSELFORE _SCINTILLA.constants.SCI_SETADDITIONALSELFORE\n2600
SCI_SETANCHOR _SCINTILLA.constants.SCI_SETANCHOR\n2026
SCI_SETAUTOMATICFOLD _SCINTILLA.constants.SCI_SETAUTOMATICFOLD\n2663
SCI_SETBACKSPACEUNINDENTS _SCINTILLA.constants.SCI_SETBACKSPACEUNINDENTS\n2262
SCI_SETBUFFEREDDRAW _SCINTILLA.constants.SCI_SETBUFFEREDDRAW\n2035
SCI_SETCARETFORE _SCINTILLA.constants.SCI_SETCARETFORE\n2069
SCI_SETCARETLINEBACK _SCINTILLA.constants.SCI_SETCARETLINEBACK\n2098
SCI_SETCARETLINEBACKALPHA _SCINTILLA.constants.SCI_SETCARETLINEBACKALPHA\n2470
SCI_SETCARETLINEVISIBLE _SCINTILLA.constants.SCI_SETCARETLINEVISIBLE\n2096
SCI_SETCARETLINEVISIBLEALWAYS _SCINTILLA.constants.SCI_SETCARETLINEVISIBLEALWAYS\n2655
SCI_SETCARETPERIOD _SCINTILLA.constants.SCI_SETCARETPERIOD\n2076
SCI_SETCARETSTICKY _SCINTILLA.constants.SCI_SETCARETSTICKY\n2458
SCI_SETCARETSTYLE _SCINTILLA.constants.SCI_SETCARETSTYLE\n2512
SCI_SETCARETWIDTH _SCINTILLA.constants.SCI_SETCARETWIDTH\n2188
SCI_SETCODEPAGE _SCINTILLA.constants.SCI_SETCODEPAGE\n2037
SCI_SETCONTROLCHARSYMBOL _SCINTILLA.constants.SCI_SETCONTROLCHARSYMBOL\n2388
SCI_SETCURRENTPOS _SCINTILLA.constants.SCI_SETCURRENTPOS\n2141
SCI_SETCURSOR _SCINTILLA.constants.SCI_SETCURSOR\n2386
SCI_SETDOCPOINTER _SCINTILLA.constants.SCI_SETDOCPOINTER\n2358
SCI_SETEDGECOLOUR _SCINTILLA.constants.SCI_SETEDGECOLOUR\n2365
SCI_SETEDGECOLUMN _SCINTILLA.constants.SCI_SETEDGECOLUMN\n2361
SCI_SETEDGEMODE _SCINTILLA.constants.SCI_SETEDGEMODE\n2363
SCI_SETENDATLASTLINE _SCINTILLA.constants.SCI_SETENDATLASTLINE\n2277
SCI_SETEOLMODE _SCINTILLA.constants.SCI_SETEOLMODE\n2031
SCI_SETEXTRAASCENT _SCINTILLA.constants.SCI_SETEXTRAASCENT\n2525
SCI_SETEXTRADESCENT _SCINTILLA.constants.SCI_SETEXTRADESCENT\n2527
SCI_SETFIRSTVISIBLELINE _SCINTILLA.constants.SCI_SETFIRSTVISIBLELINE\n2613
SCI_SETFOCUS _SCINTILLA.constants.SCI_SETFOCUS\n2380
SCI_SETFOLDEXPANDED _SCINTILLA.constants.SCI_SETFOLDEXPANDED\n2229
SCI_SETFOLDFLAGS _SCINTILLA.constants.SCI_SETFOLDFLAGS\n2233
SCI_SETFOLDLEVEL _SCINTILLA.constants.SCI_SETFOLDLEVEL\n2222
SCI_SETFONTQUALITY _SCINTILLA.constants.SCI_SETFONTQUALITY\n2611
SCI_SETHIGHLIGHTGUIDE _SCINTILLA.constants.SCI_SETHIGHLIGHTGUIDE\n2134
SCI_SETHOTSPOTACTIVEUNDERLINE _SCINTILLA.constants.SCI_SETHOTSPOTACTIVEUNDERLINE\n2412
SCI_SETHOTSPOTSINGLELINE _SCINTILLA.constants.SCI_SETHOTSPOTSINGLELINE\n2421
SCI_SETHSCROLLBAR _SCINTILLA.constants.SCI_SETHSCROLLBAR\n2130
SCI_SETIDENTIFIER _SCINTILLA.constants.SCI_SETIDENTIFIER\n2622
SCI_SETIDENTIFIERS _SCINTILLA.constants.SCI_SETIDENTIFIERS\n4024
SCI_SETINDENT _SCINTILLA.constants.SCI_SETINDENT\n2122
SCI_SETINDENTATIONGUIDES _SCINTILLA.constants.SCI_SETINDENTATIONGUIDES\n2132
SCI_SETINDICATORCURRENT _SCINTILLA.constants.SCI_SETINDICATORCURRENT\n2500
SCI_SETINDICATORVALUE _SCINTILLA.constants.SCI_SETINDICATORVALUE\n2502
SCI_SETKEYSUNICODE _SCINTILLA.constants.SCI_SETKEYSUNICODE\n2521
SCI_SETKEYWORDS _SCINTILLA.constants.SCI_SETKEYWORDS\n4005
SCI_SETLAYOUTCACHE _SCINTILLA.constants.SCI_SETLAYOUTCACHE\n2272
SCI_SETLEXER _SCINTILLA.constants.SCI_SETLEXER\n4001
SCI_SETLEXERLANGUAGE _SCINTILLA.constants.SCI_SETLEXERLANGUAGE\n4006
SCI_SETLINEENDTYPESALLOWED _SCINTILLA.constants.SCI_SETLINEENDTYPESALLOWED\n2656
SCI_SETLINEINDENTATION _SCINTILLA.constants.SCI_SETLINEINDENTATION\n2126
SCI_SETLINESTATE _SCINTILLA.constants.SCI_SETLINESTATE\n2092
SCI_SETMAINSELECTION _SCINTILLA.constants.SCI_SETMAINSELECTION\n2574
SCI_SETMARGINCURSORN _SCINTILLA.constants.SCI_SETMARGINCURSORN\n2248
SCI_SETMARGINLEFT _SCINTILLA.constants.SCI_SETMARGINLEFT\n2155
SCI_SETMARGINMASKN _SCINTILLA.constants.SCI_SETMARGINMASKN\n2244
SCI_SETMARGINOPTIONS _SCINTILLA.constants.SCI_SETMARGINOPTIONS\n2539
SCI_SETMARGINRIGHT _SCINTILLA.constants.SCI_SETMARGINRIGHT\n2157
SCI_SETMARGINSENSITIVEN _SCINTILLA.constants.SCI_SETMARGINSENSITIVEN\n2246
SCI_SETMARGINTYPEN _SCINTILLA.constants.SCI_SETMARGINTYPEN\n2240
SCI_SETMARGINWIDTHN _SCINTILLA.constants.SCI_SETMARGINWIDTHN\n2242
SCI_SETMODEVENTMASK _SCINTILLA.constants.SCI_SETMODEVENTMASK\n2359
SCI_SETMOUSEDOWNCAPTURES _SCINTILLA.constants.SCI_SETMOUSEDOWNCAPTURES\n2384
SCI_SETMOUSEDWELLTIME _SCINTILLA.constants.SCI_SETMOUSEDWELLTIME\n2264
SCI_SETMULTIPASTE _SCINTILLA.constants.SCI_SETMULTIPASTE\n2614
SCI_SETMULTIPLESELECTION _SCINTILLA.constants.SCI_SETMULTIPLESELECTION\n2563
SCI_SETOVERTYPE _SCINTILLA.constants.SCI_SETOVERTYPE\n2186
SCI_SETPASTECONVERTENDINGS _SCINTILLA.constants.SCI_SETPASTECONVERTENDINGS\n2467
SCI_SETPOSITIONCACHE _SCINTILLA.constants.SCI_SETPOSITIONCACHE\n2514
SCI_SETPRINTCOLOURMODE _SCINTILLA.constants.SCI_SETPRINTCOLOURMODE\n2148
SCI_SETPRINTMAGNIFICATION _SCINTILLA.constants.SCI_SETPRINTMAGNIFICATION\n2146
SCI_SETPRINTWRAPMODE _SCINTILLA.constants.SCI_SETPRINTWRAPMODE\n2406
SCI_SETPROPERTY _SCINTILLA.constants.SCI_SETPROPERTY\n4004
SCI_SETPUNCTUATIONCHARS _SCINTILLA.constants.SCI_SETPUNCTUATIONCHARS\n2648
SCI_SETREADONLY _SCINTILLA.constants.SCI_SETREADONLY\n2171
SCI_SETRECTANGULARSELECTIONANCHOR _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONANCHOR\n2590
SCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE\n2594
SCI_SETRECTANGULARSELECTIONCARET _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONCARET\n2588
SCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE\n2592
SCI_SETRECTANGULARSELECTIONMODIFIER _SCINTILLA.constants.SCI_SETRECTANGULARSELECTIONMODIFIER\n2598
SCI_SETSCROLLWIDTH _SCINTILLA.constants.SCI_SETSCROLLWIDTH\n2274
SCI_SETSCROLLWIDTHTRACKING _SCINTILLA.constants.SCI_SETSCROLLWIDTHTRACKING\n2516
SCI_SETSEARCHFLAGS _SCINTILLA.constants.SCI_SETSEARCHFLAGS\n2198
SCI_SETSELALPHA _SCINTILLA.constants.SCI_SETSELALPHA\n2478
SCI_SETSELECTIONEND _SCINTILLA.constants.SCI_SETSELECTIONEND\n2144
SCI_SETSELECTIONMODE _SCINTILLA.constants.SCI_SETSELECTIONMODE\n2422
SCI_SETSELECTIONNANCHOR _SCINTILLA.constants.SCI_SETSELECTIONNANCHOR\n2578
SCI_SETSELECTIONNANCHORVIRTUALSPACE _SCINTILLA.constants.SCI_SETSELECTIONNANCHORVIRTUALSPACE\n2582
SCI_SETSELECTIONNCARET _SCINTILLA.constants.SCI_SETSELECTIONNCARET\n2576
SCI_SETSELECTIONNCARETVIRTUALSPACE _SCINTILLA.constants.SCI_SETSELECTIONNCARETVIRTUALSPACE\n2580
SCI_SETSELECTIONNEND _SCINTILLA.constants.SCI_SETSELECTIONNEND\n2586
SCI_SETSELECTIONNSTART _SCINTILLA.constants.SCI_SETSELECTIONNSTART\n2584
SCI_SETSELECTIONSTART _SCINTILLA.constants.SCI_SETSELECTIONSTART\n2142
SCI_SETSELEOLFILLED _SCINTILLA.constants.SCI_SETSELEOLFILLED\n2480
SCI_SETSTATUS _SCINTILLA.constants.SCI_SETSTATUS\n2382
SCI_SETSTYLEBITS _SCINTILLA.constants.SCI_SETSTYLEBITS\n2090
SCI_SETTABINDENTS _SCINTILLA.constants.SCI_SETTABINDENTS\n2260
SCI_SETTABWIDTH _SCINTILLA.constants.SCI_SETTABWIDTH\n2036
SCI_SETTARGETEND _SCINTILLA.constants.SCI_SETTARGETEND\n2192
SCI_SETTARGETSTART _SCINTILLA.constants.SCI_SETTARGETSTART\n2190
SCI_SETTECHNOLOGY _SCINTILLA.constants.SCI_SETTECHNOLOGY\n2630
SCI_SETTWOPHASEDRAW _SCINTILLA.constants.SCI_SETTWOPHASEDRAW\n2284
SCI_SETUNDOCOLLECTION _SCINTILLA.constants.SCI_SETUNDOCOLLECTION\n2012
SCI_SETUSETABS _SCINTILLA.constants.SCI_SETUSETABS\n2124
SCI_SETVIEWEOL _SCINTILLA.constants.SCI_SETVIEWEOL\n2356
SCI_SETVIEWWS _SCINTILLA.constants.SCI_SETVIEWWS\n2021
SCI_SETVIRTUALSPACEOPTIONS _SCINTILLA.constants.SCI_SETVIRTUALSPACEOPTIONS\n2596
SCI_SETVSCROLLBAR _SCINTILLA.constants.SCI_SETVSCROLLBAR\n2280
SCI_SETWHITESPACECHARS _SCINTILLA.constants.SCI_SETWHITESPACECHARS\n2443
SCI_SETWHITESPACESIZE _SCINTILLA.constants.SCI_SETWHITESPACESIZE\n2086
SCI_SETWORDCHARS _SCINTILLA.constants.SCI_SETWORDCHARS\n2077
SCI_SETWRAPINDENTMODE _SCINTILLA.constants.SCI_SETWRAPINDENTMODE\n2472
SCI_SETWRAPMODE _SCINTILLA.constants.SCI_SETWRAPMODE\n2268
SCI_SETWRAPSTARTINDENT _SCINTILLA.constants.SCI_SETWRAPSTARTINDENT\n2464
SCI_SETWRAPVISUALFLAGS _SCINTILLA.constants.SCI_SETWRAPVISUALFLAGS\n2460
SCI_SETWRAPVISUALFLAGSLOCATION _SCINTILLA.constants.SCI_SETWRAPVISUALFLAGSLOCATION\n2462
SCI_SETXOFFSET _SCINTILLA.constants.SCI_SETXOFFSET\n2397
SCI_SETZOOM _SCINTILLA.constants.SCI_SETZOOM\n2373
SCI_START _SCINTILLA.constants.SCI_START\n2000
SCI_STYLEGETBACK _SCINTILLA.constants.SCI_STYLEGETBACK\n2482
SCI_STYLEGETBOLD _SCINTILLA.constants.SCI_STYLEGETBOLD\n2483
SCI_STYLEGETCASE _SCINTILLA.constants.SCI_STYLEGETCASE\n2489
SCI_STYLEGETCHANGEABLE _SCINTILLA.constants.SCI_STYLEGETCHANGEABLE\n2492
SCI_STYLEGETCHARACTERSET _SCINTILLA.constants.SCI_STYLEGETCHARACTERSET\n2490
SCI_STYLEGETEOLFILLED _SCINTILLA.constants.SCI_STYLEGETEOLFILLED\n2487
SCI_STYLEGETFONT _SCINTILLA.constants.SCI_STYLEGETFONT\n2486
SCI_STYLEGETFORE _SCINTILLA.constants.SCI_STYLEGETFORE\n2481
SCI_STYLEGETHOTSPOT _SCINTILLA.constants.SCI_STYLEGETHOTSPOT\n2493
SCI_STYLEGETITALIC _SCINTILLA.constants.SCI_STYLEGETITALIC\n2484
SCI_STYLEGETSIZE _SCINTILLA.constants.SCI_STYLEGETSIZE\n2485
SCI_STYLEGETSIZEFRACTIONAL _SCINTILLA.constants.SCI_STYLEGETSIZEFRACTIONAL\n2062
SCI_STYLEGETUNDERLINE _SCINTILLA.constants.SCI_STYLEGETUNDERLINE\n2488
SCI_STYLEGETVISIBLE _SCINTILLA.constants.SCI_STYLEGETVISIBLE\n2491
SCI_STYLEGETWEIGHT _SCINTILLA.constants.SCI_STYLEGETWEIGHT\n2064
SCI_STYLESETBACK _SCINTILLA.constants.SCI_STYLESETBACK\n2052
SCI_STYLESETBOLD _SCINTILLA.constants.SCI_STYLESETBOLD\n2053
SCI_STYLESETCASE _SCINTILLA.constants.SCI_STYLESETCASE\n2060
SCI_STYLESETCHANGEABLE _SCINTILLA.constants.SCI_STYLESETCHANGEABLE\n2099
SCI_STYLESETCHARACTERSET _SCINTILLA.constants.SCI_STYLESETCHARACTERSET\n2066
SCI_STYLESETEOLFILLED _SCINTILLA.constants.SCI_STYLESETEOLFILLED\n2057
SCI_STYLESETFONT _SCINTILLA.constants.SCI_STYLESETFONT\n2056
SCI_STYLESETFORE _SCINTILLA.constants.SCI_STYLESETFORE\n2051
SCI_STYLESETHOTSPOT _SCINTILLA.constants.SCI_STYLESETHOTSPOT\n2409
SCI_STYLESETITALIC _SCINTILLA.constants.SCI_STYLESETITALIC\n2054
SCI_STYLESETSIZE _SCINTILLA.constants.SCI_STYLESETSIZE\n2055
SCI_STYLESETSIZEFRACTIONAL _SCINTILLA.constants.SCI_STYLESETSIZEFRACTIONAL\n2061
SCI_STYLESETUNDERLINE _SCINTILLA.constants.SCI_STYLESETUNDERLINE\n2059
SCI_STYLESETVISIBLE _SCINTILLA.constants.SCI_STYLESETVISIBLE\n2074
SCI_STYLESETWEIGHT _SCINTILLA.constants.SCI_STYLESETWEIGHT\n2063
SCK_ADD _SCINTILLA.constants.SCK_ADD\n310
SCK_BACK _SCINTILLA.constants.SCK_BACK\n8
SCK_DELETE _SCINTILLA.constants.SCK_DELETE\n308
SCK_DIVIDE _SCINTILLA.constants.SCK_DIVIDE\n312
SCK_DOWN _SCINTILLA.constants.SCK_DOWN\n300
SCK_END _SCINTILLA.constants.SCK_END\n305
SCK_ESCAPE _SCINTILLA.constants.SCK_ESCAPE\n7
SCK_HOME _SCINTILLA.constants.SCK_HOME\n304
SCK_INSERT _SCINTILLA.constants.SCK_INSERT\n309
SCK_LEFT _SCINTILLA.constants.SCK_LEFT\n302
SCK_MENU _SCINTILLA.constants.SCK_MENU\n315
SCK_NEXT _SCINTILLA.constants.SCK_NEXT\n307
SCK_PRIOR _SCINTILLA.constants.SCK_PRIOR\n306
SCK_RETURN _SCINTILLA.constants.SCK_RETURN\n13
SCK_RIGHT _SCINTILLA.constants.SCK_RIGHT\n303
SCK_RWIN _SCINTILLA.constants.SCK_RWIN\n314
SCK_SUBTRACT _SCINTILLA.constants.SCK_SUBTRACT\n311
SCK_TAB _SCINTILLA.constants.SCK_TAB\n9
SCK_UP _SCINTILLA.constants.SCK_UP\n301
SCK_WIN _SCINTILLA.constants.SCK_WIN\n313
SCLEX_AUTOMATIC _SCINTILLA.constants.SCLEX_AUTOMATIC\n1000
SCLEX_CONTAINER _SCINTILLA.constants.SCLEX_CONTAINER\n0
SCLEX_LPEG _SCINTILLA.constants.SCLEX_LPEG\n999
SCMOD_ALT _SCINTILLA.constants.SCMOD_ALT\n4
SCMOD_CTRL _SCINTILLA.constants.SCMOD_CTRL\n2
SCMOD_META _SCINTILLA.constants.SCMOD_META\n16
SCMOD_NORM _SCINTILLA.constants.SCMOD_NORM\n0
SCMOD_SHIFT _SCINTILLA.constants.SCMOD_SHIFT\n1
SCMOD_SUPER _SCINTILLA.constants.SCMOD_SUPER\n8
SCN_AUTOCCANCELLED _SCINTILLA.constants.SCN_AUTOCCANCELLED\n2026
SCN_AUTOCCHARDELETED _SCINTILLA.constants.SCN_AUTOCCHARDELETED\n2027
SCN_AUTOCSELECTION _SCINTILLA.constants.SCN_AUTOCSELECTION\n2022
SCN_CALLTIPCLICK _SCINTILLA.constants.SCN_CALLTIPCLICK\n2021
SCN_CHARADDED _SCINTILLA.constants.SCN_CHARADDED\n2001
SCN_DOUBLECLICK _SCINTILLA.constants.SCN_DOUBLECLICK\n2006
SCN_DWELLEND _SCINTILLA.constants.SCN_DWELLEND\n2017
SCN_DWELLSTART _SCINTILLA.constants.SCN_DWELLSTART\n2016
SCN_HOTSPOTCLICK _SCINTILLA.constants.SCN_HOTSPOTCLICK\n2019
SCN_HOTSPOTDOUBLECLICK _SCINTILLA.constants.SCN_HOTSPOTDOUBLECLICK\n2020
SCN_HOTSPOTRELEASECLICK _SCINTILLA.constants.SCN_HOTSPOTRELEASECLICK\n2028
SCN_INDICATORCLICK _SCINTILLA.constants.SCN_INDICATORCLICK\n2023
SCN_INDICATORRELEASE _SCINTILLA.constants.SCN_INDICATORRELEASE\n2024
SCN_KEY _SCINTILLA.constants.SCN_KEY\n2005
SCN_MACRORECORD _SCINTILLA.constants.SCN_MACRORECORD\n2009
SCN_MARGINCLICK _SCINTILLA.constants.SCN_MARGINCLICK\n2010
SCN_MODIFIED _SCINTILLA.constants.SCN_MODIFIED\n2008
SCN_MODIFYATTEMPTRO _SCINTILLA.constants.SCN_MODIFYATTEMPTRO\n2004
SCN_NEEDSHOWN _SCINTILLA.constants.SCN_NEEDSHOWN\n2011
SCN_PAINTED _SCINTILLA.constants.SCN_PAINTED\n2013
SCN_SAVEPOINTLEFT _SCINTILLA.constants.SCN_SAVEPOINTLEFT\n2003
SCN_SAVEPOINTREACHED _SCINTILLA.constants.SCN_SAVEPOINTREACHED\n2002
SCN_STYLENEEDED _SCINTILLA.constants.SCN_STYLENEEDED\n2000
SCN_UPDATEUI _SCINTILLA.constants.SCN_UPDATEUI\n2007
SCN_URIDROPPED _SCINTILLA.constants.SCN_URIDROPPED\n2015
SCN_USERLISTSELECTION _SCINTILLA.constants.SCN_USERLISTSELECTION\n2014
SCN_ZOOM _SCINTILLA.constants.SCN_ZOOM\n2018
SCVS_NONE _SCINTILLA.constants.SCVS_NONE\n0
SCVS_RECTANGULARSELECTION _SCINTILLA.constants.SCVS_RECTANGULARSELECTION\n1
SCVS_USERACCESSIBLE _SCINTILLA.constants.SCVS_USERACCESSIBLE\n2
SCWS_INVISIBLE _SCINTILLA.constants.SCWS_INVISIBLE\n0
SCWS_VISIBLEAFTERINDENT _SCINTILLA.constants.SCWS_VISIBLEAFTERINDENT\n2
SCWS_VISIBLEALWAYS _SCINTILLA.constants.SCWS_VISIBLEALWAYS\n1
SC_ALPHA_NOALPHA _SCINTILLA.constants.SC_ALPHA_NOALPHA\n256
SC_ALPHA_OPAQUE _SCINTILLA.constants.SC_ALPHA_OPAQUE\n255
SC_ALPHA_TRANSPARENT _SCINTILLA.constants.SC_ALPHA_TRANSPARENT\n0
SC_AUTOMATICFOLD_CHANGE _SCINTILLA.constants.SC_AUTOMATICFOLD_CHANGE\n4
SC_AUTOMATICFOLD_CLICK _SCINTILLA.constants.SC_AUTOMATICFOLD_CLICK\n2
SC_AUTOMATICFOLD_SHOW _SCINTILLA.constants.SC_AUTOMATICFOLD_SHOW\n1
SC_CACHE_CARET _SCINTILLA.constants.SC_CACHE_CARET\n1
SC_CACHE_DOCUMENT _SCINTILLA.constants.SC_CACHE_DOCUMENT\n3
SC_CACHE_NONE _SCINTILLA.constants.SC_CACHE_NONE\n0
SC_CACHE_PAGE _SCINTILLA.constants.SC_CACHE_PAGE\n2
SC_CARETSTICKY_OFF _SCINTILLA.constants.SC_CARETSTICKY_OFF\n0
SC_CARETSTICKY_ON _SCINTILLA.constants.SC_CARETSTICKY_ON\n1
SC_CARETSTICKY_WHITESPACE _SCINTILLA.constants.SC_CARETSTICKY_WHITESPACE\n2
SC_CASEINSENSITIVEBEHAVIOUR_IGNORECASE _SCINTILLA.constants.SC_CASEINSENSITIVEBEHAVIOUR_IGNORECASE\n1
SC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE _SCINTILLA.constants.SC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE\n0
SC_CASE_LOWER _SCINTILLA.constants.SC_CASE_LOWER\n2
SC_CASE_MIXED _SCINTILLA.constants.SC_CASE_MIXED\n0
SC_CASE_UPPER _SCINTILLA.constants.SC_CASE_UPPER\n1
SC_CHARSET_8859_15 _SCINTILLA.constants.SC_CHARSET_8859_15\n1000
SC_CHARSET_ANSI _SCINTILLA.constants.SC_CHARSET_ANSI\n0
SC_CHARSET_ARABIC _SCINTILLA.constants.SC_CHARSET_ARABIC\n178
SC_CHARSET_BALTIC _SCINTILLA.constants.SC_CHARSET_BALTIC\n186
SC_CHARSET_CHINESEBIG5 _SCINTILLA.constants.SC_CHARSET_CHINESEBIG5\n136
SC_CHARSET_CYRILLIC _SCINTILLA.constants.SC_CHARSET_CYRILLIC\n1251
SC_CHARSET_DEFAULT _SCINTILLA.constants.SC_CHARSET_DEFAULT\n1
SC_CHARSET_EASTEUROPE _SCINTILLA.constants.SC_CHARSET_EASTEUROPE\n238
SC_CHARSET_GB2312 _SCINTILLA.constants.SC_CHARSET_GB2312\n134
SC_CHARSET_GREEK _SCINTILLA.constants.SC_CHARSET_GREEK\n161
SC_CHARSET_HANGUL _SCINTILLA.constants.SC_CHARSET_HANGUL\n129
SC_CHARSET_HEBREW _SCINTILLA.constants.SC_CHARSET_HEBREW\n177
SC_CHARSET_JOHAB _SCINTILLA.constants.SC_CHARSET_JOHAB\n130
SC_CHARSET_MAC _SCINTILLA.constants.SC_CHARSET_MAC\n77
SC_CHARSET_OEM _SCINTILLA.constants.SC_CHARSET_OEM\n255
SC_CHARSET_RUSSIAN _SCINTILLA.constants.SC_CHARSET_RUSSIAN\n204
SC_CHARSET_SHIFTJIS _SCINTILLA.constants.SC_CHARSET_SHIFTJIS\n128
SC_CHARSET_SYMBOL _SCINTILLA.constants.SC_CHARSET_SYMBOL\n2
SC_CHARSET_THAI _SCINTILLA.constants.SC_CHARSET_THAI\n222
SC_CHARSET_TURKISH _SCINTILLA.constants.SC_CHARSET_TURKISH\n162
SC_CHARSET_VIETNAMESE _SCINTILLA.constants.SC_CHARSET_VIETNAMESE\n163
SC_CP_UTF8 _SCINTILLA.constants.SC_CP_UTF8\n65001
SC_CURSORARROW _SCINTILLA.constants.SC_CURSORARROW\n2
SC_CURSORNORMAL _SCINTILLA.constants.SC_CURSORNORMAL\n-1
SC_CURSORREVERSEARROW _SCINTILLA.constants.SC_CURSORREVERSEARROW\n7
SC_CURSORWAIT _SCINTILLA.constants.SC_CURSORWAIT\n4
SC_EFF_QUALITY_ANTIALIASED _SCINTILLA.constants.SC_EFF_QUALITY_ANTIALIASED\n2
SC_EFF_QUALITY_DEFAULT _SCINTILLA.constants.SC_EFF_QUALITY_DEFAULT\n0
SC_EFF_QUALITY_LCD_OPTIMIZED _SCINTILLA.constants.SC_EFF_QUALITY_LCD_OPTIMIZED\n3
SC_EFF_QUALITY_MASK _SCINTILLA.constants.SC_EFF_QUALITY_MASK\n15
SC_EFF_QUALITY_NON_ANTIALIASED _SCINTILLA.constants.SC_EFF_QUALITY_NON_ANTIALIASED\n1
SC_EOL_CR _SCINTILLA.constants.SC_EOL_CR\n1
SC_EOL_CRLF _SCINTILLA.constants.SC_EOL_CRLF\n0
SC_EOL_LF _SCINTILLA.constants.SC_EOL_LF\n2
SC_FOLDACTION_CONTRACT _SCINTILLA.constants.SC_FOLDACTION_CONTRACT\n0
SC_FOLDACTION_EXPAND _SCINTILLA.constants.SC_FOLDACTION_EXPAND\n1
SC_FOLDACTION_TOGGLE _SCINTILLA.constants.SC_FOLDACTION_TOGGLE\n2
SC_FOLDFLAG_LEVELNUMBERS _SCINTILLA.constants.SC_FOLDFLAG_LEVELNUMBERS\n64
SC_FOLDFLAG_LINEAFTER_CONTRACTED _SCINTILLA.constants.SC_FOLDFLAG_LINEAFTER_CONTRACTED\n16
SC_FOLDFLAG_LINEAFTER_EXPANDED _SCINTILLA.constants.SC_FOLDFLAG_LINEAFTER_EXPANDED\n8
SC_FOLDFLAG_LINEBEFORE_CONTRACTED _SCINTILLA.constants.SC_FOLDFLAG_LINEBEFORE_CONTRACTED\n4
SC_FOLDFLAG_LINEBEFORE_EXPANDED _SCINTILLA.constants.SC_FOLDFLAG_LINEBEFORE_EXPANDED\n2
SC_FOLDLEVELBASE _SCINTILLA.constants.SC_FOLDLEVELBASE\n1024
SC_FOLDLEVELHEADERFLAG _SCINTILLA.constants.SC_FOLDLEVELHEADERFLAG\n8192
SC_FOLDLEVELNUMBERMASK _SCINTILLA.constants.SC_FOLDLEVELNUMBERMASK\n4095
SC_FOLDLEVELWHITEFLAG _SCINTILLA.constants.SC_FOLDLEVELWHITEFLAG\n4096
SC_FONT_SIZE_MULTIPLIER _SCINTILLA.constants.SC_FONT_SIZE_MULTIPLIER\n100
SC_IV_LOOKBOTH _SCINTILLA.constants.SC_IV_LOOKBOTH\n3
SC_IV_LOOKFORWARD _SCINTILLA.constants.SC_IV_LOOKFORWARD\n2
SC_IV_NONE _SCINTILLA.constants.SC_IV_NONE\n0
SC_IV_REAL _SCINTILLA.constants.SC_IV_REAL\n1
SC_LASTSTEPINUNDOREDO _SCINTILLA.constants.SC_LASTSTEPINUNDOREDO\n256
SC_LINE_END_TYPE_DEFAULT _SCINTILLA.constants.SC_LINE_END_TYPE_DEFAULT\n0
SC_LINE_END_TYPE_UNICODE _SCINTILLA.constants.SC_LINE_END_TYPE_UNICODE\n1
SC_MARGINOPTION_NONE _SCINTILLA.constants.SC_MARGINOPTION_NONE\n0
SC_MARGINOPTION_SUBLINESELECT _SCINTILLA.constants.SC_MARGINOPTION_SUBLINESELECT\n1
SC_MARGIN_BACK _SCINTILLA.constants.SC_MARGIN_BACK\n2
SC_MARGIN_FORE _SCINTILLA.constants.SC_MARGIN_FORE\n3
SC_MARGIN_NUMBER _SCINTILLA.constants.SC_MARGIN_NUMBER\n1
SC_MARGIN_RTEXT _SCINTILLA.constants.SC_MARGIN_RTEXT\n5
SC_MARGIN_SYMBOL _SCINTILLA.constants.SC_MARGIN_SYMBOL\n0
SC_MARGIN_TEXT _SCINTILLA.constants.SC_MARGIN_TEXT\n4
SC_MARKNUM_FOLDER _SCINTILLA.constants.SC_MARKNUM_FOLDER\n30
SC_MARKNUM_FOLDEREND _SCINTILLA.constants.SC_MARKNUM_FOLDEREND\n25
SC_MARKNUM_FOLDERMIDTAIL _SCINTILLA.constants.SC_MARKNUM_FOLDERMIDTAIL\n27
SC_MARKNUM_FOLDEROPEN _SCINTILLA.constants.SC_MARKNUM_FOLDEROPEN\n31
SC_MARKNUM_FOLDEROPENMID _SCINTILLA.constants.SC_MARKNUM_FOLDEROPENMID\n26
SC_MARKNUM_FOLDERSUB _SCINTILLA.constants.SC_MARKNUM_FOLDERSUB\n29
SC_MARKNUM_FOLDERTAIL _SCINTILLA.constants.SC_MARKNUM_FOLDERTAIL\n28
SC_MARK_ARROW _SCINTILLA.constants.SC_MARK_ARROW\n2
SC_MARK_ARROWDOWN _SCINTILLA.constants.SC_MARK_ARROWDOWN\n6
SC_MARK_ARROWS _SCINTILLA.constants.SC_MARK_ARROWS\n24
SC_MARK_AVAILABLE _SCINTILLA.constants.SC_MARK_AVAILABLE\n28
SC_MARK_BACKGROUND _SCINTILLA.constants.SC_MARK_BACKGROUND\n22
SC_MARK_BOXMINUS _SCINTILLA.constants.SC_MARK_BOXMINUS\n14
SC_MARK_BOXMINUSCONNECTED _SCINTILLA.constants.SC_MARK_BOXMINUSCONNECTED\n15
SC_MARK_BOXPLUS _SCINTILLA.constants.SC_MARK_BOXPLUS\n12
SC_MARK_BOXPLUSCONNECTED _SCINTILLA.constants.SC_MARK_BOXPLUSCONNECTED\n13
SC_MARK_CHARACTER _SCINTILLA.constants.SC_MARK_CHARACTER\n10000
SC_MARK_CIRCLE _SCINTILLA.constants.SC_MARK_CIRCLE\n0
SC_MARK_CIRCLEMINUS _SCINTILLA.constants.SC_MARK_CIRCLEMINUS\n20
SC_MARK_CIRCLEMINUSCONNECTED _SCINTILLA.constants.SC_MARK_CIRCLEMINUSCONNECTED\n21
SC_MARK_CIRCLEPLUS _SCINTILLA.constants.SC_MARK_CIRCLEPLUS\n18
SC_MARK_CIRCLEPLUSCONNECTED _SCINTILLA.constants.SC_MARK_CIRCLEPLUSCONNECTED\n19
SC_MARK_DOTDOTDOT _SCINTILLA.constants.SC_MARK_DOTDOTDOT\n23
SC_MARK_EMPTY _SCINTILLA.constants.SC_MARK_EMPTY\n5
SC_MARK_FULLRECT _SCINTILLA.constants.SC_MARK_FULLRECT\n26
SC_MARK_LCORNER _SCINTILLA.constants.SC_MARK_LCORNER\n10
SC_MARK_LCORNERCURVE _SCINTILLA.constants.SC_MARK_LCORNERCURVE\n16
SC_MARK_LEFTRECT _SCINTILLA.constants.SC_MARK_LEFTRECT\n27
SC_MARK_MINUS _SCINTILLA.constants.SC_MARK_MINUS\n7
SC_MARK_PIXMAP _SCINTILLA.constants.SC_MARK_PIXMAP\n25
SC_MARK_PLUS _SCINTILLA.constants.SC_MARK_PLUS\n8
SC_MARK_RGBAIMAGE _SCINTILLA.constants.SC_MARK_RGBAIMAGE\n30
SC_MARK_ROUNDRECT _SCINTILLA.constants.SC_MARK_ROUNDRECT\n1
SC_MARK_SHORTARROW _SCINTILLA.constants.SC_MARK_SHORTARROW\n4
SC_MARK_SMALLRECT _SCINTILLA.constants.SC_MARK_SMALLRECT\n3
SC_MARK_TCORNER _SCINTILLA.constants.SC_MARK_TCORNER\n11
SC_MARK_TCORNERCURVE _SCINTILLA.constants.SC_MARK_TCORNERCURVE\n17
SC_MARK_UNDERLINE _SCINTILLA.constants.SC_MARK_UNDERLINE\n29
SC_MARK_VLINE _SCINTILLA.constants.SC_MARK_VLINE\n9
SC_MASK_FOLDERS _SCINTILLA.constants.SC_MASK_FOLDERS\n-33554432
SC_MAX_MARGIN _SCINTILLA.constants.SC_MAX_MARGIN\n4
SC_MODEVENTMASKALL _SCINTILLA.constants.SC_MODEVENTMASKALL\n1048575
SC_MOD_BEFOREDELETE _SCINTILLA.constants.SC_MOD_BEFOREDELETE\n2048
SC_MOD_BEFOREINSERT _SCINTILLA.constants.SC_MOD_BEFOREINSERT\n1024
SC_MOD_CHANGEANNOTATION _SCINTILLA.constants.SC_MOD_CHANGEANNOTATION\n131072
SC_MOD_CHANGEFOLD _SCINTILLA.constants.SC_MOD_CHANGEFOLD\n8
SC_MOD_CHANGEINDICATOR _SCINTILLA.constants.SC_MOD_CHANGEINDICATOR\n16384
SC_MOD_CHANGELINESTATE _SCINTILLA.constants.SC_MOD_CHANGELINESTATE\n32768
SC_MOD_CHANGEMARGIN _SCINTILLA.constants.SC_MOD_CHANGEMARGIN\n65536
SC_MOD_CHANGEMARKER _SCINTILLA.constants.SC_MOD_CHANGEMARKER\n512
SC_MOD_CHANGESTYLE _SCINTILLA.constants.SC_MOD_CHANGESTYLE\n4
SC_MOD_CONTAINER _SCINTILLA.constants.SC_MOD_CONTAINER\n262144
SC_MOD_DELETETEXT _SCINTILLA.constants.SC_MOD_DELETETEXT\n2
SC_MOD_INSERTTEXT _SCINTILLA.constants.SC_MOD_INSERTTEXT\n1
SC_MOD_LEXERSTATE _SCINTILLA.constants.SC_MOD_LEXERSTATE\n524288
SC_MULTILINEUNDOREDO _SCINTILLA.constants.SC_MULTILINEUNDOREDO\n4096
SC_MULTIPASTE_EACH _SCINTILLA.constants.SC_MULTIPASTE_EACH\n1
SC_MULTIPASTE_ONCE _SCINTILLA.constants.SC_MULTIPASTE_ONCE\n0
SC_MULTISTEPUNDOREDO _SCINTILLA.constants.SC_MULTISTEPUNDOREDO\n128
SC_ORDER_CUSTOM _SCINTILLA.constants.SC_ORDER_CUSTOM\n2
SC_ORDER_PERFORMSORT _SCINTILLA.constants.SC_ORDER_PERFORMSORT\n1
SC_ORDER_PRESORTED _SCINTILLA.constants.SC_ORDER_PRESORTED\n0
SC_PERFORMED_REDO _SCINTILLA.constants.SC_PERFORMED_REDO\n64
SC_PERFORMED_UNDO _SCINTILLA.constants.SC_PERFORMED_UNDO\n32
SC_PERFORMED_USER _SCINTILLA.constants.SC_PERFORMED_USER\n16
SC_PRINT_BLACKONWHITE _SCINTILLA.constants.SC_PRINT_BLACKONWHITE\n2
SC_PRINT_COLOURONWHITE _SCINTILLA.constants.SC_PRINT_COLOURONWHITE\n3
SC_PRINT_COLOURONWHITEDEFAULTBG _SCINTILLA.constants.SC_PRINT_COLOURONWHITEDEFAULTBG\n4
SC_PRINT_INVERTLIGHT _SCINTILLA.constants.SC_PRINT_INVERTLIGHT\n1
SC_PRINT_NORMAL _SCINTILLA.constants.SC_PRINT_NORMAL\n0
SC_SEL_LINES _SCINTILLA.constants.SC_SEL_LINES\n2
SC_SEL_RECTANGLE _SCINTILLA.constants.SC_SEL_RECTANGLE\n1
SC_SEL_STREAM _SCINTILLA.constants.SC_SEL_STREAM\n0
SC_SEL_THIN _SCINTILLA.constants.SC_SEL_THIN\n3
SC_STARTACTION _SCINTILLA.constants.SC_STARTACTION\n8192
SC_STATUS_BADALLOC _SCINTILLA.constants.SC_STATUS_BADALLOC\n2
SC_STATUS_FAILURE _SCINTILLA.constants.SC_STATUS_FAILURE\n1
SC_STATUS_OK _SCINTILLA.constants.SC_STATUS_OK\n0
SC_TECHNOLOGY_DEFAULT _SCINTILLA.constants.SC_TECHNOLOGY_DEFAULT\n0
SC_TECHNOLOGY_DIRECTWRITE _SCINTILLA.constants.SC_TECHNOLOGY_DIRECTWRITE\n1
SC_TIME_FOREVER _SCINTILLA.constants.SC_TIME_FOREVER\n10000000
SC_TYPE_BOOLEAN _SCINTILLA.constants.SC_TYPE_BOOLEAN\n0
SC_TYPE_INTEGER _SCINTILLA.constants.SC_TYPE_INTEGER\n1
SC_TYPE_STRING _SCINTILLA.constants.SC_TYPE_STRING\n2
SC_UPDATE_CONTENT _SCINTILLA.constants.SC_UPDATE_CONTENT\n1
SC_UPDATE_H_SCROLL _SCINTILLA.constants.SC_UPDATE_H_SCROLL\n8
SC_UPDATE_SELECTION _SCINTILLA.constants.SC_UPDATE_SELECTION\n2
SC_UPDATE_V_SCROLL _SCINTILLA.constants.SC_UPDATE_V_SCROLL\n4
SC_WEIGHT_BOLD _SCINTILLA.constants.SC_WEIGHT_BOLD\n700
SC_WEIGHT_NORMAL _SCINTILLA.constants.SC_WEIGHT_NORMAL\n400
SC_WEIGHT_SEMIBOLD _SCINTILLA.constants.SC_WEIGHT_SEMIBOLD\n600
SC_WRAPINDENT_FIXED _SCINTILLA.constants.SC_WRAPINDENT_FIXED\n0
SC_WRAPINDENT_INDENT _SCINTILLA.constants.SC_WRAPINDENT_INDENT\n2
SC_WRAPINDENT_SAME _SCINTILLA.constants.SC_WRAPINDENT_SAME\n1
SC_WRAPVISUALFLAGLOC_DEFAULT _SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_DEFAULT\n0
SC_WRAPVISUALFLAGLOC_END_BY_TEXT _SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_END_BY_TEXT\n1
SC_WRAPVISUALFLAGLOC_START_BY_TEXT _SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_START_BY_TEXT\n2
SC_WRAPVISUALFLAG_END _SCINTILLA.constants.SC_WRAPVISUALFLAG_END\n1
SC_WRAPVISUALFLAG_MARGIN _SCINTILLA.constants.SC_WRAPVISUALFLAG_MARGIN\n4
SC_WRAPVISUALFLAG_NONE _SCINTILLA.constants.SC_WRAPVISUALFLAG_NONE\n0
SC_WRAPVISUALFLAG_START _SCINTILLA.constants.SC_WRAPVISUALFLAG_START\n2
SC_WRAP_CHAR _SCINTILLA.constants.SC_WRAP_CHAR\n2
SC_WRAP_NONE _SCINTILLA.constants.SC_WRAP_NONE\n0
SC_WRAP_WORD _SCINTILLA.constants.SC_WRAP_WORD\n1
SNAPOPEN_MAX io.SNAPOPEN_MAX (number)\nThe maximum number of files to list in the snapopen dialog.\nThe default value is `1000`.
STRING lexer.STRING (string)\nThe token name for string tokens.
STRIP_TRAILING_SPACES _M.textadept.editing.STRIP_TRAILING_SPACES (bool)\nStrip trailing whitespace on file save.\nThe default value is `true`.
STYLE_BRACEBAD _SCINTILLA.constants.STYLE_BRACEBAD\n35
STYLE_BRACEBAD lexer.STYLE_BRACEBAD (string)\nThe style used for unmatched brace characters.
STYLE_BRACELIGHT _SCINTILLA.constants.STYLE_BRACELIGHT\n34
STYLE_BRACELIGHT lexer.STYLE_BRACELIGHT (string)\nThe style used for highlighted brace characters.
STYLE_CALLTIP _SCINTILLA.constants.STYLE_CALLTIP\n38
STYLE_CALLTIP lexer.STYLE_CALLTIP (string)\nThe style used by call tips if `buffer.call_tip_use_style` is set.\nOnly the font name, size, and color attributes are used.
STYLE_CLASS lexer.STYLE_CLASS (string)\nThe style typically used for class definitions.
STYLE_COMMENT lexer.STYLE_COMMENT (string)\nThe style typically used for code comments.
STYLE_CONSTANT lexer.STYLE_CONSTANT (string)\nThe style typically used for constants.
STYLE_CONTROLCHAR _SCINTILLA.constants.STYLE_CONTROLCHAR\n36
STYLE_CONTROLCHAR lexer.STYLE_CONTROLCHAR (string)\nThe style used for control characters.\nColor attributes are ignored.
STYLE_DEFAULT _SCINTILLA.constants.STYLE_DEFAULT\n32
STYLE_DEFAULT lexer.STYLE_DEFAULT (string)\nThe style all styles are based off of.
STYLE_EMBEDDED lexer.STYLE_EMBEDDED (string)\nThe style typically used for embedded code.
STYLE_ERROR lexer.STYLE_ERROR (string)\nThe style typically used for erroneous syntax.
STYLE_FUNCTION lexer.STYLE_FUNCTION (string)\nThe style typically used for function definitions.
STYLE_IDENTIFIER lexer.STYLE_IDENTIFIER (string)\nThe style typically used for identifier words.
STYLE_INDENTGUIDE _SCINTILLA.constants.STYLE_INDENTGUIDE\n37
STYLE_INDENTGUIDE lexer.STYLE_INDENTGUIDE (string)\nThe style used for indentation guides.
STYLE_KEYWORD lexer.STYLE_KEYWORD (string)\nThe style typically used for language keywords.
STYLE_LABEL lexer.STYLE_LABEL (string)\nThe style typically used for labels.
STYLE_LASTPREDEFINED _SCINTILLA.constants.STYLE_LASTPREDEFINED\n39
STYLE_LINENUMBER _SCINTILLA.constants.STYLE_LINENUMBER\n33
STYLE_LINENUMBER lexer.STYLE_LINENUMBER (string)\nThe style used for all margins except fold margins.
STYLE_MAX _SCINTILLA.constants.STYLE_MAX\n255
STYLE_NOTHING lexer.STYLE_NOTHING (string)\nThe style typically used for no styling.
STYLE_NUMBER lexer.STYLE_NUMBER (string)\nThe style typically used for numbers.
STYLE_OPERATOR lexer.STYLE_OPERATOR (string)\nThe style typically used for operators.
STYLE_PREPROCESSOR lexer.STYLE_PREPROCESSOR (string)\nThe style typically used for preprocessor statements.
STYLE_REGEX lexer.STYLE_REGEX (string)\nThe style typically used for regular expression strings.
STYLE_STRING lexer.STYLE_STRING (string)\nThe style typically used for strings.
STYLE_TYPE lexer.STYLE_TYPE (string)\nThe style typically used for static types.
STYLE_VARIABLE lexer.STYLE_VARIABLE (string)\nThe style typically used for variables.
STYLE_WHITESPACE lexer.STYLE_WHITESPACE (string)\nThe style typically used for whitespace.
TYPE lexer.TYPE (string)\nThe token name for type tokens.
TYPEOVER_CHARS _M.textadept.editing.TYPEOVER_CHARS (bool)\nMove over the typeover character under the caret when typing it instead of\ninserting it.\nThe default value is `true`.\nTypeover characters are defined in the `typeover_chars`\ntable.
UNDO_MAY_COALESCE _SCINTILLA.constants.UNDO_MAY_COALESCE\n1
UPDATE_UI events.UPDATE_UI (string)\nEmitted when the text, styling, or selection range in the buffer changes.
URI_DROPPED events.URI_DROPPED (string)\nEmitted after dragging and dropping a URI such as a file name onto the\nview.\nArguments:\n\n* _`text`_: The UTF-8-encoded URI text.
USER_LIST_SELECTION events.USER_LIST_SELECTION (string)\nEmitted after selecting an item in a user list.\nArguments:\n\n* _`list_type`_: The *list_type* from `buffer:user_list_show()`.\n* _`text`_: The text of the selection.\n* _`position`_: The position in the buffer the list was displayed at.
V lpeg.V(v)\nThis operation creates a non-terminal (a variable) for a grammar. The created\nnon-terminal refers to the rule indexed by `v` in the enclosing grammar. (See\nGrammars for details.)
VARIABLE lexer.VARIABLE (string)\nThe token name for variable tokens.
VIEW_AFTER_SWITCH events.VIEW_AFTER_SWITCH (string)\nEmitted right after switching to another view.\nEmitted by `gui.goto_view()`.
VIEW_BEFORE_SWITCH events.VIEW_BEFORE_SWITCH (string)\nEmitted right before switching to another view.\nEmitted by `gui.goto_view()`.
VIEW_NEW events.VIEW_NEW (string)\nEmitted after creating a new view.\nEmitted on startup and by `view:split()`.
VISIBLE_SLOP _SCINTILLA.constants.VISIBLE_SLOP\n1
VISIBLE_STRICT _SCINTILLA.constants.VISIBLE_STRICT\n4
WHITESPACE lexer.WHITESPACE (string)\nThe token name for whitespace tokens.
WIN32 _G.WIN32 (bool)\nIf Textadept is running on Windows, this flag is `true`.
_BUFFERS _G._BUFFERS (table)\nTable of all open buffers in Textadept.\nNumeric keys have buffer values and buffer keys have their associated numeric\nkeys.\n@see _G.buffer
_CHARSET _G._CHARSET (string)\nThe character set encoding of the filesystem.\nThis is used when working with files.
_G _G._G (module)\nLua _G module.
_G _G._G (table)\nA global variable (not a function) that holds the global environment\n(see Â§2.2). Lua itself does not use this variable; changing its value does\nnot affect any environment, nor vice-versa.
_HOME _G._HOME (string)\nThe path to the directory containing Textadept.
_L _G._L (module)\nMap of all messages used by Textadept to their localized form.\nIf the table does not contain the localized version of a given message, it\nreturns a string that starts with "No Localization:" via a metamethod.
_LEXBYLINE lexer.lexer._LEXBYLINE (table)\nIndicates the lexer matches text by whole lines instead of\n   arbitrary chunks.\n   The default value is `false`. Line lexers cannot look ahead to subsequent\n   lines.
_M _G._M (module)\nA table of loaded modules.
_NAME lexer.lexer._NAME (table)\nThe string name of the lexer in lowercase.
_RELEASE _G._RELEASE (string)\nThe Textadept release version string.
_RULES lexer.lexer._RULES (table)\nA map of rule name keys with their associated LPeg pattern\n  values for the lexer.\n  This is constructed from the lexer's `_rules` table and accessible to other\n  lexers for embedded lexer applications like modifying parent or child\n  rules.
_SCINTILLA _G._SCINTILLA (module)\nScintilla constants, functions, and properties.\nDo not modify anything in this module. Doing so will have unpredictable\nconsequences.
_USERHOME _G._USERHOME (string)\nThe path to the user's *~/.textadept/* directory, where all preferences and\nuser-data is stored.\nOn Windows machines *~/* is the value of the "USERHOME" environment\nvariable, typically *C:\Users\username\\* or\n*C:\Documents and Settings\username\\*. On Linux, BSD, and Mac OSX\nmachines *~/* is the value of "$HOME", typically */home/username/* and\n*/Users/username/* respectively.
_VERSION _G._VERSION (string)\nA global variable (not a function) that holds a string containing the\ncurrent interpreter version. The current contents of this variable is\n"`Lua 5.2`".
_VIEWS _G._VIEWS (table)\nTable of all views in Textadept.\nNumeric keys have view values and view keys have their associated numeric\nkeys.\n@see _G.view
_cancel_current _M.textadept.snippets._cancel_current()\nCancels insertion of the active snippet.
_fold lexer.lexer._fold (table)\nIf this function exists in the lexer, it is called for folding\n  the document instead of using `_foldsymbols` or indentation.
_foldsymbols lexer.lexer._foldsymbols (table)\nA table of recognized fold points for the lexer.\n  Keys are token names with table values defining fold points. Those table\n  values have string keys of keywords or characters that indicate a fold\n  point whose values are integers. A value of `1` indicates a beginning fold\n  point and a value of `-1` indicates an ending fold point. Values can also\n  be functions that return `1`, `-1`, or `0` (indicating no fold point) for\n  keys which need additional processing.\n  There is also a required `_pattern` key whose value is a table containing\n  Lua pattern strings that match all fold points (the string keys contained\n  in token name table values). When the lexer encounters text that matches\n  one of those patterns, the matched text is looked up in its token's table\n  to determine whether or not it is a fold point.
_insert _M.textadept.snippets._insert(text)\nInserts snippet text *text* or the snippet associated with the trigger behind\nthe caret as a snippet, or goes to the next placeholder of the active\nsnippet, ultimately only returning `false` if no action was taken.\n@param text Optional snippet text to insert. If `nil`, attempts to insert a\n  new snippet based on the trigger, the word behind caret, and the current\n  lexer.\n@return `false` if no action was taken; `nil` otherwise.\n@see buffer.word_chars
_lexer lexer.lexer._lexer (table)\nFor child lexers embedding themselves into a parent lexer, this\n  field should be set to the parent lexer object in order for the parent's\n  rules to be used instead of the child's.
_previous _M.textadept.snippets._previous()\nGoes back to the previous snippet placeholder, reverting any changes from the\ncurrent one, but returns `false` only if no snippet is active.\n@return `false` if no snippet is active; `nil` otherwise.
_print gui._print(buffer_type, ...)\nHelper function for printing messages to buffers.\nSplits the view and opens a new buffer for printing messages to. If the\nmessage buffer is already open in a view, the message is printed to that\nview. Otherwise the view is split and the message buffer is opened or\ndisplayed before being printed to.\n@param buffer_type String type of message buffer.\n@param ... Message strings.\n@usage gui._print(_L['[Message Buffer]'], message)
_rules lexer.lexer._rules (table)\nAn ordered list of rules for a lexer grammar.\n  Each rule is a table containing an arbitrary rule name and the LPeg pattern\n  associated with the rule. The order of rules is important as rules are\n  matched sequentially. Ensure there is a fallback rule in case the lexer\n  encounters any unexpected input, usually using the predefined `l.any_char`\n  token.\n  Child lexers should not use this table to access and/or modify their\n  parent's rules and vice-versa. Use the `_RULES` table instead.
_select _M.textadept.snippets._select()\nPrompts the user for a snippet to insert from a list of global and\nlanguage-specific snippets.
_tokenstyles lexer.lexer._tokenstyles (table)\nA list of styles associated with non-predefined token\n  names.\n  Each token style is a table containing the name of the token (not a rule\n  containing the token) and the style associated with the token. The order of\n  token styles is not important.\n  It is recommended to use predefined styles or color-agnostic styles derived\n  from predefined styles to ensure compatibility with user color themes.
abs math.abs(x)\nReturns the absolute value of `x`.
acos math.acos(x)\nReturns the arc cosine of `x` (in radians).
add_selection buffer.add_selection(buffer, caret, anchor)\nSelects the change of text from *anchor* to *caret* as the main selection,\nretaining all other selections as additional selections.\nEven if no text is selected, the current position counts as an empty\nselection. Use `buffer:set_selection()` first when setting a list of\nselections.\n@param buffer The global buffer.\n@param caret The caret position of the range of text to select in *buffer*.\n@param anchor The anchor position of the range of text to select in *buffer*.
add_text buffer.add_text(buffer, text)\nAdds string *text* to the buffer at the caret and moves the caret to the end\nof the added text, but does not scroll it into view.\n@param buffer The global buffer.\n@param text The text to add.
add_trigger _M.textadept.adeptsense.add_trigger(sense, c, only_fields, only_functions)\nSets the trigger character(s) *c* for autocompletion.\nIf *only_fields* is `true`, the trigger only completes fields. If\n*only_functions* is `true`, the trigger only completes functions.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param c The character(s) that triggers the autocompletion. You can have up\n  to two characters.\n@param only_fields Optional flag indicating whether or not this trigger only\n  completes fields. The default value is `false`.\n@param only_functions Optional flag indicating whether or not this trigger\n  only completes functions. The default value is `false`.\n@usage sense:add_trigger('.')\n@usage sense:add_trigger(':', false, true) -- only functions\n@usage sense:add_trigger('->')
additional_caret_fore buffer.additional_caret_fore (number)\nThe foreground color, in "0xBBGGRR" format, of additional carets.
additional_carets_blink buffer.additional_carets_blink (bool)\nAllow additional carets to blink.\nThe default value is `true`.
additional_carets_visible buffer.additional_carets_visible (bool)\nDisplay additional carets.\nThe default value is `true`.
additional_sel_alpha buffer.additional_sel_alpha (number)\nThe alpha value, ranging from `0` (transparent) to `255` (opaque), of\nadditional selections.\nThe default value is `256`, for no alpha.
additional_sel_back buffer.additional_sel_back (number)\nThe background color, in "0xBBGGRR" format, of additional selections.\nThis field has no effect when calling `buffer:set_sel_back(false, ...)`.
additional_sel_fore buffer.additional_sel_fore (number)\nThe foreground color, in "0xBBGGRR" format, of additional selections.\nThis field has no effect when calling `buffer:set_sel_fore(false, ...)`.
additional_selection_typing buffer.additional_selection_typing (bool)\nType into multiple selections.\nThe default value is `false`.
adeptsense _M.textadept.adeptsense (module)\nCode autocompletion and documentation support for programming languages.
all_lines_visible buffer.all_lines_visible (bool, Read-only)\nWhether or not all lines in the buffer are visible.
allocate buffer.allocate(buffer, bytes)\nEnlarges the buffer to store *bytes* number of bytes, but never shrinks it\nbeyond the size of its contents.\n@param buffer The global buffer.\n@param bytes The number of bytes *buffer* can store.
allocate_extended_styles buffer.allocate_extended_styles(buffer, num_styles)\nAllocates an additional *num_styles* number of styles for use by margins or\nannotations and returns the starting style number of the new range.\nThese styles are outside the 0..255 range used by lexers.\n@param buffer The global buffer\n@param num_styles The number of additional styles to allocate.\n@return number\n@see annotation_style_offset\n@see margin_style_offset
alnum lexer.alnum (pattern)\nA pattern matching any alphanumeric character (`A-Z`, `a-z`, `0-9`).
alpha lexer.alpha (pattern)\nA pattern matching any alphabetic character (`A-Z`, `a-z`).
always_show_globals _M.textadept.adeptsense.always_show_globals (bool)\nInclude globals in the list of completions offered.\nGlobals are classes, functions, and fields that do not belong to another\nclass. They are contained in `sense.completions['']`.\nThe default value is `true`.
anchor buffer.anchor (number)\nThe position of the beginning of the selected text.
annotation_clear_all buffer.annotation_clear_all(buffer)\nClears annotations from all lines.\n@param buffer The global buffer.
annotation_lines buffer.annotation_lines (table, Read-only)\nTable of the number of annotation lines for line numbers starting from\nzero.
annotation_style buffer.annotation_style (table)\nTable of style numbers for annotations for line numbers starting from zero.\nOnly some style attributes are active in annotations: font,\nsize/size_fractional, bold/weight, italics, fore, back, and character_set.
annotation_style_offset buffer.annotation_style_offset (number)\nThe beginning of the range of style numbers used for annotations.\nAlways set this to the result of\n`buffer.allocate_extended_styles`.\nAnnotation styles may be completely separated from standard text styles by\nsetting a style offset. For example, when set to `512`, annotation styles\nare numbered from `512` upto `767` so they do not overlap styles set by\nlexers (or margins if margins offset is `256`). Each style number set with\n`annotation_style` has the offset added before looking up the style.\nThe default value is `0`.
annotation_text buffer.annotation_text (table)\nTable of annotation text for line numbers starting from zero.
annotation_visible buffer.annotation_visible (number)\nThe annotation visibility mode.\n\n* `_SCINTILLA.constants.ANNOTATION_HIDDEN` (0)\n  Annotations are invisible.\n* `_SCINTILLA.constants.ANNOTATION_STANDARD` (1)\n  Draw annotations left-justified with no decoration.\n* `_SCINTILLA.constants.ANNOTATION_BOXED` (2)\n  Indent annotations to match the text and outline with a box.\n\nThe default value is `0`.
any lexer.any (pattern)\nA pattern matching any single character.
any_char lexer.any_char (pattern)\nA `DEFAULT` token matching any single character, useful in a fallback rule\nfor a grammar.
api_files _M.textadept.adeptsense.api_files (table)\nA list of api files used by `show_apidoc()`.\nEach line in the api file contains a symbol name (not the full symbol)\nfollowed by a space character and then the symbol's documentation. Since\nthere may be many duplicate symbol names, it is recommended to put the full\nsymbol and arguments, if any, on the first line. (e.g. `Class.function(arg1,\narg2, ...)`). This allows the correct documentation to be shown based on the\ncurrent context. In the documentation, newlines are represented with "\n". A\n'\' before "\n" escapes the newline.
append_text buffer.append_text(buffer, text)\nAppends string *text* to the end of the buffer without changing the selected\ntext or scrolling the text into view.\n@param buffer The global buffer.\n@param text The text to append.
arg _G.arg (table)\nTable of command line parameters passed to Textadept.\n@see _G.args
args _G.args (module)\nProcesses command line arguments for Textadept.
arshift bit32.arshift(x, disp)\nReturns the number `x` shifted `disp` bits to the right. The number `disp`\nmay be any representable integer. Negative displacements shift to the left.\n\nThis shift operation is what is called arithmetic shift. Vacant bits on the\nleft are filled with copies of the higher bit of `x`; vacant bits on the\nright are filled with zeros. In particular, displacements with absolute\nvalues higher than 31 result in zero or `0xFFFFFFFF` (all original bits are\nshifted out).
ascii lexer.ascii (pattern)\nA pattern matching any ASCII character (`0`..`127`).
asin math.asin(x)\nReturns the arc sine of `x` (in radians).
assert _G.assert(v [, message])\nIssues an error when the value of its argument `v` is false (i.e.,\nnil or false); otherwise, returns all its arguments. `message` is an error\nmessage; when absent, it defaults to "assertion failed!"
atan math.atan(x)\nReturns the arc tangent of `x` (in radians).
atan2 math.atan2(y, x)\nReturns the arc tangent of `y/x` (in radians), but uses the signs\nof both parameters to find the quadrant of the result. (It also handles\ncorrectly the case of `x` being zero.)
attributes lfs.attributes(filepath [, aname])\nReturns a table with the file attributes corresponding to filepath (or nil\nfollowed by an error message in case of error). If the second optional\nargument is given, then only the value of the named attribute is returned\n(this use is equivalent to lfs.attributes(filepath).aname, but the table is\nnot created and only one attribute is retrieved from the O.S.). The\nattributes are described as follows; attribute mode is a string, all the\nothers are numbers, and the time related attributes use the same time\nreference of os.time:\n  dev: on Unix systems, this represents the device that the inode resides on.\n       On Windows systems, represents the drive number of the disk containing\n       the file\n  ino: on Unix systems, this represents the inode number. On Windows systems\n       this has no meaning\n  mode: string representing the associated protection mode (the values could\n        be file, directory, link, socket, named pipe, char device, block\n        device or other)\n  nlink: number of hard links to the file\n  uid: user-id of owner (Unix only, always 0 on Windows)\n  gid: group-id of owner (Unix only, always 0 on Windows)\n  rdev: on Unix systems, represents the device type, for special file inodes.\n        On Windows systems represents the same as dev\n  access: time of last access\n  modification: time of last data modification\n  change: time of last file status change\n  size: file size, in bytes\n  blocks: block allocated for file; (Unix only)\n  blksize: optimal file system I/O blocksize; (Unix only)\n\nThis function uses stat internally thus if the given filepath is a symbolic\nlink, it is followed (if it points to another link the chain is followed\nrecursively) and the information is about the file it refers to. To obtain\ninformation about the link itself, see function lfs.symlinkattributes.
auto_c_active buffer.auto_c_active(buffer)\nReturns whether or not an autocompletion list is visible.\n@param buffer The global buffer.\n@return bool
auto_c_auto_hide buffer.auto_c_auto_hide (bool)\nAutomatically hide the autocompletion list when no entries match typed\ntext.\nThe default value is `true`.
auto_c_cancel buffer.auto_c_cancel(buffer)\nCancels the autocompletion list.\n@param buffer The global buffer.
auto_c_cancel_at_start buffer.auto_c_cancel_at_start (bool)\nCancel autocompletion when backspacing to a position before where\nautocompletion started or before the word being completed.\nThe default value is `true`, to cancel when backspacing before where\nautocompletion started.
auto_c_case_insensitive_behaviour buffer.auto_c_case_insensitive_behaviour (number)\nThe behavior setting for case insensitive autocompletion when\n`buffer.auto_c_ignore_case` is `true`.\n\n* `_SCINTILLA.constants.SC_CASEINSENSITIVEBEHAVIOR_RESPECTCASE` (0)\n  Prefer to select case-sensitive matches.\n* `_SCINTILLA.constants.SC_CASEINSENSITIVEBEHAVIOR_IGNORECASE` (1)\n  No preference.\n\nThe default value is `0`.
auto_c_choose_single buffer.auto_c_choose_single (bool)\nAutomatically choose the item in a single-item autocompletion list.\nThe default value is `false`.
auto_c_complete buffer.auto_c_complete(buffer)\nAutocompletes the selected word in the list.\n@param buffer The global buffer.
auto_c_current buffer.auto_c_current (number, Read-only)\nThe index of the currently selected item in the autocompletion list.
auto_c_current_text buffer.auto_c_current_text (string, Read-only)\nThe text of the currently selected item in the autocompletion list.
auto_c_drop_rest_of_word buffer.auto_c_drop_rest_of_word (bool)\nDelete word characters after autocompleted text.\nThe default value is `false`.
auto_c_fill_ups buffer.auto_c_fill_ups (string, Write-only)\nA set of characters that choose the currently selected item in an\nautocompletion list when typed.\nThe default value is an empty string.
auto_c_ignore_case buffer.auto_c_ignore_case (bool)\nIgnore case when searching an autocompletion list for matches.\nThe default value is `false`.
auto_c_max_height buffer.auto_c_max_height (number)\nThe maximum number of items to show in autocompletion and user lists. The\ndefault value is `5`.
auto_c_max_width buffer.auto_c_max_width (number)\nThe maximum number of characters per row to show in autocompletion and user\nlists.\nThe default value is `0`, which automatically sizes the list to fit the\nlongest item.
auto_c_order buffer.auto_c_order (number)\nThe order setting for autocompletion lists.\n\n* `_SCINTILLA.constants.SC_ORDER_PRESORTED` (0)\n  Autocompletion lists passed to `buffer.auto_c_show` are\n  in sorted alphabetical order.\n* `_SCINTILLA.constants.SC_ORDER_PERFORMSORT` (1)\n  Scintilla should sort autocompletion lists passed to\n  `buffer.auto_c_show`.\n* `_SCINTILLA.constants.SC_ORDER_CUSTOM` (2)\n  Autocompletion lists passed to `buffer.auto_c_show` are\n  sorted in a custom order.\n\nThe default value is `0`.
auto_c_pos_start buffer.auto_c_pos_start(buffer)\nReturns the position where autocompletion started at.\n@param buffer The global buffer.\n@return number
auto_c_select buffer.auto_c_select(buffer, string)\nSelects the first item in the autocompletion list that starts with *string*,\nconsidering case sensitiveness depending on `buffer.auto_c_ignore_case`.\n@param buffer The global buffer.\n@param string The item in the list to select.
auto_c_separator buffer.auto_c_separator (number)\nThe character byte that separates autocompletion list items.\nThe default value is `32` (' ').
auto_c_show buffer.auto_c_show(buffer, len_entered, item_list)\nDisplays an autocompletion list from *item_list*, a sorted string whose items\nare delimited by `buffer.auto_c_separator` characters, using *len_entered*\nnumber of characters behind the caret as the prefix of the word to\nautocomplete.\nThe sorted order of *item_list*, `buffer.auto_c_order`, must be already\ndefined.\n@param buffer The global buffer.\n@param len_entered The number of characters before the caret used to provide\n  the context.\n@param item_list The sorted string of words to show, separated by\n  `buffer.auto_c_separator` characters (initially spaces).
auto_c_stops buffer.auto_c_stops(buffer, chars)\nDefines *chars* as the set of characters that cancel autocompletion when\ntyped.\nThe default set is an empty string.\n@param buffer The global buffer.\n@param chars The string of characters that cancel autocompletion. This string\n  is empty by default.
auto_c_type_separator buffer.auto_c_type_separator (number)\nThe character byte that separates autocompletion list items and their\nimage types.\nAutocompletion list items can display both an image and text. Register\nimages and their types using `buffer:register_image()`\nor `buffer:register_rgba_image()` before appending\nimage types to list items after type separator characters.\nThe default value is 63 ('?').
autocomplete_word _M.textadept.editing.autocomplete_word(default_words)\nDisplays an autocompletion list, built from the set of *default_words* and\nexisting words in the buffer, for the word behind the caret, returning `true`\nif completions were found.\n@param default_words Optional list of words considered to be in the buffer,\n  even if they are not. Words may contain registered images.\n@return `true` if there were completions to show; `false` otherwise.\n@see buffer.word_chars
automatic_fold buffer.automatic_fold (number)\nBit-mask of options for automatic folding behavior.\n\n* `_SCINTILLA.constants.SC_AUTOMATICFOLD_SHOW` (1)\n  Automatically show lines as needed.\n* `_SCINTILLA.constants.SC_AUTOMATICFOLD_CLICK` (2)\n  Handle clicks in the fold margin automatically.\n* `_SCINTILLA.constants.SC_AUTOMATICFOLD_CHANGE` (4)\n  Show lines as needed when the fold structure changes.\n\nThe default value is `0`.
back_space_un_indents buffer.back_space_un_indents (bool)\nUn-indent text when backspacing within indentation.\nThe default value is `false`.
back_tab buffer.back_tab(buffer)\nDedents the selected lines.\n@param buffer The global buffer.
band bit32.band(...)\nReturns the bitwise "and" of its operands.
begin_undo_action buffer.begin_undo_action(buffer)\nStarts a sequence of actions to undo or redo as a single action.\nMay be nested.\n@param buffer The global buffer.
bit32 _G.bit32 (module)\nLua bit32 module.
block_comment _M.textadept.editing.block_comment(comment)\nComments or uncomments the selected lines with line comment string *comment*\nor the comment from the `comment_string` table for the current lexer.\nAs long as any part of a line is selected, the entire line is eligible for\ncommenting/uncommenting.\n@param comment Optional comment string inserted or removed from each line in\n  the selection. Comment delimiters are separated by a '|'. The default value\n  is the comment in the `comment_string` table for the current lexer.\n@see comment_string
bnot bit32.bnot(x)\nReturns the bitwise negation of `x`. For any integer `x`, the following\nidentity holds:\n\n  assert(bit32.bnot(x) == (-1 - x) % 2^32)
boms io.boms (table)\nList of byte-order marks (BOMs) for identifying unicode file types.
bookmarks _M.textadept.bookmarks (module)\nBookmarks for Textadept.
bor bit32.bor(...)\nReturns the bitwise "or" of its operands.
brace_bad_light buffer.brace_bad_light(buffer, pos)\nHighlights the character at position *pos* as an unmatched brace character in\nthe `_SCINTILLA.constants.STYLE_BRACEBAD` style.\nRemoves highlighting when *pos* is `-1`.\n@param buffer The global buffer.\n@param pos The position in *buffer* to highlight, or `-1` to remove the\n  highlight.
brace_bad_light_indicator buffer.brace_bad_light_indicator(buffer, use_indicator, indic_num)\nHighlights unmatched brace characters with indicator number *indic_num*, in\nthe range of `0` to `31`, instead of the\n`_SCINTILLA.constants.STYLE_BRACEBAD` style if *use_indicator* is `true`.\n@param buffer The global buffer.\n@param use_indicator Whether or not to use an indicator.\n@param indic_num The indicator number to use.
brace_highlight buffer.brace_highlight(buffer, pos1, pos2)\nHighlights the characters at positions *pos1* and *pos2* as matching braces\nin the `_SCINTILLA.constants.STYLE_BRACELIGHT` style.\nIf indent guides are enabled, locate the column with `buffer.column` and\nset `buffer.highlight_guide` in order to highlight the indent guide.\n@param buffer The global buffer.\n@param pos1 The first position in *buffer* to highlight.\n@param pos2 The second position in *buffer* to highlight.
brace_highlight_indicator buffer.brace_highlight_indicator(buffer, use_indicator, indic_num)\nHighlights matching brace characters with indicator number *indic_num*, in\nthe range of `0` to `31`, instead of the\n`_SCINTILLA.constants.STYLE_BRACELIGHT` style if *use_indicator* is `true`.\n@param buffer The global buffer.\n@param use_indicator Whether or not to use an indicator.\n@param indic_num The indicator number to use.
brace_match buffer.brace_match(buffer, pos)\nReturns the position of the matching brace for the brace character at\nposition *pos*, taking nested braces into account, or `-1`.\nThe brace characters recognized are '(', ')', '[', ']', '{', '}', '<', and\n'>' and must have the same style.\n@param buffer The global buffer.\n@param pos The position of the brace in *buffer* to match.\n@return number
braces _M.textadept.editing.braces (table)\nTable of brace characters to highlight, with language-specific brace\ncharacter tables assigned to a lexer name key.\nThe ASCII values of brace characters are keys and are assigned non-`nil`\nvalues. The default brace characters are '(', ')', '[', ']', '{', and '}'.\n@see HIGHLIGHT_BRACES
btest bit32.btest(...)\nReturns a boolean signaling whether the bitwise "and" of its operands is\ndifferent from zero.
buffer _G.buffer (module)\nA Textadept buffer object.\nBe careful when storing references to a buffer object because if you attempt\ncall a buffer function with a non-global buffer, you will get an error. See\n`check_global()` for more information.
buffer _G.buffer (table)\nThe current buffer in the current view.
buffer view.buffer (table)\nThe buffer the view contains. (Read-only)
buffered_draw buffer.buffered_draw (bool)\nBuffer drawing to avoid flickering.\nBuffering draws each line of text into a bitmap buffer before drawing the\nbitmap to the screen.\nThe default value is `true`.
byte string.byte(s [, i [, j]])\nReturns the internal numerical codes of the characters `s[i]`, `s[i+1]`,\n..., `s[j]`. The default value for `i` is 1; the default value for `j`\nis `i`. These indices are corrected following the same rules of function\n`string.sub`.\n\nNumerical codes are not necessarily portable across platforms.
call_tip_active buffer.call_tip_active(buffer)\nReturns whether or not a call tip is visible.\n@param buffer The global buffer.\n@return bool
call_tip_back buffer.call_tip_back (number, Write-only)\nThe background color, in "0xBBGGRR" format, for a call tip.
call_tip_cancel buffer.call_tip_cancel(buffer)\nRemoves the call tip from view.\n@param buffer The global buffer.
call_tip_fore buffer.call_tip_fore (number, Write-only)\nThe foreground color, in "0xBBGGRR" format, for a call tip.
call_tip_fore_hlt buffer.call_tip_fore_hlt (number, Write-only)\nThe foreground color, in "0xBBGGRR" format, for the highlighted part of a\ncall tip.
call_tip_pos_start buffer.call_tip_pos_start(buffer)\nReturns the position where the call tip displayed at.\n@param buffer The global buffer.\n@return number
call_tip_position buffer.call_tip_position (boolean)\nDisplay the call tip above or below the text.\nThe default value is `false` to display the call tip below the text.
call_tip_set_hlt buffer.call_tip_set_hlt(buffer, start_pos, end_pos)\nHighlights call tip text from *start_pos*, starting from zero, to *end_pos*\nwith the color `buffer.call_tip_fore_hlt`.\n@param buffer The global buffer.\n@param start_pos The start position in the call tip text to highlight.\n@param end_pos The end position in the call tip text to highlight.
call_tip_show buffer.call_tip_show(buffer, pos, text)\nDisplays a call tip containing string *text* for the word behind position\n*pos*.\nAny "\001" or "\002" bytes in *text* are replaced by arrow visuals,\nindicating the word has more than one call tip.\n@param buffer The global buffer.\n@param pos The position in *buffer* to show the call tip at.\n@param text The call tip text to show.
call_tip_use_style buffer.call_tip_use_style (number)\nThe size in pixels of tab characters in call tips.\nWhen non-zero, also enables the use of `_SCINTILLA.constants.STYLE_CALLTIP`\ninstead of `_SCINTILLA.constants.STYLE_DEFAULT` for call tip styles.\nThe default value is `0`, which does not treat tab characters specially.
can_paste buffer.can_paste(buffer)\nReturns whether or not the clipboard has text to paste.\n@param buffer The global buffer.\n@return bool
can_redo buffer.can_redo(buffer)\nReturns whether or not there is an action to redo.\n@param buffer The global buffer.\n@return bool
can_undo buffer.can_undo(buffer)\nReturns whether or not there is an action to undo.\n@param buffer The global buffer.\n@return bool
cancel buffer.cancel(buffer)\nCancels the active call tip, autocompletion list, user list, selection mode,\netc.\n@param buffer The global buffer.
caret_fore buffer.caret_fore (number)\nThe foreground color, in "0xBBGGRR" format, of the caret.
caret_line_back buffer.caret_line_back (number)\nThe background color, in "0xBBGGRR" format, of the line containing the\ncaret.
caret_line_back_alpha buffer.caret_line_back_alpha (number)\nThe background alpha value, ranging from `0` (transparent) to `255`\n(opaque), of the caret line.\nThe default value is `256`, for no alpha.
caret_line_visible buffer.caret_line_visible (bool)\nColor the background of the line containing the caret a different color.\nThe default value is `false`.
caret_line_visible_always buffer.caret_line_visible_always (bool)\nAlways show the caret line, even when the window is not in focus.\nThe default value is `false`, showing the line only when the window is in\nfocus.
caret_period buffer.caret_period (number)\nThe time in milliseconds between caret blinks.\nA value of `0` stops blinking.\nThe default value is `500`.
caret_sticky buffer.caret_sticky (number)\nThe preferred horizontal position of the caret when moving between lines.\n\n* `_SCINTILLA.constants.SC_CARETSTICKY_OFF` (0)\n  Use the same position as on the previous line.\n* `_SCINTILLA.constants.SC_CARETSTICKY_ON` (1)\n  Use the last position the caret was moved to via the mouse, left/right\n  arrow keys, home/end keys, etc. Typing text does not affect the position.\n* `_SCINTILLA.constants.SC_CARETSTICKY_WHITESPACE` (2)\n  Use the same position as on the previous line, but prior to any inserted\n  indentation.\n\nThe default value is `0`.
caret_style buffer.caret_style (number)\nThe style of caret to draw.\n\n* `_SCINTILLA.constants.CARETSTYLE_INVISIBLE` (0)\n  No caret.\n* `_SCINTILLA.constants.CARETSTYLE_LINE` (1)\n  A line caret.\n* `_SCINTILLA.constants.CARETSTYLE_BLOCK` (2)\n  A block caret.\n\nThe default value is `1`.
caret_width buffer.caret_width (number)\nThe pixel width of the caret in insert mode, either `0`, `1`, `2`, or `3`,\nand only applicable to line carets.\nThe default value is `1`.
ceil math.ceil(x)\nReturns the smallest integer larger than or equal to `x`.
change_lexer_state buffer.change_lexer_state(buffer, start_pos, end_pos)\nTells the lexer to re-process the range of text from *start_pos* to\n*end_pos*.\n@param buffer The global buffer.\n@param start_pos The start position of the range of text in *buffer* to\n  re-process.\n@param end_pos The end position of the range of text in *buffer* to\n  re-process.
char string.char(Â·Â·Â·)\nReceives zero or more integers. Returns a string with length equal to\nthe number of arguments, in which each character has the internal numerical\ncode equal to its corresponding argument.\n\nNumerical codes are not necessarily portable across platforms.
char_at buffer.char_at (table, Read-only)\nTable of character bytes at positions in the buffer starting from zero.
char_left buffer.char_left(buffer)\nMoves the caret left one character.\n@param buffer The global buffer.
char_left_extend buffer.char_left_extend(buffer)\nMoves the caret left one character, extending the selected text to the new\nposition.\n@param buffer The global buffer.
char_left_rect_extend buffer.char_left_rect_extend(buffer)\nMoves the caret left one character, extending the rectangular selection to\nthe new position.\n@param buffer The global buffer.
char_matches _M.textadept.editing.char_matches (table)\nMap of auto-paired characters like parentheses, brackets, braces, and quotes,\nwith language-specific auto-paired character maps assigned to a lexer name\nkey.\nThe ASCII values of opening characters are assigned to strings containing\ncomplement characters. The default auto-paired characters are "()", "[]",\n"{}", "''", and """".\n@see AUTOPAIR
char_position_from_point buffer.char_position_from_point(buffer, x, y)\nReturns the character position closest to view coordinates *x* and *y*.\n@param buffer The global buffer.\n@param x The x-coordinate in the view to use.\n@param y The y-coordinate in the view to use.\n@return number
char_position_from_point_close buffer.char_position_from_point_close(buffer, x, y)\nReturns the character position closest to view coordinates *x* and *y*, or\n`-1` if the point is outside the window or not close to any text.\n@param buffer The global buffer.\n@param x The x-coordinate in the view to use.\n@param y The y-coordinate in the view to use.\n@return number
char_right buffer.char_right(buffer)\nMoves the caret right one character.\n@param buffer The global buffer.
char_right_extend buffer.char_right_extend(buffer)\nMoves the caret right one character, extending the selected text to the new\nposition.\n@param buffer The global buffer.
char_right_rect_extend buffer.char_right_rect_extend(buffer)\nMoves the caret right one character, extending the rectangular selection to\nthe new position.\n@param buffer The global buffer.
chdir lfs.chdir(path)\nChanges the current working directory to the given path.\n\nReturns true in case of success or nil plus an error string.
check_global buffer.check_global(buffer)\nEnsures the buffer is the global one, `_G.buffer`, throwing an error\notherwise.\nThis function must be called in all buffer functions because only the global\nbuffer can be worked with.\n@param buffer The buffer to check.\n@see _G._G.buffer
choose_caret_x buffer.choose_caret_x(buffer)\nSets the preferred horizontal position of the caret when moving between\nlines to the current position.\n@param buffer The global buffer.\n@see caret_sticky
class_definition _M.textadept.adeptsense.syntax.class_definition (table)\nA Lua pattern representing the language's class\n  definition syntax. The first capture returned must be the class name. A\n  second, optional capture contains the class's superclass (if any). If no\n  completions are found for the class name, completions for the superclass\n  are shown (if any). Completions will not be shown for both a class and\n  superclass unless defined in a previously loaded Ctags file. Also, multiple\n  superclasses cannot be recognized by this pattern; use a Ctags file\n  instead. The default value is `'class%s+([%w_]+)'`.
clear _M.textadept.adeptsense.clear(sense)\nClears the Adeptsense for loading new Ctags or project files.\n@param sense The Adeptsense returned by `adeptsense.new()`.
clear _M.textadept.bookmarks.clear()\nClears all bookmarks in the current buffer.
clear buffer.clear(buffer)\nDeletes the selected text or the character at the caret.\n@param buffer The global buffer.
clear_all buffer.clear_all(buffer)\nDeletes all of the text in the buffer unless the buffer is read-only.\n@param buffer The global buffer.
clear_all_cmd_keys buffer.clear_all_cmd_keys(buffer)\nClears Scintilla's internal key bindings.\n@param buffer The global buffer.
clear_document_style buffer.clear_document_style(buffer)\nClears all styling and folding information in the buffer.\n@param buffer The global buffer.
clear_registered_images buffer.clear_registered_images(buffer)\nClears all images registered using `buffer:register_image()` and\n`buffer:register_rgba_image()`.\n@param buffer The global buffer.
clear_selections buffer.clear_selections(buffer)\nRemoves all selections and moves the caret to the beginning of the buffer.\n@param buffer The global buffer.
clipboard_text gui.clipboard_text (string, Read-only)\nThe text on the clipboard.
clock os.clock()\nReturns an approximation of the amount in seconds of CPU time used by\nthe program.
close buffer.close(buffer)\nCloses the buffer, prompting the user to continue if there are unsaved\nchanges, and returns `true` if the buffer was closed.\n@param buffer The global buffer.\n@return `true` if the buffer was closed; `nil` otherwise.
close file:close()\nCloses `file`. Note that files are automatically closed when their\nhandles are garbage collected, but that takes an unpredictable amount of\ntime to happen.\n\nWhen closing a file handle created with `io.popen`, `file:close` returns the\nsame values returned by `os.execute`.
close io.close([file])\nEquivalent to `file:close()`. Without a `file`, closes the default\noutput file.
close_all io.close_all()\nCloses all open buffers, prompting the user to continue with unsaved buffers,\nand returning `true` if the user did not cancel.\nNo buffers are saved automatically. They must be saved manually.\n@return `true` if user did not cancel.\n@see buffer.close
cntrl lexer.cntrl (pattern)\nA pattern matching any control character (`0`..`31`).
code_page buffer.code_page (number)\nThe code page used to interpret buffer bytes as characters.\n\n+ `0` None.\n+ `932` Japanese Shift-JIS.\n+ `936` Simplified Chinese GBK.\n+ `949` Korean Unified Hangul Code.\n+ `950` Traditional Chinese Big5.\n+ `1361` Korean Johab.\n+ `_SCINTILLA.constants.SC_CP_UTF8` (65001) UTF-8.\n\nThe default value is `0`.
collectgarbage _G.collectgarbage([opt [, arg]])\nThis function is a generic interface to the garbage collector. It\nperforms different functions according to its first argument, `opt`:\n  "collect": performs a full garbage-collection cycle. This is the default\n             option.\n  "stop": stops automatic execution of the garbage collector.\n  "restart": restarts automatic execution of the garbage collector.\n  "count": returns the total memory in use by Lua (in Kbytes) and a second\n           value with the total memory in bytes modulo 1024. The first value\n           has a fractional part, so the following equality is always true:\n\n             k, b = collectgarbage("count")\n             assert(k*1024 == math.floor(k)*1024 + b)\n\n           (The second result is useful when Lua is compiled with a non\n           floating-point type for numbers.)\n  "step": performs a garbage-collection step. The step "size" is controlled\n          by `arg` (larger values mean more steps) in a non-specified way. If\n          you want to control the step size you must experimentally tune the\n          value of `arg`. Returns true if the step finished a collection\n          cycle.\n  "setpause": sets `arg` as the new value for the *pause* of the collector\n              (see Â§2.5). Returns the previous value for *pause*.\n  "setstepmul": sets `arg` as the new value for the *step multiplier*\n                of the collector (see Â§2.5). Returns the previous value for\n                *step*.\n  "isrunning": returns a boolean that tells whether the collector is running\n               (i.e., not stopped).\n  "generational": changes the collector to generational mode. This is an\n                  experimental feature (see Â§2.5).\n  "incremental": changes the collector to incremental mode. This is the\n                 default mode.
colourise buffer.colourise(buffer, start_pos, end_pos)\nTells the lexer to style and fold the range of text from *start_pos* to\n*end_pos*.\nIf *end_pos* is `-1`, styles and folds to the end of the buffer.\n@param buffer The global buffer.\n@param start_pos The start position of the range of text in *buffer* to\n  process.\n@param end_pos The end position of the range of text in *buffer* to process,\n  or `-1` to process from *start_pos* to the end of *buffer*.
column buffer.column (table, Read-only)\nTable of column numbers, taking tab widths into account, for positions in\nthe buffer starting from zero.
command_entry gui.command_entry (module)\nTextadept's Command Entry.
comment_string _M.textadept.editing.comment_string (table)\nMap of lexer names to line comment strings for programming languages, used by\nthe `block_comment()` function.\nKeys are lexer names and values are either the language's line comment\nprefixes or block comment delimiters separated by a '|'.\n@see block_comment
compile _M.textadept.run.compile()\nCompiles the file based on its extension using the command from the\n`compile_command` table.\nEmits a `COMPILE_OUTPUT` event.\n@see compile_command\n@see _G.events
compile_command _M.textadept.run.compile_command (table)\nMap of file extensions (excluding the leading '.') to their associated\n"compile" shell command line strings or functions returning such strings.\nCommand line strings may have the following macros:\n\n  + `%(filepath)`: The full path of the current file.\n  + `%(filedir)`: The current file's directory path.\n  + `%(filename)`: The name of the file, including its extension.\n  + `%(filename_noext)`: The name of the file, excluding its extension.\n\nThis table is typically populated by language-specific modules.
complete _M.textadept.adeptsense.complete(sense, only_fields, only_functions)\nShows an autocompletion list of functions (unless *only_fields* is `true`)\nand fields (unless *only_funcs* is `true`) for the symbol behind the caret,\nreturning `true` on success.\n@param sense The Adeptsense returned by `adeptsense.new()`. If `nil`, uses\n  the current language's Adeptsense (if it exists).\n@param only_fields Optional flag indicating whether or not to return a list\n  of only fields. The default value is `false`.\n@param only_functions Optional flag indicating whether or not to return a\n  list of only functions. The default value is `false`.\n@return `true` on success or `false`.\n@see get_symbol\n@see get_completions
complete_lua gui.command_entry.complete_lua(code)\nShows a set of Lua code completions for string *code* or `entry_text`.\nCompletions are subject to an "abbreviated" environment where the `buffer`,\n`view`, and `gui` tables are also considered as globals.\n@param code The Lua code to complete. The default value is the value of\n  `entry_text`.
completions _M.textadept.adeptsense.completions (table)\nA list containing lists of possible completions for known symbols.\nEach symbol key has a table value that contains a list of field completions\nwith a `fields` key and a list of functions completions with a `functions`\nkey. This table is normally populated by `load_ctags()`, but can also be set\nby the user.
concat table.concat(list [, sep [, i [, j]]])\nGiven a list where all elements are strings or numbers, returns the string\n`list[i]..sep..list[i+1] Â·Â·Â· sep..list[j]`. The default value for `sep` is\nthe empty string, the default for `i` is 1, and the default for `j` is\n`#list`. If `i` is greater than `j`, returns the empty string.
config package.config (string)\nA string describing some compile-time configurations for packages. This\nstring is a sequence of lines:\n  The first line is the directory separator string. Default is '`\`' for\n  Windows and '`/`' for all other systems.\n  The second line is the character that separates templates in a path.\n  Default is '`;`'.\n  The third line is the string that marks the substitution points in a\n  template. Default is '`?`'.\n  The fourth line is a string that, in a path in Windows, is replaced by\n  the executable's directory. Default is '`!`'.\n  The fifth line is a mark to ignore all text before it when building the\n  `luaopen_` function name. Default is '`-`'.
connect events.connect(event, f, index)\nAdds function *f* to the set of event handlers for *event* at position\n*index*, returning a handler ID for *f*. *event* is an arbitrary event name\nthat does not need to have been previously defined.\n@param event The string event name.\n@param f The Lua function to connect to *event*.\n@param index Optional index to insert the handler into.\n@usage events.connect('my_event', function(msg) gui.print(msg) end)\n@return handler ID.\n@see disconnect
constants _SCINTILLA.constants (table)\nMap of Scintilla constant names to their numeric values.
context_menu gui.context_menu\nThe editor's context menu, a `gui.menu()`.\n  This is a low-level field. You probably want to use the higher-level\n  `_M.textadept.menu.set_contextmenu()`.
contracted_fold_next buffer.contracted_fold_next(buffer, line_start)\nReturns the line number of the next contracted fold header line starting at\n*line_start*, or `-1`.\n@param buffer The global buffer.\n@param line_start The line number in *buffer* to start at.\n@return number
control_char_symbol buffer.control_char_symbol (number)\nThe byte value of the character displayed in place of control characters,\ncharacters whose byte values are less than 32. Values less than 32 dispay\nASCII mnemonics instead.\nThe default value is `0`.
control_structure_patterns _M.lua.control_structure_patterns (table)\nList of patterns for auto-`end` completion for control structures.\n@see try_to_autocomplete_end
control_structure_patterns _M.ruby.control_structure_patterns (table)\nPatterns for auto `end` completion for control structures.\n@see try_to_autocomplete_end
convert_eo_ls buffer.convert_eo_ls(buffer, mode)\nConverts all line endings to end of line mode *mode*.\n@param buffer The global buffer.\n@param mode The line ending mode to convert to. Valid values are:\n  * `_SCINTILLA.constants.SC_EOL_CRLF` (0)\n  * `_SCINTILLA.constants.SC_EOL_CR` (1)\n  * `_SCINTILLA.constants.SC_EOL_LF` (2)
convert_indentation _M.textadept.editing.convert_indentation()\nConverts indentation between tabs and spaces depending on the buffer's\nindentation settings.\nIf `buffer.use_tabs` is `true`, `buffer.tab_width` indenting spaces are\nconverted to tabs. Otherwise, all indenting tabs are converted to\n`buffer.tab_width` spaces.\n@see buffer.use_tabs
copy buffer.copy(buffer)\nCopies the selected text to the clipboard.\nMultiple selections are copied in order with no delimiters. Rectangular\nselections are copied from top to bottom with line ending delimiters. Virtual\nspace is not copied.\n@param buffer The global buffer.
copy_allow_line buffer.copy_allow_line(buffer)\nCopies the selected text or the current line to the clipboard.\n@param buffer The global buffer.
copy_range buffer.copy_range(buffer, start_pos, end_pos)\nCopies the range of text from *start_pos* to *end_pos* to the clipboard.\n@param buffer The global buffer.\n@param start_pos The start position of the range of text in *buffer* to copy.\n@param end_pos The end position of the range of text in *buffer* to copy.
copy_text buffer.copy_text(buffer, text)\nCopies string *text* to the clipboard.\n@param buffer The global buffer.\n@param text The text to copy.
coroutine _G.coroutine (module)\nLua coroutine module.
cos math.cos(x)\nReturns the cosine of `x` (assumed to be in radians).
cosh math.cosh(x)\nReturns the hyperbolic cosine of `x`.
count_characters buffer.count_characters(buffer, start_pos, end_pos)\nReturns the number of whole characters in-between positions *start_pos* and\n*end_pos*.\n@param buffer The global buffer.\n@param start_pos The start position of the range of text in *buffer* to start\n  counting at.\n@param end_pos The end position of the range of text in *buffer* to stop\n  counting at.\n@return number
cpath package.cpath (string)\nThe path used by `require` to search for a C loader.\nLua initializes the C path `package.cpath` in the same way it initializes\nthe Lua path `package.path`, using the environment variable `LUA_CPATH_5_2`\nor the environment variable `LUA_CPATH` or a default path defined in\n`luaconf.h`.
cpp _G.keys.cpp (table)\nTable of C/C++-specific key bindings.
cpp _G.snippets.cpp (table)\nTable of C/C++-specific snippets.
cpp _M.cpp (module)\nThe cpp module.\nIt provides utilities for editing C/C++ code.
create coroutine.create(f)\nCreates a new coroutine, with body `f`. `f` must be a Lua\nfunction. Returns this new coroutine, an object with type `"thread"`.
css _G.keys.css (table)\nContainer for CSS-specific key bindings.
css _G.snippets.css (table)\nContainer for CSS-specific snippets.
css _M.css (module)\nThe css module.\nIt provides utilities for editing CSS code.
ctags_kinds _M.textadept.adeptsense.ctags_kinds (table)\nA map of Ctags kinds to Adeptsense kinds.\nRecognized kinds are `FUNCTION`, `FIELD`, and `CLASS`. Classes are quite\nsimply containers for functions and fields so Lua modules would count as\nclasses. Any other kinds will be passed to `handle_ctag()` for user-defined\nhandling.\n@see handle_ctag
current_pos buffer.current_pos (number)\nThe position of the caret.\nWhen set, does not scroll the caret into view.
currentdir lfs.currentdir()\nReturns a string with the current working directory or nil plus an error\nstring.
cursor buffer.cursor (number)\nThe cursor type.\n\n* `_SCINTILLA.constants.SC_CURSORNORMAL` (-1)\n  The normal cursor.\n* `_SCINTILLA.constants.SC_CURSORWAIT` (4)\n  The wait cursor.\n\nThe default value is `-1`.
cut buffer.cut(buffer)\nCuts the selected text to the clipboard.\nMultiple selections are copied in order with no delimiters. Rectangular\nselections are copied from top to bottom with line ending delimiters. Virtual\nspace is not copied.\n@param buffer The global buffer.
cwd _M.textadept.run.cwd (string, Read-only)\nThe working directory for the most recently executed compile or run\ncommand.\nIt is used for going to error messages with relative file paths.
date os.date([format [, time]])\nReturns a string or a table containing date and time, formatted according\nto the given string `format`.\n\nIf the `time` argument is present, this is the time to be formatted\n(see the `os.time` function for a description of this value). Otherwise,\n`date` formats the current time.\n\nIf `format` starts with '`!`', then the date is formatted in Coordinated\nUniversal Time. After this optional character, if `format` is the string\n"`*t`", then `date` returns a table with the following fields: `year` (four\ndigits), `month` (1-12), `day` (1-31), `hour` (0-23), `min` (0-59), `sec`\n(0-61), `wday` (weekday, Sunday is 1), `yday` (day of the year), and `isdst`\n(daylight saving flag, a boolean). This last field may be absent if the\ninformation is not available.\n\nIf `format` is not "`*t`", then `date` returns the date as a string,\nformatted according to the same rules as the ANSI C function `strftime`.\n\nWhen called without arguments, `date` returns a reasonable date and time\nrepresentation that depends on the host system and on the current locale\n(that is, `os.date()` is equivalent to `os.date("%c")`).\n\nOn non-Posix systems, this function may be not thread safe because of its\nreliance on C function `gmtime` and C function `localtime`.
debug _G.debug (module)\nLua debug module.
debug debug.debug()\nEnters an interactive mode with the user, running each string that\nthe user enters. Using simple commands and other debug facilities,\nthe user can inspect global and local variables, change their values,\nevaluate expressions, and so on. A line containing only the word `cont`\nfinishes this function, so that the caller continues its execution.\n\nNote that commands for `debug.debug` are not lexically nested within any\nfunction and so have no direct access to local variables.
dec_num lexer.dec_num (pattern)\nA pattern matching a decimal number.
deg math.deg(x)\nReturns the angle `x` (given in radians) in degrees.
del_line_left buffer.del_line_left(buffer)\nDeletes text from the caret to the beginning of the line.\n@param buffer The global buffer.
del_line_right buffer.del_line_right(buffer)\nDeletes text from the caret to the end of the line.\n@param buffer The global buffer.
del_word_left buffer.del_word_left(buffer)\nDeletes the word to the left of the caret, including any leading non-word\ncharacters.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
del_word_right buffer.del_word_right(buffer)\nDeletes the word to the right of the caret, including any trailing non-word\ncharacters.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
del_word_right_end buffer.del_word_right_end(buffer)\nDeletes the word to the right of the caret, excluding any trailing non-word\ncharacters.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
delete buffer.delete(buffer)\nDeletes the buffer.\n**Do not call this function.** Call `buffer:close()` instead. Emits a\n`BUFFER_DELETED` event.\n@param buffer The global buffer.\n@see events.BUFFER_DELETED
delete_back buffer.delete_back(buffer)\nDeletes the selected text or the character behind the caret.\n@param buffer The global buffer.
delete_back_not_line buffer.delete_back_not_line(buffer)\nDeletes the selected text or the character behind the caret unless the caret\nis at the beginning of a line.\n@param buffer The global buffer.
delete_range buffer.delete_range(buffer, pos, length)\nDeletes the range of text from *pos* to *pos* + *length* in the buffer.\n@param buffer The global buffer.\n@param pos The start position of the range of text in *buffer* to delete.\n@param length The number of characters in the range of text to delete.
delimited_range lexer.delimited_range(chars, escape, end_optional, balanced, forbidden)\nCreates and returns a pattern that matches a range of text bounded by\n*chars* characters.\nThis is a convenience function for matching more complicated delimited ranges\nlike strings with escape characters and balanced parentheses. *escape*\nspecifies the escape characters a range can have, *end_optional* indicates\nwhether or not unterminated ranges match, *balanced* indicates whether or not\nto handle balanced ranges like parentheses and requires *chars* to be\ncomposed of two characters, and *forbidden* is a set of characters disallowed\nin ranges such as newlines.\n@param chars The character(s) that bound the matched range.\n@param escape Optional escape character. This parameter may `nil` or the\n  empty string to indicate no escape character.\n@param end_optional Optional flag indicating whether or not an ending\n  delimiter is optional or not. If `true`, the range begun by the start\n  delimiter matches until an end delimiter or the end of the input is\n  reached.\n@param balanced Optional flag indicating whether or not a balanced range is\n  matched, like the "%b" Lua pattern. This flag only applies if *chars*\n  consists of two different characters (e.g. "()").\n@param forbidden Optional string of characters forbidden in a delimited\n  range. Each character is part of the set. This is particularly useful for\n  disallowing newlines in delimited ranges.\n@usage local dq_str_noescapes = l.delimited_range('"', nil, true)\n@usage local dq_str_escapes = l.delimited_range('"', '\\', true)\n@usage local unbalanced_parens = l.delimited_range('()', '\\')\n@usage local balanced_parens = l.delimited_range('()', '\\', false, true)\n@return pattern\n@see nested_pair
dialog gui.dialog(kind, ...)\nDisplays a *kind* gtdialog with the given string arguments to pass to\nthe dialog and returns a formatted string of the dialog's output.\nTable arguments containing strings are allowed and expanded in place. This is\nuseful for filtered list dialogs with many items.\nFor more information on gtdialog, see http://foicica.com/gtdialog.\n@param kind The kind of gtdialog.\n@param ... Parameters to the gtdialog.\n@return string gtdialog result.
difftime os.difftime(t2, t1)\nReturns the number of seconds from time `t1` to time `t2`. In POSIX,\nWindows, and some other systems, this value is exactly `t2`*-*`t1`.
digit lexer.digit (pattern)\nA pattern matching any digit (`0-9`).
dir lfs.dir(path)\nLua iterator over the entries of a given directory. Each time the iterator is\ncalled with dir_obj it returns a directory entry's name as a string, or nil\nif there are no more entries. You can also iterate by calling dir_obj:next(),\nand explicitly close the directory before the iteration finished with\ndir_obj:close(). Raises an error if path is not a directory.
dir_foreach lfs.dir_foreach(utf8_dir, f, filter, exclude_FILTER, recursing)\nIterates over all files and sub-directories in the UTF-8-encoded directory\n*utf8_dir*, calling function *f* on each file found.\nFiles *f* is called on do not match any pattern in string or table *filter*,\nand, unless *exclude_FILTER* is `true`, `FILTER` as well. A filter table\ncontains Lua patterns that match filenames to exclude, with patterns matching\nfolders to exclude listed in a `folders` sub-table. Patterns starting with\n'!' exclude files and folders that do not match the pattern that follows. Use\na table of raw file extensions assigned to an `extensions` key for fast\nfiltering by extension. All strings must be encoded in `_G._CHARSET`, not\nUTF-8.\n@param utf8_dir A UTF-8-encoded directory path to iterate over.\n@param f Function to call with each full file path found. File paths are\n  **not** encoded in UTF-8, but in `_G._CHARSET`. If *f* returns `false`\n  explicitly, iteration ceases.\n@param filter Optional filter for files and folders to exclude.\n@param exclude_FILTER Optional flag indicating whether or not to exclude the\n  default filter `FILTER` in the search. If `false`, adds `FILTER` to\n  *filter*.\n  The default value is `false` to include the default filter.\n@param recursing Utility flag indicating whether or not this function has\n  been recursively called. This flag is used and set internally, and should\n  not be set otherwise.\n@see FILTER
dirty buffer.dirty (bool)\nWhether or not the buffer has unsaved changes.\nUnlike `buffer.modify`, this field is accessible from any\nbuffer, not just the global one.
disconnect events.disconnect(event, id)\nRemoves handler ID *id*, returned by `events.connect()`, from the set of\nevent handlers for *event*.\n@param event The string event name.\n@param id ID of the handler returned by `events.connect()`.\n@see connect
doc_line_from_visible buffer.doc_line_from_visible(buffer, display_line)\nReturns the actual line number of displayed line number *display_line*,\ntaking hidden lines into account.\nIf *display_line* is less than or equal to zero, returns `0`. If\n*display_line* is greater than or equal to the number of displayed lines,\nreturns `buffer.line_count`.\n@param buffer The global buffer.\n@param display_line The display line number to use.\n@return number
docstatusbar_text gui.docstatusbar_text (string, Write-only)\nThe text displayed by the buffer statusbar.
document_end buffer.document_end(buffer)\nMoves the caret to the end of the buffer.\n@param buffer The global buffer.
document_end_extend buffer.document_end_extend(buffer)\nMoves the caret to the end of the buffer, extending the selected text to the\nnew position.\n@param buffer The global buffer.
document_start buffer.document_start(buffer)\nMoves the caret to the beginning of the buffer.\n@param buffer The global buffer.
document_start_extend buffer.document_start_extend(buffer)\nMoves the caret to the beginning of the buffer, extending the selected text\nto the new position.\n@param buffer The global buffer.
dofile _G.dofile([filename])\nOpens the named file and executes its contents as a Lua chunk. When\ncalled without arguments,\n`dofile` executes the contents of the standard input (`stdin`). Returns\nall values returned by the chunk. In case of errors, `dofile` propagates\nthe error to its caller (that is, `dofile` does not run in protected mode).
dump string.dump(function)\nReturns a string containing a binary representation of the given\nfunction, so that a later `load` on this string returns a copy of the\nfunction (but with new upvalues).
edge_colour buffer.edge_colour (number)\nThe color, in "0xBBGGRR" format, used for the long line marker.
edge_column buffer.edge_column (number)\nThe column number to display the long line marker at.
edge_mode buffer.edge_mode (number)\nThe long line edge mode.\n\n* `_SCINTILLA.constants.EDGE_NONE` (0)\n  Long lines are not marked.\n* `_SCINTILLA.constants.EDGE_LINE` (1)\n  Draw a vertical line whose color is `buffer.edge_colour`\n  at column `buffer.edge_column`.\n* `_SCINTILLA.constants.EDGE_BACKGROUND` (2)\n  Change the background color of characters after column\n  `buffer.edge_column` to\n  `buffer.edge_colour`.
edit_toggle_overtype buffer.edit_toggle_overtype(buffer)\nToggles `buffer.overtype`.\n@param buffer The global buffer.
editing _M.textadept.editing (module)\nEditing features for Textadept.
embed_lexer lexer.embed_lexer(parent, child, start_rule, end_rule)\nEmbeds *child* lexer in *parent* with *start_rule* and *end_rule*, patterns\nthat signal the beginning and end of the embedded lexer, respectively.\n@param parent The parent lexer.\n@param child The child lexer.\n@param start_rule The pattern that signals the beginning of the embedded\n  lexer.\n@param end_rule The pattern that signals the end of the embedded lexer.\n@usage l.embed_lexer(M, css, css_start_rule, css_end_rule)\n@usage l.embed_lexer(html, M, php_start_rule, php_end_rule)\n@usage l.embed_lexer(html, ruby, ruby_start_rule, ruby_end_rule)
emit events.emit(event, ...)\nSequentially calls all handler functions for *event* with the given\narguments.\n*event* is an arbitrary event name that does not need to have been previously\ndefined. If any handler explicitly returns `true` or `false`, the event is\nnot propagated any further, iteration ceases, and `emit()` returns that\nvalue. This is useful for stopping the propagation of an event like a\nkeypress after it has been handled.\n@param event The string event name.\n@param ... Arguments passed to the handler.\n@usage events.emit('my_event', 'my message')\n@return `true` or `false` if any handler explicitly returned such; `nil`\n  otherwise.
empty_undo_buffer buffer.empty_undo_buffer(buffer)\nDeletes the undo and redo history and sets `buffer.modify` to `false`.\n@param buffer The global buffer.
enclose _M.textadept.editing.enclose(left, right)\nEncloses the selected text or the word behind the caret within strings *left*\nand *right*.\n@param left The left part of the enclosure.\n@param right The right part of the enclosure.
encoded_from_utf8 buffer.encoded_from_utf8(buffer, string)\nReturns the result of UTF-8-encoded string *string* converted into the\nbuffer's encoding.\n@param buffer The global buffer.\n@param string The UTF-8-encoded string to convert.\n@return number
encoding buffer.encoding (string or nil)\nThe string encoding of the file on the hard drive or `nil` for binary\nfiles.
encoding_bom buffer.encoding_bom (string)\nThe byte-order mark, if any, of the file encoding.
encodings io.encodings (table)\nList of encodings to try to decode files as.\nYou should add to this list if you get a "Conversion failed" error when\ntrying to open a file whose encoding is not recognized. Valid encodings are\nGNU iconv's encodings and include:\n\n  * European: ASCII, ISO-8859-{1,2,3,4,5,7,9,10,13,14,15,16}, KOI8-R, KOI8-U,\n    KOI8-RU, CP{1250,1251,1252,1253,1254,1257}, CP{850,866,1131},\n    Mac{Roman,CentralEurope,Iceland,Croatian,Romania},\n    Mac{Cyrillic,Ukraine,Greek,Turkish}, Macintosh.\n  * Semitic: ISO-8859-{6,8}, CP{1255,1256}, CP862, Mac{Hebrew,Arabic}.\n  * Japanese: EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP, ISO-2022-JP-2,\n    ISO-2022-JP-1.\n  * Chinese: EUC-CN, HZ, GBK, CP936, GB18030, EUC-TW, BIG5, CP950,\n    BIG5-HKSCS, BIG5-HKSCS:2004, BIG5-HKSCS:2001, BIG5-HKSCS:1999,\n    ISO-2022-CN, ISO-2022-CN-EXT.\n  * Korean: EUC-KR, CP949, ISO-2022-KR, JOHAB.\n  * Armenian: ARMSCII-8.\n  * Georgian: Georgian-Academy, Georgian-PS.\n  * Tajik: KOI8-T.\n  * Kazakh: PT154, RK1048.\n  * Thai: ISO-8859-11, TIS-620, CP874, MacThai.\n  * Laotian: MuleLao-1, CP1133.\n  * Vietnamese: VISCII, TCVN, CP1258.\n  * Unicode: UTF-8, UCS-2, UCS-2BE, UCS-2LE, UCS-4, UCS-4BE, UCS-4LE, UTF-16,\n    UTF-16BE, UTF-16LE, UTF-32, UTF-32BE, UTF-32LE, UTF-7, C99, JAVA.
end_at_last_line buffer.end_at_last_line (bool)\nDisable scrolling past the last line.\nThe default value is `true`.
end_styled buffer.end_styled (number, Read-only)\nThe position of the last correctly styled character.
end_undo_action buffer.end_undo_action(buffer)\nEnds a sequence of actions to undo or redo as a single action.\n@param buffer The global buffer.
ensure_visible buffer.ensure_visible(buffer, line)\nEnsures line number *line* is visible by expanding any fold header lines\nhiding it.\n@param buffer The global buffer.\n@param line The line number in *buffer* to ensure visible.
ensure_visible_enforce_policy buffer.ensure_visible_enforce_policy(buffer, line)\nEnsures line number *line* is visible by expanding any fold header lines\nhiding it and applies the vertical caret policy set with\n`buffer:set_visible_policy()`.\n@param buffer The global buffer.\n@param line The line number in *buffer* to ensure visible.
enter_mode gui.command_entry.enter_mode(mode)\nOpens the command entry in key mode *mode*.\nKey bindings will be looked up in `keys[mode]` instead of `keys`. The `Esc`\n(`âŽ‹` on Mac OSX | `Esc` in curses) key exits the current mode, closes the\ncommand entry, and restores normal key lookup.\nThis function is useful for binding keys to enter a command entry mode.\n@param mode The key mode to enter into, or `nil` to exit the current mode.\n@usage keys['ce'] = {gui.command_entry.enter_mode, 'command_entry'}\n@see _G.keys.MODE
entry_text gui.command_entry.entry_text (string)\nThe text in the entry.
eol_mode buffer.eol_mode (number)\nThe current end of line mode.\n\n* `_SCINTILLA.constants.SC_EOL_CRLF` (0)\n  "CR+LF" ("\r\n").\n* `_SCINTILLA.constants.SC_EOL_CR` (1)\n  "CR" ("\r").\n* `_SCINTILLA.constants.SC_EOL_LF` (2)\n  "LF" ("\n").\n\nThe default value is `0` on Windows platforms, `2` otherwise.
error _G.error(message [, level])\nTerminates the last protected function called and returns `message`\nas the error message. Function `error` never returns.\n\nUsually, `error` adds some information about the error position at the\nbeginning of the message, if the message is a string. The `level` argument\nspecifies how to get the error position. With level 1 (the default), the\nerror position is where the `error` function was called. Level 2 points the\nerror to where the function that called `error` was called; and so on.\nPassing a level 0 avoids the addition of error position information to the\nmessage.
error_detail _M.textadept.run.error_detail (table)\nMap of lexer names to their error string details, tables containing the\nfollowing fields:\n\n  + `pattern`: A Lua pattern that matches the language's error string,\n    capturing the filename the error occurs in, the line number the error\n    occurred on, and optionally the error message.\n  + `filename`: The numeric index of the Lua capture containing the filename\n     the error occurred in.\n  + `line`: The numeric index of the Lua capture containing the line number\n     the error occurred on.\n  + `message`: (Optional) The numeric index of the Lua capture containing the\n    error's message. An annotation will be displayed if a message was\n    captured.\n\nWhen an error message is double-clicked, the user is taken to the point of\nerror.\nThis table is usually populated by language-specific modules.
events _G.events (module)\nTextadept's core event structure and handlers.
execute os.execute([command])\nThis function is equivalent to the ANSI C function `system`. It passes\n`command` to be executed by an operating system shell. Its first result is\n`true` if the command terminated successfully, or `nil` otherwise. After this\nfirst result the function returns a string and a number, as follows:\n  "exit": the command terminated normally; the following number is the exit\n          status of the command.\n  "signal": the command was terminated by a signal; the following number is\n            the signal that terminated the command.\n\nWhen called without a `command`, `os.execute` returns a boolean that is true\nif a shell is available.
execute_lua gui.command_entry.execute_lua(code)\nExecutes string *code* as Lua code.\nCode is subject to an "abbreviated" environment where the `buffer`, `view`,\nand `gui` tables are also considered as globals.\nPrints the results of '=' expressions like in the Lua prompt.\n@param code The Lua code to execute.
exit os.exit([code [, close]])\nCalls the ANSI C function `exit` to terminate the host program. If `code` is\n`true`, the returned status is `EXIT_SUCCESS`; if `code` is `false`, the\nreturned status is `EXIT_FAILURE`; if `code` is a number, the returned status\nis this number. The default value for `code` is `true`.\n\nIf the optional second argument `close` is true, closes the Lua state before\nexiting.
exp math.exp(x)\nReturns the value *e^x*.
expand_children buffer.expand_children(buffer, line, level)\nExpands the fold states of the fold header on line number *line* and its\nchildren with fold level *level*.\n@param buffer The global buffer.\n@param line The line number in *buffer* to expand the folds for.\n@param level The previous fold level of *line*, not the current one. This is\n  because this function is used to respond to changes in a line's fold level\n  or fold header status, so a new fold level has already been set.
extend lexer.extend (pattern)\nA pattern matching any ASCII extended character (`0`..`255`).
extensions _M.textadept.mime_types.extensions (table)\nMap of file extensions (excluding the leading '.') to their associated\nlexers.\nIf the file type is not recognized by shebang words or first-line patterns,\neach file extension is matched against the file's extension.
extra_ascent buffer.extra_ascent (number)\nThe amount of pixel padding above line text.\nThe default value is `0`.
extra_descent buffer.extra_descent (number)\nThe amount of pixel padding below line text.\nThe default is `0`.
extract bit32.extract(n, field [, width])\nReturns the unsigned number formed by the bits `field` to `field + width - 1`\nfrom `n`. Bits are numbered from 0 (least significant) to 31 (most\nsignificant). All accessed bits must be in the range [0, 31].\n\nThe default for `width` is 1.
filename buffer.filename (string)\nThe UTF-8-encoded absolute path to the file associated with the buffer.\nUse `string.iconv()` and `_G._CHARSET` for charset conversions.
filter_through _M.textadept.editing.filter_through(cmd)\nPasses selected or all buffer text to string shell command *cmd* as standard\ninput (stdin) and replaces the input text with the command's standard output\n(stdout).\nStandard input is as follows:\n\n1. If text is selected and spans multiple lines, all text on the lines\ncontaining the selection is used. However, if the end of the selection is at\nthe beginning of a line, only the EOL (end of line) characters from the\nprevious line are included as input. The rest of the line is excluded.\n2. If text is selected and spans a single line, only the selected text is\nused.\n3. If no text is selected, the entire buffer is used.\n@param cmd The Linux, BSD, Mac OSX, or Windows shell command to filter text\n  through.
filteredlist gui.filteredlist(title, columns, items, int_return, ...)\nConvenience function for `gui.dialog('filteredlist', ...)` with "Ok" and\n"Cancel" buttons that returns the text or index of the selection depending on\nthe boolean value of *int_return*.\n*title* is the title of the dialog, *columns* is a list of column names, and\n*items* is a list of items to show.\n@param title The title for the filtered list dialog.\n@param columns A column name or list of column names.\n@param items An item or list of items.\n@param int_return Optional flag indicating whether to return the integer\n  index of the selected item in the filtered list or the string selected\n  item. A `true` value is not compatible with the `'--select-multiple'`\n  option. The default value is `false`.\n@param ... Optional additional parameters to pass to `gui.dialog()`.\n@usage gui.filteredlist('Title', 'Foo', {'Bar', 'Baz'})\n@usage gui.filteredlist('Title', {'Foo', 'Bar'}, {'a', 'b', 'c', 'd'}, false,\n                        '--output-column', '2')\n@return Either a string or integer on success; `nil` otherwise. In strings,\n  multiple items are separated by newlines.\n@see dialog
find gui.find (module)\nTextadept's Find & Replace pane.
find string.find(s, pattern [, init [, plain]])\nLooks for the first match of `pattern` in the string `s`. If it finds a\nmatch, then `find` returns the indices of `s` where this occurrence starts\nand ends; otherwise, it returns nil. A third, optional numerical argument\n`init` specifies where to start the search; its default value is 1 and\ncan be negative. A value of true as a fourth, optional argument `plain`\nturns off the pattern matching facilities, so the function does a plain\n"find substring" operation, with no characters in `pattern` being considered\nmagic. Note that if `plain` is given, then `init` must be given as well.\n\nIf the pattern has captures, then in a successful match the captured values\nare also returned, after the two indices.
find_column buffer.find_column(buffer, line, column)\nReturns the position of column number *column* on line number *line*, taking\ntab and multi-byte characters into account, or the position at the end of\nline *line*.\n@param buffer The global buffer.\n@param line The line number in *buffer* to use.\n@param column The column number to use.
find_entry_text gui.find.find_entry_text (string)\nThe text in the find entry.
find_in_files gui.find.find_in_files(utf8_dir)\nSearches the *utf8_dir* or user-specified directory for files that match\nsearch text and options and prints the results to a buffer.\nUse the `find_text`, `match_case`, `whole_word`, and `lua` fields to set the\nsearch text and option flags, respectively. Use `FILTER` to set the search\nfilter.\n@param utf8_dir Optional UTF-8-encoded directory path to search. If `nil`,\n  the user is prompted for one.\n@see FILTER
find_incremental gui.find.find_incremental(text, next, anchor)\nBegins an incremental search using the command entry if *text* is `nil`;\notherwise continues an incremental search by searching for the next or\nprevious instance of string *text* depending on boolean *next*.\nIf *anchor* is `true`, searches for *text* starting from the current position\ninstead of the position where incremental search began at.\nOnly the `match_case` find option is recognized. Normal command entry\nfunctionality is unavailable until the search is finished by pressing `Esc`\n(`âŽ‹` on Mac OSX | `Esc` in curses).\n@param text The text to incrementally search for, or `nil` to begin an\n  incremental search.\n@param next Flag indicating whether or not the search direction is forward.\n@param anchor Optional flag indicating whether or not to start searching from\n  the current position. The default value is `false`.
find_label_text gui.find.find_label_text (string, Write-only)\nThe text of the "Find" label.\nThis is primarily used for localization.
find_next gui.find.find_next()\nMimics pressing the "Find Next" button.
find_next_button_text gui.find.find_next_button_text (string, Write-only)\nThe text of the "Find Next" button.\nThis is primarily used for localization.
find_prev gui.find.find_prev()\nMimics pressing the "Find Prev" button.
find_prev_button_text gui.find.find_prev_button_text (string, Write-only)\nThe text of the "Find Prev" button.\nThis is primarily used for localization.
finish_mode gui.command_entry.finish_mode(f)\nExits the current key mode, closes the command entry, and calls function *f*\n(if given) with the command entry text as an argument.\nThis is useful for binding keys to exit a command entry mode and perform an\naction with the entered text.\n@param f Optional function to call. It should accept the command entry text\n  as an argument.\n@usage keys['\n'] = {gui.command_entry.finish_mode, gui.print}
first_visible_line buffer.first_visible_line (number)\nThe line number of the line at the top of the view, starting from zero.
float lexer.float (pattern)\nA pattern matching a floating point number.
floor math.floor(x)\nReturns the largest integer smaller than or equal to `x`.
flush file:flush()\nSaves any written data to `file`.
flush io.flush()\nEquivalent to `io.output():flush()`.
fmod math.fmod(x, y)\nReturns the remainder of the division of `x` by `y` that rounds the\nquotient towards zero.
focus gui.command_entry.focus()\nFocuses the command entry.
focus gui.find.focus()\nDisplays and focuses the Find & Replace pane.
fold lexer.fold(text, start_pos, start_line, start_level)\nFolds *text*, a chunk of text starting at position *start_pos* on line number\n*start_line* with a beginning fold level of *start_level* in the buffer.\nCalled by the Scintilla lexer; **do not call from Lua**. If the current lexer\nhas a `_fold` function or a `_foldsymbols` table, it is used to perform\nfolding. Otherwise, if a `fold.by.indentation` property is set, folding by\nindentation is done.\n@param text The text in the buffer to fold.\n@param start_pos The position in the buffer *text* starts at.\n@param start_line The line number *text* starts on.\n@param start_level The fold level *text* starts on.\n@return table of fold levels.
fold_all buffer.fold_all(buffer, action)\nExpands, contracts, or toggles the fold states of all fold headers in the\nbuffer, depending on *action*.\nWhen toggling, the state of the first fold header in the buffer determines\nwhether to expand or contract.\n@param buffer The global buffer.\n@param action The fold action to perform. Valid values are:\n  * `_SCINTILLA.constants.SC_FOLDACTION_CONTRACT` (0)\n  * `_SCINTILLA.constants.SC_FOLDACTION_EXPAND` (1)\n  * `_SCINTILLA.constants.SC_FOLDACTION_TOGGLE` (2)
fold_children buffer.fold_children(buffer, line, action)\nExpands, contracts, or toggles the fold states of the fold header on line\nnumber *line* and its children, depending on *action*.\n@param buffer The global buffer.\n@param line The line number in *buffer* to set the fold states for.\n@param action The fold action to perform. Valid values are:\n  * `_SCINTILLA.constants.SC_FOLDACTION_CONTRACT` (0)\n  * `_SCINTILLA.constants.SC_FOLDACTION_EXPAND` (1)\n  * `_SCINTILLA.constants.SC_FOLDACTION_TOGGLE` (2)
fold_expanded buffer.fold_expanded (table)\nTable of flags indicating whether or not folds are expanded for line\nnumbers starting from zero.\nSetting expanded fold states does not toggle folds; it only updates fold\nmargin markers. Use `buffer:toggle_fold()` instead.
fold_flags buffer.fold_flags (number)\nBit-mask of options for drawing folding lines.\n\n* `_SCINTILLA.constants.SC_FOLDFLAG_LINEBEFORE_EXPANDED` (2)\n  Draw lines above expanded folds.\n* `_SCINTILLA.constants.SC_FOLDFLAG_LINEBEFORE_CONTRACTED` (4)\n  Draw lines above collapsed folds.\n* `_SCINTILLA.constants.SC_FOLDFLAG_LINEAFTER_EXPANDED` (8)\n  Draw lines below expanded folds.\n* `_SCINTILLA.constants.SC_FOLDFLAG_LINEAFTER_CONTRACTED` (16)\n  Draw lines below collapsed folds.\n\nThe default value is `0`.
fold_level buffer.fold_level (table)\nTable of fold level bit-masks for line numbers starting from zero.\nFold level masks are composed of an integer level combined with any of the\nfollowing bits:\n\n* `_SCINTILLA.constants.SC_FOLDLEVELBASE` (0x400)\n  The initial fold level.\n* `_SCINTILLA.constants.SC_FOLDLEVELWHITEFLAG` (0x1000)\n  The line is blank.\n* `_SCINTILLA.constants.SC_FOLDLEVELHEADERFLAG` (0x2000)\n  The line is a header, or fold point.
fold_line buffer.fold_line(buffer, line, action)\nExpands, contracts, or toggles the fold state of the fold header on line\nnumber *line*, depending on *action*.\n@param buffer The global buffer.\n@param line The line number in *buffer* to set the fold state for.\n@param action The fold action to perform. Valid values are:\n  * `_SCINTILLA.constants.SC_FOLDACTION_CONTRACT` (0)\n  * `_SCINTILLA.constants.SC_FOLDACTION_EXPAND` (1)\n  * `_SCINTILLA.constants.SC_FOLDACTION_TOGGLE` (2)
fold_line_comments lexer.fold_line_comments(prefix)\nReturns a fold function, to be used within the lexer's `_foldsymbols` table,\nthat folds consecutive line comments beginning with string *prefix*.\n@param prefix The prefix string defining a line comment.\n@usage [l.COMMENT] = {['--'] = l.fold_line_comments('--')}\n@usage [l.COMMENT] = {['//'] = l.fold_line_comments('//')}
fold_parent buffer.fold_parent (table, Read-only)\nTable of parent line numbers (fold points) for child line numbers starting\nfrom zero.\nA line number of `-1` means no line was found.
form_feed buffer.form_feed(buffer)\nInserts a Form Feed ("\f") character at the caret.\n@param buffer The global buffer.
format string.format(formatstring, Â·Â·Â·)\nReturns a formatted version of its variable number of arguments following the\ndescription given in its first argument (which must be a string). The format\nstring follows the same rules as the ANSI C function `sprintf`. The only\ndifferences are that the options/modifiers `*`, `h`, `L`, `l`, `n`, and `p`\nare not supported and that there is an extra option, `q`. The `q` option\nformats a string between double quotes, using escape sequences when necessary\nto ensure that it can safely be read back by the Lua interpreter. For\ninstance, the call\n\n  string.format('%q', 'a string with "quotes" and \n new line')\n\nmay produce the string:\n\n  "a string with \"quotes\" and \\n      new line"\n\nOptions `A` and `a` (when available), `E`, `e`, `f`, `G`, and `g` all expect\na number as argument. Options `c`, `d`, `i`, `o`, `u`, `X`, and `x` also\nexpect a number, but the range of that number may be limited by the\nunderlying C implementation. For options `o`, `u`, `X`, and `x`, the number\ncannot be negative. Option `q` expects a string; option `s` expects a string\nwithout embedded zeros. If the argument to option `s` is not a string, it is\nconverted to one following the same rules of `tostring`.
frexp math.frexp(x)\nReturns `m` and `e` such that 'x = m2^e', `e` is an integer and the\nabsolute value of `m` is in the range *[0.5, 1)* (or zero when `x` is zero).
functions _SCINTILLA.functions (table)\nMap of Scintilla function names to tables containing their IDs, return types,\nwParam types, and lParam types. Types are as follows:\n\n  + `0`: Void.\n  + `1`: Integer.\n  + `2`: Length of the given lParam string.\n  + `3`: Integer position.\n  + `4`: Color, in "0xBBGGRR" format.\n  + `5`: Boolean `true` or `false`.\n  + `6`: Bitmask of Scintilla key modifiers and a key value.\n  + `7`: String parameter.\n  + `8`: String return value.
get_apidoc _M.textadept.adeptsense.get_apidoc(sense, symbol)\nReturns a list of apidocs for *symbol* name.\nThe list contains a `pos` key with the index of the apidoc to show.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param symbol The symbol name to get apidocs for.\n@return list of apidocs or `nil`
get_class _M.textadept.adeptsense.get_class(sense, symbol)\nReturns the class name for *symbol* name.\nIf *symbol* is `sense.syntax.self` and inside a class definition matching\n`sense.syntax.class_definition`, that class is returned. Otherwise the\nbuffer is searched backwards for a type declaration of *symbol* according to\nthe patterns in `sense.syntax.type_declarations` or a type assignment of\n*symbol* according to `sense.syntax.type_assignments`.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param symbol The symbol name to get the class of.\n@return class or `nil`\n@see syntax
get_completions _M.textadept.adeptsense.get_completions(sense, symbol, only_fields, only_functions)\nReturns a list of function (unless *only_fields* is `true`) and field (unless\n*only_funcs* is `true`) completions for *symbol* name.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param symbol The symbol name to get completions for.\n@param only_fields Optional flag indicating whether or not to return a list\n  of only fields. The default value is `false`.\n@param only_functions Optional flag indicating whether or not to return a\n  list of only functions. The default value is `false`.\n@return completion_list or `nil`
get_cur_line buffer.get_cur_line(buffer)\nReturns the current line's text and the index of the caret on the line,\nstarting from zero.\n@param buffer The global buffer.\n@return string, number
get_fold_level lexer.get_fold_level(line_number)\nReturns the fold level for line number *line_number*.\nThis level already has `SC_FOLDLEVELBASE` added to it, so you do not need to\nadd it yourself.\n@param line_number The line number to get the fold level of.\n@return integer fold level
get_hotspot_active_back buffer.get_hotspot_active_back(buffer)\nReturns the numeric background color for active hotspots.\n@param buffer The global buffer.\n@return number
get_hotspot_active_fore buffer.get_hotspot_active_fore(buffer)\nReturns the numeric foreground color for active hotspots.\n@param buffer The global buffer.\n@return number
get_indent_amount lexer.get_indent_amount(line_number)\nReturns the amount of indentation the text on line number *line_number* has.\n@param line_number The line number to get the indent amount of.\n@return integer indent amount
get_last_child buffer.get_last_child(buffer, start_line, level)\nReturns the line number of the last line after line number *start_line* whose\nfold level is greater than *level* or the level of *start_line* if *level* is\n`-1`.\n@param buffer The global buffer.\n@param start_line The line number in *buffer* of a header line.\n@param level The fold level, or `-1` for the level of *start_line*.
get_lexer buffer.get_lexer(buffer, current)\nReturns the name of the lexer used by the buffer, or the name of the lexer\nunder the caret in a multiple-language lexer if *current* is `true`.\n@param buffer The global buffer.\n@param current Whether or not to get the lexer at the current caret position\n  in multi-language lexers. The default is `false` and returns the parent\n  lexer.
get_line buffer.get_line(buffer, line)\nReturns the text on line number *line*, including end of line characters, and\nthe length of the line.\n@param buffer The global buffer.\n@param line The line number in *buffer* to use.\n@return string, number
get_line_sel_end_position buffer.get_line_sel_end_position(buffer, line)\nReturns the position of the end of the selected text on line number *line*,\nor `-1`.\n@param buffer The global buffer.\n@param line The line number in *buffer* to use.
get_line_sel_start_position buffer.get_line_sel_start_position(buffer, line)\nReturns the position of the beginning of the selected text on line number\n*line*, or `-1`.\n@param buffer The global buffer.\n@param line The line number in *buffer* to use.
get_property lexer.get_property(key, default)\nReturns the string property value associated with string property *key*, or\n*default*.\n@param key The string property key.\n@param default Optional value to return if *key* is not set.\n@return property value
get_property_expanded M.get_property_expanded(key)\nReturns the string property value associated with string property *key*,\nreplacing any "$()" and "%()" expressions with the values of their keys.\n@param key The string property key.\n@return property value
get_sel_text buffer.get_sel_text(buffer)\nReturns the selected text and its length.\nMultiple selections are included in order with no delimiters. Rectangular\nselections are included from top to bottom with line ending delimiters.\nVirtual space is not included.\n@param buffer The global buffer.\n@return string, number
get_split_table gui.get_split_table()\nReturns the current split view structure.\nThis is primarily used in session saving.\n@return table of split views. Each split view entry is a table with 4\n  fields: `1`, `2`, `vertical`, and `size`. `1` and `2` have values of either\n  nested split view entries or the views themselves; `vertical` is a flag\n  indicating if the split is vertical or not; and `size` is the integer\n  position of the split resizer.
get_style_at lexer.get_style_at(pos)\nReturns the string style name and style number at position *pos* in the\nbuffer.\n@param pos The position in the buffer to get the style for.\n@return style name\n@return style number
get_style_name buffer.get_style_name(buffer, style_num)\nReturns the name of style number *style_num*, in the range of `0` to `255`.\n@param buffer The global buffer.\n@param style_num The style number from `0` to `255` to get the name of.\n@see buffer.style_at
get_symbol _M.textadept.adeptsense.get_symbol(sense)\nReturns a full symbol (if any) and current symbol part (if any) behind the\ncaret.\nFor example: `buffer.cur` would return `'buffer'` and `'cur'`. Returns empty\nstrings instead of `nil`.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@return symbol or `''`\n@return part or `''`
get_text buffer.get_text(buffer)\nReturns all of the text in the buffer and its length.\n@param buffer The global buffer.
getenv os.getenv(varname)\nReturns the value of the process environment variable `varname`, or\nnil if the variable is not defined.
gethook debug.gethook([thread])\nReturns the current hook settings of the thread, as three values: the\ncurrent hook function, the current hook mask, and the current hook count\n(as set by the `debug.sethook` function).
getinfo debug.getinfo([thread, ] f [, what])\nReturns a table with information about a function. You can give the\nfunction directly or you can give a number as the value of `f`, which means\nthe function running at level `f` of the call stack of the given thread:\nlevel 0 is the current function (`getinfo` itself); level 1 is the function\nthat called `getinfo` and so on. If `f` is a number larger than the number of\nactive functions, then `getinfo` returns nil.\n\nThe returned table can contain all the fields returned by `lua_getinfo`,\nwith the string `what` describing which fields to fill in. The default for\n`what` is to get all information available, except the table of valid\nlines. If present, the option '`f`' adds a field named `func` with\nthe function itself. If present, the option '`L`' adds a field named\n`activelines` with the table of valid lines.\n\nFor instance, the expression `debug.getinfo(1,"n").name` returns a table\nwith a name for the current function, if a reasonable name can be found,\nand the expression `debug.getinfo(print)` returns a table with all available\ninformation about the `print` function.
getlocal debug.getlocal([thread, ] f, local)\nThis function returns the name and the value of the local variable with index\n`local` of the function at level `f` of the stack. This function accesses not\nonly explicit local variables, but also parameters, temporaries, etc.\n\nThe first parameter or local variable has index 1, and so on, until the last\nactive variable. Negative indices refer to vararg parameters; -1 is the first\nvararg parameter. The function returns nil if there is no variable with the\ngiven index, and raises an error when called with a level out of range. (You\ncan call `debug.getinfo` to check whether the level is valid.)\n\nVariable names starting with '`(`' (open parenthesis) represent internal\nvariables (loop control variables, temporaries, varargs, and C function\nlocals).\n\nThe parameter `f` may also be a function. In that case, `getlocal` returns\nonly the name of function parameters.
getmetatable _G.getmetatable(object)\nIf `object` does not have a metatable, returns nil. Otherwise, if the\nobject's metatable has a `"__metatable"` field, returns the associated\nvalue. Otherwise, returns the metatable of the given object.
getmetatable debug.getmetatable(value)\nReturns the metatable of the given `value` or nil if it does not have\na metatable.
getregistry debug.getregistry()\nReturns the registry table (see Â§4.5).
getupvalue debug.getupvalue(f, up)\nThis function returns the name and the value of the upvalue with index\n`up` of the function `f`. The function returns nil if there is no upvalue\nwith the given index.
getuservalue debug.getuservalue(u)\nReturns the Lua value associated to `u`. If `u` is not a userdata, returns\nnil.
gmatch string.gmatch(s, pattern)\nReturns an iterator function that, each time it is called, returns the\nnext captures from `pattern` over the string `s`. If `pattern` specifies no\ncaptures, then the whole match is produced in each call.\n\nAs an example, the following loop will iterate over all the words from string\n`s`, printing one per line:\n\n  s = "hello world from Lua"\n  for w in string.gmatch(s, "%a+") do\n    print(w)\n  end\n\nThe next example collects all pairs `key=value` from the given string into a\ntable:\n\n  t = {}\n  s = "from=world, to=Lua"\n  for k, v in string.gmatch(s, "(%w+)=(%w+)") do\n    t[k] = v\n  end\n\nFor this function, a caret '`^`' at the start of a pattern does not work as\nan anchor, as this would prevent the iteration.
goto_buffer view.goto_buffer(view, n, relative)\nGoes to buffer number *n* in the view.\nIf *relative* is `true`, *n* is an index relative to the index of the current\nbuffer in `_G._BUFFERS` instead of an absolute index.\nEmits `BUFFER_BEFORE_SWITCH` and `BUFFER_AFTER_SWITCH` events.\n@param view The view to switch buffers in.\n@param n A relative or absolute buffer index in `_G._BUFFERS`. An absolute\n  index of `-1` goes to the last buffer.\n@param relative Optional flag indicating whether *n* is a relative or\n  absolute index. The default value is `false`, for an absolute index.\n@see _G._G._BUFFERS\n@see events.BUFFER_BEFORE_SWITCH\n@see events.BUFFER_AFTER_SWITCH
goto_ctag _M.textadept.adeptsense.goto_ctag(sense, kind, title)\nPrompts the user to select a symbol to jump to from a list of all known\nsymbols of kind *kind* (classes, functions, fields, etc.) shown in a filtered\nlist dialog whose title text is *title*.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param kind The Ctag character kind (e.g. `'f'` for a Lua function).\n@param title The title for the filtered list dialog.
goto_error _M.textadept.run.goto_error(line, next)\nGoes to the source of the recognized compile/run error on line number *line*\nin the message buffer or the next or previous recognized error depending on\nboolean *next*.\nDisplays an annotation with the error message, if available.\n@param line The line number in the message buffer that contains the\n  compile/run error to go to.\n@param next Optional flag indicating whether to go to the next recognized\n  error or the previous one. Only applicable when *line* is `nil` or `false`.\n@see error_detail\n@see cwd
goto_file gui.goto_file(filename, split, preferred_view, sloppy)\nGoes to the buffer whose filename is *filename* in an existing view,\notherwise splitting the current view if *split* is `true` or going to the\nnext or *preferred_view* view instead of staying in the current one.\nIf *sloppy* is `true`, only the last part of *filename* is matched to a\nbuffer's `filename`.\n@param filename The filename of the buffer to go to.\n@param split Optional flag indicating whether or not to open the buffer in a\n  split view if there is only one view. The default value is `false`.\n@param preferred_view Optional view to open the desired buffer in if the\n  buffer is not visible in any other view.\n@param sloppy Optional flag indicating whether or not to not match *filename*\n  to `buffer.filename` exactly. When `true`, matches *filename* to only the\n  last part of `buffer.filename` This is useful for run and compile commands\n  which output relative filenames and paths instead of full ones and it is\n  likely that the file in question is already open. The default value is\n  `false`.
goto_file_found gui.find.goto_file_found(line, next)\nGoes to the source of the find in files search result on line number *line*\nin the files found buffer, or if `nil`, the next or previous search result\ndepending on boolean *next*.\n@param line The line number in the files found buffer that contains the\n  search result to go to.\n@param next Optional flag indicating whether to go to the next search result\n  or the previous one. Only applicable when *line* is `nil` or `false`.
goto_line _M.textadept.editing.goto_line(line)\nGoes to line number *line* or the user-specified line in the buffer.\n@param line Optional line number to go to. If `nil`, the user is prompted for\n  one.
goto_line buffer.goto_line(buffer, line)\nPlaces the caret an anchor at the beginning of line number *line* and scrolls\nthem into view.\n@param buffer The global buffer.\n@param line The line number in *buffer* to go to.
goto_mark _M.textadept.bookmarks.goto_mark(next)\nPrompts the user to select a bookmarked line to go to unless *next* is given.\nIf *next* is `true` or `false`, goes to the next or previous bookmark,\nrespectively.\n@param next Optional flag indicating whether to go to the next or previous\n  bookmarked line relative to the current line. The default value is `nil`,\n  prompting the user for a bookmarked line to go to.
goto_pos buffer.goto_pos(buffer, pos)\nPlaces the caret and anchor at position *pos* and scrolls them into view.\n@param buffer The global buffer.\n@param pos The position in *buffer* to go to.
goto_view gui.goto_view(n, relative)\nGoes to view number *n*.\nIf *relative* is `true`, *n* is an index relative to the index of the current\nview in `_G._VIEWS` instead of an absolute index.\nEmits `VIEW_BEFORE_SWITCH` and `VIEW_AFTER_SWITCH` events.\n@param n A relative or absolute view index in `_G._VIEWS`.\n@param relative Optional flag indicating whether *n* is a relative or\n  absolute index. The default value is `false`, for an absolute index.\n@see _G._G._VIEWS\n@see events.VIEW_BEFORE_SWITCH\n@see events.VIEW_AFTER_SWITCH
grab_focus buffer.grab_focus(buffer)\nSets the focus to the buffer's view.\n@param buffer The global buffer.
graph lexer.graph (pattern)\nA pattern matching any graphical character (`!` to `~`).
gsub string.gsub(s, pattern, repl [, n])\nReturns a copy of `s` in which all (or the first `n`, if given)\noccurrences of the `pattern` have been replaced by a replacement string\nspecified by `repl`, which can be a string, a table, or a function. `gsub`\nalso returns, as its second value, the total number of matches that occurred.\nThe name `gsub` comes from "Global SUBstitution".\n\nIf `repl` is a string, then its value is used for replacement. The character\n`%` works as an escape character: any sequence in `repl` of the form `%d`,\nwith `d` between 1 and 9, stands for the value of the `d`-th captured\nsubstring. The sequence `%0` stands for the whole match. The sequence `%%`\nstands for a single `%`.\n\nIf `repl` is a table, then the table is queried for every match, using\nthe first capture as the key.\n\nIf `repl` is a function, then this function is called every time a match\noccurs, with all captured substrings passed as arguments, in order.\n\nIn any case, if the pattern specifies no captures, then it behaves as if the\nwhole pattern was inside a capture.\n\nIf the value returned by the table query or by the function call is a\nstring or a number, then it is used as the replacement string; otherwise,\nif it is false or nil, then there is no replacement (that is, the original\nmatch is kept in the string).\n\nHere are some examples:\n\n  x = string.gsub("hello world", "(%w+)", "%1 %1")\n  --> x="hello hello world world"\n  x = string.gsub("hello world", "%w+", "%0 %0", 1)\n  --> x="hello hello world"\n  x = string.gsub("hello world from Lua", "(%w+)%s*(%w+)", "%2 %1")\n  --> x="world hello Lua from"\n  x = string.gsub("home = $HOME, user = $USER", "%$(%w+)", os.getenv)\n  --> x="home = /home/roberto, user = roberto"\n  x = string.gsub("4+5 = $return 4+5$", "%$(.-)%$", function (s)\n        return load(s)()\n      end)\n  --> x="4+5 = 9"\n  local t = {name="lua", version="5.2"}\n  x = string.gsub("$name-$version.tar.gz", "%$(%w+)", t)\n  --> x="lua-5.2.tar.gz"
gui _G.gui (module)\nUtilities for interacting with Textadept's user interface.
h_scroll_bar buffer.h_scroll_bar (bool)\nDisplay the horizontal scroll bar.\nThe default value is `true`.
handle_clear _M.textadept.adeptsense.handle_clear(sense)\nCalled when clearing the Adeptsense.\nThis function should be replaced with your own if you have any persistant\nobjects that need to be deleted.\n@param sense The Adeptsense returned by `adeptsense.new()`.
handle_ctag _M.textadept.adeptsense.handle_ctag(sense, tag_name, file_name, ex_cmd, ext_fields)\nCalled by `load_ctags()` when a Ctag kind is not recognized.\nThe parameters are extracted from Ctags' tag format. This method should\nbe replaced with your own that is specific to the language.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param tag_name The tag name.\n@param file_name The name of the file the tag belongs to.\n@param ex_cmd The `ex_cmd` returned by Ctags.\n@param ext_fields The `ext_fields` returned by Ctags.
hex_num lexer.hex_num (pattern)\nA pattern matching a hexadecimal number.
hide_lines buffer.hide_lines(buffer, start_line, end_line)\nHides the range of lines from line number *start_line* to *end_line*.\nThis has no effect on fold levels or fold flags and the first line cannot be\nhidden.\n@param buffer The global buffer.\n@param start_line The start line of the range of lines in *buffer* to hide.\n@param end_line The end line of the range of lines in *buffer* to hide.
hide_selection buffer.hide_selection(buffer, normal)\nDo not highlight selected text if *normal* is `true`.\n@param buffer The global buffer.\n@param normal Whether or not to draw the normal selection.
highlight_guide buffer.highlight_guide (number)\nThe indentation guide column number to highlight, or `0` to stop\nhighlighting.
highlight_word _M.textadept.editing.highlight_word()\nHighlights all occurrences of the selected text or the current word.\n@see buffer.word_chars
home buffer.home(buffer)\nMoves the caret to the beginning of the current line.\n@param buffer The global buffer.
home_display buffer.home_display(buffer)\nMoves the caret to the beginning of the current wrapped line.\n@param buffer The global buffer.
home_display_extend buffer.home_display_extend(buffer)\nMoves the caret to the beginning of the current wrapped line, extending the\nselected text to the new position.\n@param buffer The global buffer.
home_extend buffer.home_extend(buffer)\nMoves the caret to the beginning of the current line, extending the selected\ntext to the new position.\n@param buffer The global buffer.
home_rect_extend buffer.home_rect_extend(buffer)\nMoves the caret to beginning of the current line, extending the rectangular\nselection to the new position.\n@param buffer The global buffer.
home_wrap buffer.home_wrap(buffer)\nMoves the caret to beginning of the current wrapped line, or if already\nthere, to the beginning of the actual line.\n@param buffer The global buffer.
home_wrap_extend buffer.home_wrap_extend(buffer)\nLike `buffer:home_wrap()`, but extends the selected text to the new position.\n@param buffer The global buffer.
hotspot_active_underline buffer.hotspot_active_underline (bool)\nUnderline active hotspots.\nThe default value is `true`.
hotspot_single_line buffer.hotspot_single_line (bool)\nLimit hotspots to a single line.\nThe default value is `true`.
huge math.huge (number)\nThe value `HUGE_VAL`, a value larger than or equal to any other numerical\nvalue.
hypertext _G.keys.hypertext (table)\nContainer for HTML-specific key bindings.
hypertext _G.snippets.hypertext (table)\nContainer for HTML-specific snippets.
hypertext _M.hypertext (module)\nThe hypertext module.\nIt provides utilities for editing HTML code.
iconv string.iconv(text, to, from)\nConverts string *text* from character set *from* to character set *to* using\niconv.\nValid character sets are GNU iconv's character sets and include:\n\n  * European: ASCII, ISO-8859-{1,2,3,4,5,7,9,10,13,14,15,16}, KOI8-R, KOI8-U,\n    KOI8-RU, CP{1250,1251,1252,1253,1254,1257}, CP{850,866,1131},\n    Mac{Roman,CentralEurope,Iceland,Croatian,Romania},\n    Mac{Cyrillic,Ukraine,Greek,Turkish}, Macintosh.\n  * Semitic: ISO-8859-{6,8}, CP{1255,1256}, CP862, Mac{Hebrew,Arabic}.\n  * Japanese: EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP, ISO-2022-JP-2,\n    ISO-2022-JP-1.\n  * Chinese: EUC-CN, HZ, GBK, CP936, GB18030, EUC-TW, BIG5, CP950,\n    BIG5-HKSCS, BIG5-HKSCS:2004, BIG5-HKSCS:2001, BIG5-HKSCS:1999,\n    ISO-2022-CN, ISO-2022-CN-EXT.\n  * Korean: EUC-KR, CP949, ISO-2022-KR, JOHAB.\n  * Armenian: ARMSCII-8.\n  * Georgian: Georgian-Academy, Georgian-PS.\n  * Tajik: KOI8-T.\n  * Kazakh: PT154, RK1048.\n  * Thai: ISO-8859-11, TIS-620, CP874, MacThai.\n  * Laotian: MuleLao-1, CP1133.\n  * Vietnamese: VISCII, TCVN, CP1258.\n  * Unicode: UTF-8, UCS-2, UCS-2BE, UCS-2LE, UCS-4, UCS-4BE, UCS-4LE, UTF-16,\n    UTF-16BE, UTF-16LE, UTF-32, UTF-32BE, UTF-32LE, UTF-7, C99, JAVA.\n@param text The text to convert.\n@param to The string character set to convert to.\n@param from The string character set to convert from.
in_files gui.find.in_files (bool)\nSearch for the text in a list of files.\nThe default value is `false`.
in_files_label_text gui.find.in_files_label_text (string, Write-only)\nThe text of the "In files" label.\nThis is primarily used for localization.
indent buffer.indent (number)\nThe number of spaces used for one level of indentation.\nThe default value is `0`, which matches the tab size.
indentation_guides buffer.indentation_guides (number)\nThe indentation guide drawing mode.\nIndentation guides are dotted vertical lines that appear within indentation\nwhitespace at each level of indentation.\n\n* `_SCINTILLA.constants.SC_IV_NONE` (0)\n  Guides are not drawn.\n* `_SCINTILLA.constants.SC_IV_REAL` (1)\n  Draw guides only within indentation whitespace.\n* `_SCINTILLA.constants.SC_IV_LOOKFORWARD` (2)\n  Draw guides beyond the current line up to the level of the next non-empty\n  line, but with an additional level if the previous non-empty line is a\n  fold header.\n* `_SCINTILLA.constants.SC_IV_LOOKBOTH` (3)\n  Draw guides beyond the current line up to either the level of the\n  previous or next non-empty line, whichever is greater.\n\nThe default value is `0`.
indic_alpha buffer.indic_alpha (table)\nTable of fill color alpha values, ranging from `0` (transparent) to `255`\n(opaque), for indicator numbers from `0` to `31` whose styles are either\n`INDIC_ROUNDBOX`, `INDIC_STRAIGHTBOX`, or `INDIC_DOTBOX`.\nThe default values are `256`, for no alpha.
indic_fore buffer.indic_fore (table)\nTable of foreground colors, in "0xBBGGRR" format, for indicator numbers\nfrom `0` to `31`.
indic_outline_alpha buffer.indic_outline_alpha (table)\nTable of outline color alpha values, ranging from `0` (transparent) to\n`255` (opaque), for indicator numbers from `0` to `31` whose styles are\neither `INDIC_ROUNDBOX`, `INDIC_STRAIGHTBOX`, or `INDIC_DOTBOX`.\nThe default values are `256`, for no alpha.
indic_style buffer.indic_style (table)\nTable of styles for indicator numbers from `0` to `31`.\n\n* `_SCINTILLA.constants.INDIC_PLAIN` (0)\n  An underline.\n* `_SCINTILLA.constants.INDIC_SQUIGGLE` (1)\n  A squiggly underline 3 pixels in height.\n* `_SCINTILLA.constants.INDIC_TT` (2)\n  A line of small 'T' shapes.\n* `_SCINTILLA.constants.INDIC_DIAGONAL` (3)\n  Diagonal hatching.\n* `_SCINTILLA.constants.INDIC_STRIKE` (4)\n  Strike out.\n* `_SCINTILLA.constants.INDIC_HIDDEN` (5)\n  Invisible.\n* `_SCINTILLA.constants.INDIC_BOX` (6)\n  A rectangle around the text.\n* `_SCINTILLA.constants.INDIC_ROUNDBOX` (7)\n  A translucent rectangle with rounded corners around the text. Use\n  `buffer.indic_alpha` and\n  `buffer.indic_outline_alpha` to set the fill and\n  outline transparency, respectively. Their default values are `30` and\n  `50`.\n* `_SCINTILLA.constants.INDIC_STRAIGHTBOX` (8)\n  Similar to `INDIC_ROUNDBOX` but with sharp corners.\n* `_SCINTILLA.constants.INDIC_DASH` (9)\n  A dashed underline.\n* `_SCINTILLA.constants.INDIC_DOTS` (10)\n  A dotted underline.\n* `_SCINTILLA.constants.INDIC_SQUIGGLELOW` (11)\n  A squiggly underline 2 pixels in height.\n* `_SCINTILLA.constants.INDIC_DOTBOX` (12)\n  Similar to `INDIC_STRAIGHTBOX` but with a dotted outline.\n  Translucency alternates between `buffer.indic_alpha` and\n  `buffer.indic_outline_alpha` starting with the\n  top-left pixel.\n* `_SCINTILLA.constants.INDIC_SQUIGGLEPIXMAP` (13)\n  Identical to `INDIC_SQUIGGLE` but draws faster by using a pixmap instead\n  of multiple line segments.\n* `_SCINTILLA.constants.INDIC_COMPOSITIONTHICK` (14)\n  A 2-pixel thick underline at the bottom of the line inset by 1 pixel on\n  on either side. Similar in appearance to Asian language input\n  composition.\n\nUse `_SCINTILLA.next_indic_number()` for custom indicators.
indic_under buffer.indic_under (table)\nTable of flags indicating whether or not to draw indicators over text or\nunder it for indicator numbers from `0` to `31`.\nFor values to be `true`, `buffer.two_phase_draw` must be\n`true`.\nThe default values are `false` for drawing indicators over text.
indicator_all_on_for buffer.indicator_all_on_for(buffer, pos)\nReturns a bit-mask representing which indicators are on at position *pos*.\nBit 0 is set if indicator 0 is on, bit 1 for indicator 1, etc.\n@param buffer The global buffer.\n@param pos The position in *buffer* to get indicators at.\n@return number
indicator_clear_range buffer.indicator_clear_range(buffer, pos, clear_length)\nClears indicator `buffer.indicator_current` over the range of text from *pos*\nto *pos* + *clear_length*.\n@param buffer The global buffer.\n@param pos The start position of the range of text in *buffer* to clear\n  indicators over.\n@param clear_length The number of characters in the range of text to clear\n  indicators over.
indicator_current buffer.indicator_current (number)\nThe indicator number in the range of `0` to `31` used by\n`buffer:indicator_fill_range()` and\n`buffer:indicator_clear_range()`.
indicator_end buffer.indicator_end(buffer, indicator, pos)\nReturns the end position of indicator number *indicator*, in the range of `0`\nto `31`, at position *pos*.\n@param buffer The global buffer.\n@param indicator An indicator number in the range of `0` to `31`.\n@param pos The position in *buffer* of the indicator.
indicator_fill_range buffer.indicator_fill_range(buffer, pos, fill_length)\nSets indicator `buffer.indicator_value` or `buffer.indicator_current` over\nthe range of text from *pos* to *pos* + *fill_length*.\n@param buffer The global buffer.\n@param pos The start position of the range of text in *buffer* to set\n  indicators over.\n@param fill_length The number of characters in the range of text to set\n  indicators over.
indicator_start buffer.indicator_start(buffer, indicator, pos)\nReturns the position of the beginning of indicator number *indicator*, in the\nrange of `0` to `31`, at position *pos*.\n@param buffer The global buffer.\n@param indicator An indicator number in the range of `0` to `31`.\n@param pos The position in *buffer* of the indicator.
indicator_value buffer.indicator_value (number)\nThe indicator value used for\n`buffer:indicator_fill_range()`.\nCurrently, all values are drawn the same, but it may be possible to draw\ndifferent values in different styles in the future.
indicator_value_at buffer.indicator_value_at(buffer, indicator, pos)\nReturns the value of indicator number *indicator*, in the range of `0` to\n`31`, at position *pos*.\n@param buffer The global buffer.\n@param indicator The indicator number in the range of `0` to `31`.\n@param pos The position in *buffer* of the indicator.\n@return number
inherited_classes _M.textadept.adeptsense.inherited_classes (table)\nA map of classes and a list of their inherited classes, normally populated by\n`load_ctags()`.
input io.input([file])\nWhen called with a file name, it opens the named file (in text mode),\nand sets its handle as the default input file. When called with a file\nhandle, it simply sets this file handle as the default input file. When\ncalled without parameters, it returns the current default input file.\n\nIn case of errors this function raises the error, instead of returning an\nerror code.
insert table.insert(list, [pos, ] value)\nInserts element `value` at position `pos` in `list`, shifting up the elements\n`list[pos], list[pos+1], Â·Â·Â·, list[#list]`. The default value for `pos` is\n`#list+1`, so that a call `table.insert(t,x)` inserts `x` at the end of list\n`t`.
insert_text buffer.insert_text(buffer, pos, text)\nInserts string *text* at position *pos* or the caret if *pos* is `-1`.\nIf the caret is after the *pos*, it is moved appropriately, but not scrolled\ninto view.\n@param buffer The global buffer.\n@param pos The position in *buffer* to insert text at, or `-1` for the\n  current position.\n@param text The text to insert.
integer lexer.integer (pattern)\nA pattern matching a decimal, hexadecimal, or octal number.
io _G.io (module)\nLua io module.
ipairs _G.ipairs(t)\nIf `t` has a metamethod `__ipairs`, calls it with `t` as argument and returns\nthe first three results from the call.\n\nOtherwise, returns three values: an iterator function, the table `t`, and 0,\nso that the construction\n\n  for i,v in ipairs(t) do *body* end\n\nwill iterate over the pairs (`1,t[1]`), (`2,t[2]`), ..., up to the\nfirst integer key absent from the table.
java _G.keys.java (table)\nContainer for Java-specific key bindings.
java _G.snippets.java (table)\nContainer for Java-specific snippets.
java _M.java (module)\nThe java module.\nIt provides utilities for editing Java code.
join_lines _M.textadept.editing.join_lines()\nJoins the currently selected lines or the current line with the line below\nit.\nAs long as any part of a line is selected, the entire line is eligible for\njoining.
keys _G.keys (module)\nManages key bindings in Textadept.
keys _G.keys (table)\nMap of key bindings to commands, with language-specific key tables assigned\nto a lexer name key.
keys _M.textadept.keys (module)\nDefines key commands for Textadept.\nThis set of key commands is pretty standard among other text editors. If\napplicable, load this module second to last in your *~/.textadept/init.lua*,\nbefore `_M.textadept.menu`.
last_char_includes lexer.last_char_includes(s)\nCreates and returns a pattern that matches any previous non-whitespace\ncharacter in *s* and consumes no input.\n@param s String character set like one passed to `lpeg.S()`.\n@usage local regex = l.last_char_includes('+-*!%^&|=,([{') *\n  l.delimited_range('/', '\\')\n@return pattern
layout_cache buffer.layout_cache (number)\nThe layout cache mode.\n\n* `_SCINTILLA.constants.SC_CACHE_NONE` (0)\n  No lines are cached.\n* `_SCINTILLA.constants.SC_CACHE_CARET` (1)\n  Cache the line containing the caret.\n* `_SCINTILLA.constants.SC_CACHE_PAGE` (2)\n  Cache visible lines.\n* `_SCINTILLA.constants.SC_CACHE_DOCUMENT` (3)\n  Cache all lines in the buffer.\n\nThe default value is `1`.
ldexp math.ldexp(m, e)\nReturns 'm2^e' (`e` should be an integer).
len string.len(s)\nReceives a string and returns its length. The empty string `""` has\nlength 0. Embedded zeros are counted, so `"a\000bc\000"` has length 5.
length buffer.length (number, Read-only)\nThe number of bytes in the buffer.
lex lexer.lex(text, init_style)\nLexes a chunk of text *text* with an initial style number of *init_style*.\nCalled by the Scintilla lexer; **do not call from Lua**. If the lexer has a\n`_LEXBYLINE` flag set, the text is lexed one line at a time. Otherwise the\ntext is lexed as a whole.\n@param text The text in the buffer to lex.\n@param init_style The current style. Multiple-language lexers use this to\n  determine which language to start lexing in.\n@return table of token names and positions.
lexer _G.lexer (module)\nLexes Scintilla documents with Lua and LPeg.
lexer buffer.lexer (number)\nThe numeric ID of the Scintilla lexer used by the buffer.
lexer lexer.lexer (table)\nIndividual lexer fields.
lexer_language buffer.lexer_language (string)\nThe name of the Scintilla lexer used by the buffer.\nYou probably want to use `buffer:get_lexer()` instead.
lexers _M.textadept.mime_types.lexers (table)\nList of available lexers.
lfs _G.lfs (module)\nLua lfs module.
line_copy buffer.line_copy(buffer)\nCopies the current line to the clipboard.\n@param buffer The global buffer.
line_count buffer.line_count (number, Read-only)\nThe number of lines in the buffer.\nThere is always at least one.
line_cut buffer.line_cut(buffer)\nCuts the current line to the clipboard.\n@param buffer The global buffer.
line_delete buffer.line_delete(buffer)\nDeletes the current line.\n@param buffer The global buffer.
line_down buffer.line_down(buffer)\nMoves the caret down one line.\n@param buffer The global buffer.
line_down_extend buffer.line_down_extend(buffer)\nMoves the caret down one line, extending the selected text to the new\nposition.\n@param buffer The global buffer.
line_down_rect_extend buffer.line_down_rect_extend(buffer)\nMoves the caret down one line, extending the rectangular selection to the new\nposition.\n@param buffer The global buffer.
line_duplicate buffer.line_duplicate(buffer)\nDuplicates the current line below the line.\n@param buffer The global buffer.
line_end buffer.line_end(buffer)\nMoves the caret to the end of the current line.\n@param buffer The global buffer.
line_end_display buffer.line_end_display(buffer)\nMoves the caret to the end of the current wrapped line.\n@param buffer The global buffer.
line_end_display_extend buffer.line_end_display_extend(buffer)\nMoves the caret to the end of the current wrapped line, extending the\nselected text to the new position.\n@param buffer The global buffer.
line_end_extend buffer.line_end_extend(buffer)\nMoves the caret to the end of the current line, extending the selected text\nto the new position.\n@param buffer The global buffer.
line_end_position buffer.line_end_position (table, Read-only)\nTable of positions at the ends of lines, but before any end of line\ncharacters, for line numbers starting from zero.
line_end_rect_extend buffer.line_end_rect_extend(buffer)\nMoves the caret to the end of the current line, extending the rectangular\nselection to the new position.\n@param buffer The global buffer.
line_end_wrap buffer.line_end_wrap(buffer)\nMoves the caret to the end of the current wrapped line, or if already there,\nto the end of the actual line.\n@param buffer The global buffer.
line_end_wrap_extend buffer.line_end_wrap_extend(buffer)\nLike `buffer:line_end_wrap()`, but extends the selected text to the new\nposition.\n@param buffer The global buffer.
line_from_position buffer.line_from_position(buffer, pos)\nReturns the line number containing position *pos*.\nReturns `0` if *pos* is less than 0 or `buffer.line_count` if *pos* is\ngreater than `buffer.length`.\n@param buffer The global buffer.\n@param pos The position in *buffer* to get the line number of.\n@return number
line_indent_position buffer.line_indent_position (table, Read-only)\nTable of positions at the ends of line indentation for line numbers\nstarting from zero.
line_indentation buffer.line_indentation (table)\nTable of line indentation amounts, measured in character columns, for line\nnumbers starting from zero.
line_length buffer.line_length(buffer, line)\nReturns the number of characters on line number *line*, including end of line\ncharacters.\nTo get line length excluding end of line characters, use\n`buffer.line_end_position[line] - buffer:position_from_line(line)`.\n@param buffer The global buffer.\n@param line The line number in *buffer* to get the length of.\n@return number
line_scroll buffer.line_scroll(buffer, columns, lines)\nScroll right *columns* columns and down *lines* lines.\nNegative values are allowed.\n@param buffer The global buffer.\n@param columns The number of columns to scroll horizontally.\n@param lines The number of lines to scroll vertically.
line_scroll_down buffer.line_scroll_down(buffer)\nScroll the buffer down one line, keeping the caret visible.\n@param buffer The global buffer.
line_scroll_up buffer.line_scroll_up(buffer)\nScroll the buffer up one line, keeping the caret visible.\n@param buffer The global buffer.
line_state buffer.line_state (table)\nTable of integer line states for line numbers starting from zero.\nLine states are used for storing longer lived parse states per line. They\nare available in addition to the 8 bits of styling information per\ncharacter.
line_transpose buffer.line_transpose(buffer)\nSwitch the current line with the previous one.\n@param buffer The global buffer.
line_up buffer.line_up(buffer)\nMoves the caret up one line.\n@param buffer The global buffer.
line_up_extend buffer.line_up_extend(buffer)\nMoves the caret up one line, extending the selected text to the new position.\n@param buffer The global buffer.
line_up_rect_extend buffer.line_up_rect_extend(buffer)\nMoves the caret up one line, extending the rectangular selection to the new\nposition.\n@param buffer The global buffer.
line_visible buffer.line_visible (table, Read-only)\nTable of flags indicating whether or not lines are visible for line numbers\nstarting from zero.
lines file:lines(Â·Â·Â·)\nReturns an iterator function that, each time it is called, reads the file\naccording to the given formats. When no format is given, uses "*l" as a\ndefault. As an example, the construction\n\n  for c in file:lines(1) do <em>body</em> end\n\nwill iterate over all characters of the file, starting at the current\nposition. Unlike `io.lines`, this function does not close the file when the\nloop ends.\n\nIn case of errors this function raises the error, instead of returning an\nerror code.
lines io.lines([filename Â·Â·Â·])\nOpens the given file name in read mode and returns an iterator function that\nworks like `file:lines(Â·Â·Â·)` over the opened file. When the iterator function\ndetects -- the end of file, it returns nil (to finish the loop) and\nautomatically closes the file.\n\nThe call `io.lines()` (with no file name) is equivalent to\n`io.input():lines()`; that is, it iterates over the lines of the default\ninput file. In this case it does not close the file when the loop ends.\n\nIn case of errors this function raises the error, instead of returning an\nerror code.
lines_join buffer.lines_join(buffer)\nJoins the lines in the target range, inserting spaces in-between joined\nwords.\n@param buffer The global buffer.
lines_on_screen buffer.lines_on_screen (number, Read-only)\nThe number of completely visible lines in the view.\nIt is possible to have a partial line visible at the bottom of the view.
lines_split buffer.lines_split(buffer, pixel_width)\nSplits the lines in the target range into lines of width at most\n*pixel_width* or the width of the view if *pixel_width* is `0`.\n@param buffer The global buffer.\n@param pixel_width The pixel width to split lines at. When `0`, uses the\n  width of the view.
load _G.load(ld [, source [, mode [, env]]])\nLoads a chunk.\n\nIf `ld` is a string, the chunk is this string. If `ld` is a function, `load`\ncalls it repeatedly to get the chunk pieces. Each call to `ld` must return a\nstring that concatenates with previous results. A return of an empty string,\nnil, or no value signals the end of the chunk.\n\nIf there are no syntactic errors, returns the compiled chunk as a function;\notherwise, returns <b>nil</b> plus the error message.\n\nIf the resulting function has upvalues, the first upvalue is set to the value\nof `env`, if that parameter is given, or to the value of the global\nenvironment. (When you load a main chunk, the resulting function will always\nhave exactly one upvalue, the `_ENV` variable (see Â§2.2). When you load a\nbinary chunk created from a function (see `string.dump`), the resulting\nfunction can have arbitrary upvalues.)\n\n`source` is used as the source of the chunk for error messages and debug\ninformation (see Â§4.9). When absent, it defaults to `ld`, if `ld` is a\nstring, or to "`=(load)`" otherwise.\n\nThe string `mode` controls whether the chunk can be text or binary (that is,\na precompiled chunk). It may be the string "`b`" (only binary chunks), "`t`"\n(only text chunks), or "`bt`" (both binary and text). The default is "`bt`".
load _M.textadept.session.load(filename)\nLoads the Textadept session file *filename* or prompts the user to select\none, returning `true` if the session file was opened and read.\nTextadept restores split views, opened buffers, cursor information, and\nrecent files.\n@param filename Optional absolute path to the session file to load. If `nil`,\n  the user is prompted for one.\n@usage _M.textadept.session.load(filename)\n@return `true` if the session file was opened and read; `false` otherwise.\n@see DEFAULT_SESSION
load lexer.load(lexer_name)\nInitializes or loads lexer *lexer_name* and returns the lexer object.\nScintilla calls this function to load a lexer. Parent lexers also call this\nfunction to load child lexers and vice-versa.\n@param lexer_name The name of the lexing language.\n@return lexer object
load_ctags _M.textadept.adeptsense.load_ctags(sense, tag_file, nolocations)\nLoads the Ctags file *tag_file* for autocompletions.\nIf *nolocations* is `true`, `sense:goto_ctag()` cannot be used with this set\nof tags. It is recommended to pass `-n` to `ctags` in order to use line\nnumbers instead of text patterns to locate tags. This will greatly reduce\nmemory usage for a large number of symbols if `nolocations` is `false`.\n@param sense The Adeptsense returned by `adeptsense.new()`.\n@param tag_file The path of the Ctags file to load.\n@param nolocations Optional flag indicating whether or not to discard the\n  locations of the tags for use by `sense:goto_ctag()`. The default value is\n  `false`.
load_project _M.rails.load_project(utf8_dir)\nOpens a Rails project for snapopen.\nIf not directory is provided, the user is prompted for one.\n@param utf8_dir The UTF-8 Rails project directory.
loaded package.loaded (table)\nA table used by `require` to control which modules are already loaded. When\nyou require a module `modname` and `package.loaded[modname]` is not false,\n`require` simply returns the value stored there.\nThis variable is only a reference to the real table; assignments to this\nvariable do not change the table used by `require`.
loadfile _G.loadfile([filename [, mode [, env]]])\nSimilar to `load`, but gets the chunk from file `filename` or from the\nstandard input, if no file name is given.
loadlib package.loadlib(libname, funcname)\nDynamically links the host program with the C library `libname`.\n\nIf `funcname` is "`*`", then it only links with the library, making the\nsymbols exported by the library available to other dynamically linked\nlibraries. Otherwise, it looks for a function `funcname` inside the library\nand returns this function as a C function. So, `funcname` must follow the\n`lua_CFunction` prototype (see `lua_CFunction`).\n\nThis is a low-level function. It completely bypasses the package and module\nsystem. Unlike `require`, it does not perform any path searching and does\nnot automatically adds extensions. `libname` must be the complete file name\nof the C library, including if necessary a path and an extension. `funcname`\nmust be the exact name exported by the C library (which may depend on the\nC compiler and linker used).\n\nThis function is not supported by Standard C. As such, it is only available\non some platforms (Windows, Linux, Mac OS X, Solaris, BSD, plus other Unix\nsystems that support the `dlfcn` standard).
locale lpeg.locale([table])\nReturns a table with patterns for matching some character classes according\nto the current locale. The table has fields named `alnum`, `alpha`, `cntrl`,\n`digit`, `graph`, `lower`, `print`, `punct`, `space`, `upper`, and `xdigit`,\neach one containing a correspondent pattern. Each pattern matches any single\ncharacter that belongs to its class.\n\nIf called with an argument `table`, then it creates those fields inside the\ngiven table and returns that table.
locations _M.textadept.adeptsense.locations (table)\nA list of the locations of known symbols, normally populated by\n`load_ctags()`.
lock lfs.lock(filehandle, mode[, start[, length]])\nLocks a file or a part of it. This function works on open files; the file\nhandle should be specified as the first argument. The string mode could be\neither r (for a read/shared lock) or w (for a write/exclusive lock). The\noptional arguments start and length can be used to specify a starting point\nand its length; both should be numbers.\n\nReturns true if the operation was successful; in case of error, it returns\nnil plus an error string.
lock_dir lfs.lock_dir(path, [seconds_stale])\nCreates a lockfile (called lockfile.lfs) in path if it does not exist and\nreturns the lock. If the lock already exists checks it it's stale, using the\nsecond parameter (default for the second parameter is INT_MAX, which in\npractice means the lock will never be stale. To free the the lock call\nlock:free().\n\nIn case of any errors it returns nil and the error message. In particular,\nif the lock exists and is not stale it returns the "File exists" message.
log math.log(x [, base])\nReturns the logarithm of `x` in the given base. The default for `base` is 'e'\n(so that the function returns the natural logarithm of `x`).
lower lexer.lower (pattern)\nA pattern matching any lower case character (`a-z`).
lower string.lower(s)\nReceives a string and returns a copy of this string with all uppercase\nletters changed to lowercase. All other characters are left unchanged. The\ndefinition of what an uppercase letter is depends on the current locale.
lower_case buffer.lower_case(buffer)\nConverts the selected text to lower case letters.\n@param buffer The global buffer.
lpeg _G.lpeg (module)\nLua lpeg module.
lrotate bit32.lrotate(x, disp)\nReturns the number `x` rotated `disp` bits to the left. The number `disp` may\nbe any representable integer.\n\nFor any valid displacement, the following identity holds:\n\n  assert(bit32.lrotate(x, disp) == bit32.lrotate(x, disp % 32))\n\nIn particular, negative displacements rotate to the right.
lshift bit32.lshift(x, disp)\nReturns the number `x` shifted `disp` bits to the left. The number `disp` may\nbe any representable integer. Negative displacements shift to the right. In\nany direction, vacant bits are filled with zeros. In particular,\ndisplacements with absolute values higher than 31 result in zero (all bits\nare shifted out).\n\nFor positive displacements, the following equality holds:\n\n  assert(bit32.lshift(b, disp) == (b * 2^disp) % 2^32)
lua _G.keys.lua (table)\nContainer for Lua-specific key bindings.
lua _G.snippets.lua (table)\nContainer for Lua-specific snippets.
lua _M.lua (module)\nThe lua module.\nIt provides utilities for editing Lua code.
lua gui.find.lua (bool)\nInterpret search text as a Lua pattern.\nThe default value is `false`.
lua_pattern_label_text gui.find.lua_pattern_label_text (string, Write-only)\nThe text of the "Lua pattern" label.\nThis is primarily used for localization.
main_selection buffer.main_selection (number)\nThe main, or most recent, selection.\nOnly an existing selection can be made main.
margin_cursor_n buffer.margin_cursor_n (table)\nTable of cursors shown for margin numbers from zero to four.\n\n* `_SCINTILLA.constants.SC_CURSORARROW` (2)\n  Normal arrow cursor.\n* `_SCINTILLA.constants.SC_CURSORREVERSEARROW` (7)\n  Reversed arrow cursor.\n\nThe default values are `7`.
margin_left buffer.margin_left (number)\nThe size in pixels of the left margin of the buffer text.\nThe default value is `1`.
margin_mask_n buffer.margin_mask_n (table)\nTable of marker bit-masks for showing margin markers for margin numbers\nfrom zero to four.\nThe default values are `0`, `0x1FFFFFF`, `0`, `0`, and `0`, for a line\nmargin and logical marker margin.
margin_options buffer.margin_options (number)\nA bit-mask of margin option settings.\n\n* `_SCINTILLA.constants.SC_MARGINOPTION_NONE` (0)\n  None.\n* `_SCINTILLA.constants.SC_MARGINOPTION_SUBLINESELECT` (1)\n  Select only the sub-line of the wrapped line on margin click.\n\nThe default value is `0`.
margin_right buffer.margin_right (number)\nThe size in pixels of the right margin of the buffer text.\nThe default value is `1`.
margin_sensitive_n buffer.margin_sensitive_n (table)\nTable of flags indicating whether or not mouse clicks in margins emit\n`MARGIN_CLICK` events for margin numbers from zero to four.\nThe default values are `false`.
margin_style buffer.margin_style (table)\nTable of style numbers for text margin line numbers starting from zero.\nOnly some style attributes are active in text margins: font,\nsize/size_fractional, bold/weight, italics, fore, back, and character_set.
margin_style_offset buffer.margin_style_offset (number)\nThe beginning of the range of style numbers used for margin text.\nAlways set this to the result of\n`buffer.allocate_extended_styles`.\nMargin styles may be completely separated from standard text styles by\nsetting a style offset. For example, when set to `256`, margin styles are\nnumbered from `256` upto `511` so they do not overlap styles set by lexers.\nEach style number set with `margin_style` has the offset added before\nlooking up the style.
margin_text buffer.margin_text (table)\nTable of text in the text margin for line numbers starting from zero.
margin_text_clear_all buffer.margin_text_clear_all(buffer)\nClears margin text on all lines.\n@param buffer The global buffer.
margin_type_n buffer.margin_type_n (table)\nTable of margin types for margin numbers from zero to four.\n\n* `_SCINTILLA.constants.SC_MARGIN_SYMBOL` (0)\n  A symbol margin.\n* `_SCINTILLA.constants.SC_MARGIN_NUMBER` (1)\n  A line number margin.\n* `_SCINTILLA.constants.SC_MARGIN_BACK` (2)\n  A symbol margin whose background color matches the default text\n  background color.\n* `_SCINTILLA.constants.SC_MARGIN_FORE` (3)\n  A symbol margin whose foreground color matches the default text\n  foreground color.\n* `_SCINTILLA.constants.SC_MARGIN_TEXT` (4)\n  A text margin.\n* `_SCINTILLA.constants.SC_MARGIN_RTEXT` (5)\n  A right-justified text margin.\n\nThe default values are `true`, `false`, `false`, `false`, and `false`, for\na line number margin and symbol margins.
margin_width_n buffer.margin_width_n (table)\nTable of margin widths in pixels for margin numbers from zero to four.
marker_add buffer.marker_add(buffer, line, marker_num)\nAdds marker number *marker_num*, in the range of `0` to `31`, on line number\n*line*, returning a marker handle which can be used in\n`buffer:marker_delete_handle()` and `buffer:marker_line_from_handle()`, or\n`-1` if the marker cannot be added.\n@param buffer The global buffer.\n@param line The line number to add the marker on.\n@param marker_num The marker number in the range of `0` to `31` to add.\n@return number
marker_add_set buffer.marker_add_set(buffer, line, marker_mask)\nAdds the markers specified in the marker bit-mask *marker_mask* to line\nnumber *line*.\nBit 0 is set to add marker 0, bit 1 for marker 1, etc., up to marker 31.\n@param buffer The global buffer.\n@param line The line number to add the markers on.\n@param marker_mask The mask of markers to set. Set bit 0 to set marker 0, bit\n  1 for marker 1 and so on.
marker_alpha buffer.marker_alpha (table, Write-only)\nTable of alpha values, ranging from `0` (transparent) to `255` (opaque),\nused for markers drawn in the text area, not the margin, for markers\nnumbers from `0` to `31`.\nThe default values are `256`, for no alpha.
marker_back buffer.marker_back (table, Write-only)\nTable of background colors, in "0xBBGGRR" format, used for marker numbers\nfrom `0` to `31`.
marker_back_selected buffer.marker_back_selected (table, Write-only)\nTable of background colors, in "0xBBGGRR" format, used for markers whose\nfolding blocks are selected for marker numbers from `0` to `31`.\nThe default values are `0x0000FF`.
marker_define buffer.marker_define(buffer, marker_num, marker_symbol)\nSets the symbol *marker_symbol* shown in the margin for marker number\n*marker_num*, in the range of `0` to `31`.\n@param buffer The global buffer.\n@param marker_num The marker number in the range of `0` to `31` to set\n  *marker_symbol* for.\n@param marker_symbol The marker symbol: `_SCINTILLA.constants.SC_MARK_*`.\n@see _SCINTILLA.next_marker_number
marker_define_pixmap buffer.marker_define_pixmap(buffer, marker_num, pixmap)\nDefines XPM image *pixmap* for marker number *marker_num*, in the range of\n`0` to `31`.\nPixmap markers use the `_SCINTILLA.constants.SC_MARK_PIXMAP` marker symbol.\n@param buffer The global buffer.\n@param marker_num The marker number in the range of `0` to `31` to define\n  pixmap *pixmap* for.\n@param pixmap The string pixmap data.
marker_define_rgba_image buffer.marker_define_rgba_image(buffer, marker_num, pixels)\nDefines RGBA image *pixels* for marker number *marker_num*, in the range of\n`0` to `31`.\nRGBA image markers use the `_SCINTILLA.constants.SC_MARK_RGBAIMAGE` marker\nsymbol. The dimensions for *pixels*, `buffer.rgba_image_width` and\n`buffer.rgba_image_height`, must be already defined. *pixels* is a sequence\nof 4 byte pixel values (red, blue, green, and alpha) defining the image line\nby line starting at the top-left pixel.\n@param buffer The global buffer.\n@param marker_num The marker number in the range of `0` to `31` to define\n  RGBA data *pixels* for.\n@param pixels The string sequence of 4 byte pixel values starting with the\n  pixels for the top line, with the leftmost pixel first, then continuing\n  with the pixels for subsequent lines. There is no gap between lines for\n  alignment reasons. Each pixel consists of, in order, a red byte, a green\n  byte, a blue byte and an alpha byte. The colour bytes are not premultiplied\n  by the alpha value. That is, a fully red pixel that is 25% opaque will be\n  `[FF, 00, 00, 3F]`.
marker_delete buffer.marker_delete(buffer, line, marker_num)\nDeletes marker number *marker_num*, in the range of `0` to `31` or `-1` for\nall markers, from line number *line*.\n@param buffer The global buffer.\n@param line The line number to delete the marker on.\n@param marker_num The marker number in the range of `0` to `31` to delete\n  from *line*, or `-1` to delete all markers from the line.
marker_delete_all buffer.marker_delete_all(buffer, marker_num)\nDeletes marker number *marker_num*, in the range of `0` to `31` or `-1` for\nall markers, from all lines in the buffer.\n@param buffer The global buffer.\n@param marker_num The marker number in the range of `0` to `31` to delete\n  from all lines, or `-1` to delete all markers from all lines.
marker_delete_handle buffer.marker_delete_handle(buffer, handle)\nDeletes the marker with handle *handle* returned by `buffer:marker_add()`.\n@param buffer The global buffer.\n@param handle The identifier of a marker returned by `buffer:marker_add()`.
marker_enable_highlight buffer.marker_enable_highlight(buffer, enabled)\nHighlights the margin fold markers for the current fold block if *enabled* is\n`true`.\n@param buffer The global buffer.\n@param enabled Whether or not to enable highlight.
marker_fore buffer.marker_fore (table, Write-only)\nTable of foreground colors, in "0xBBGGRR" format, used for marker numbers\nfrom `0` to `31`.
marker_get buffer.marker_get(buffer, line)\nReturns a bit-mask representing which markers are set line number *line*.\nBit 0 is set if marker 0 is set, bit 1 for marker 1, etc.\n@param buffer The global buffer.\n@param line The line number to get markers on.\n@return number
marker_line_from_handle buffer.marker_line_from_handle(buffer, handle)\nReturns the line number the marker with handle *handle*, returned by\n`buffer:marker_add()`, is on, or `-1`.\n@param buffer The global buffer.\n@param handle The identifier of a marker returned by `buffer:marker_add()`.\n@return number
marker_next buffer.marker_next(buffer, start_line, marker_mask)\nReturns the first line number starting at line number *start_line* that has\nall of the markers represented by marker bit-mask *marker_mask* set on, or\n`-1`.\nBit 0 is set if marker 0 is set, bit 1 for marker 1, etc., up to marker 31.\n@param buffer The global buffer.\n@param start_line The start line to search from.\n@param marker_mask The mask of markers to find. Set bit 0 to find marker 0,\n  bit 1 for marker 1 and so on.\n@return number
marker_previous buffer.marker_previous(buffer, start_line, marker_mask)\nReturns the last line number before or on line number *start_line* that has\nall of the markers represented by marker bit-mask *marker_mask* set on, or\n`-1`.\nBit 0 is set if marker 0 is set, bit 1 for marker 1, etc., up to marker 31.\n@param buffer The global buffer.\n@param start_line The start line to search from.\n@param marker_mask The mask of markers to find. Set bit 0 to find marker 0,\n  bit 1 for marker 1 and so on.\n@return number
marker_symbol_defined buffer.marker_symbol_defined(buffer, marker_num)\nReturns the symbol defined for marker number *marker_num*, in the range of\n`0` to `31`, used in `buffer:marker_define()`,\n`buffer:marker_define_pixmap()`, or `buffer:marker_define_rgba_image()`.\n@param buffer The global buffer.\n@param marker_num The marker number in the range of `0` to `31` to get the\n  symbol of.\n@return number
match lpeg.match(pattern, subject [, init])\nThe matching function. It attempts to match the given pattern against the\nsubject string. If the match succeeds, returns the index in the subject of\nthe first character after the match, or the captured values (if the pattern\ncaptured any value).\n\nAn optional numeric argument `init` makes the match start at that position in\nthe subject string. As usual in Lua libraries, a negative value counts from\nthe end.\n\nUnlike typical pattern-matching functions, match works only in anchored mode;\nthat is, it tries to match the pattern with a prefix of the given subject\nstring (at position `init`), not with an arbitrary substring of the subject.\nSo, if we want to find a pattern anywhere in a string, we must either write a\nloop in Lua or write a pattern that matches anywhere. This second approach is\neasy and quite efficient; see examples.
match string.match(s, pattern [, init])\nLooks for the first *match* of `pattern` in the string `s`. If it\nfinds one, then `match` returns the captures from the pattern; otherwise\nit returns nil. If `pattern` specifies no captures, then the whole match\nis returned. A third, optional numerical argument `init` specifies where\nto start the search; its default value is 1 and can be negative.
match_brace _M.textadept.editing.match_brace(select)\nGoes to the current character's matching brace, selecting the text in-between\nif *select* is `true`.\n@param select Optional flag indicating whether or not to select the text\n  between matching braces. The default value is `false`.
match_case gui.find.match_case (bool)\nSearches are case-sensitive.\nThe default value is `false`.
match_case_label_text gui.find.match_case_label_text (string, Write-only)\nThe text of the "Match case" label.\nThis is primarily used for localization.
math _G.math (module)\nLua math module.
max math.max(x, Â·Â·Â·)\nReturns the maximum value among its arguments.
max_line_state buffer.max_line_state (number, Read-only)\nThe last line number with a non-zero line state.
menu _M.textadept.menu (module)\nDefines the menus used by Textadept.\nIf applicable, load this module last in your *~/.textadept/init.lua*, after\n`_M.textadept.keys` since it looks up defined key commands to show them in\nmenus.
menu gui.menu(menu_table)\nLow-level function for creating a menu from table *menu_table* and returning\nthe userdata.\nYou probably want to use the higher-level `_M.textadept.menu.set_menubar()`\nor `_M.textadept.menu.set_contextmenu()` functions. Emits a `MENU_CLICKED`\nevent when a menu item is selected.\n@param menu_table A table defining the menu. It is an ordered list of tables\n  with a string menu item, integer menu ID, and optional GDK keycode and\n  modifier mask. The latter two are used to display key shortcuts in the\n  menu. '_' characters are treated as a menu mnemonics. If the menu item is\n  empty, a menu separator item is created. Submenus are just nested\n  menu-structure tables. Their title text is defined with a `title` key.\n@usage gui.menu{{'_New', 1}, {'_Open', 2}, {''}, {'_Quit', 4}}\n@usage gui.menu{{'_New', 1, string.byte('n'), 4}} -- 'Ctrl+N'\n@see events.MENU_CLICKED\n@see _M.textadept.menu.set_menubar\n@see _M.textadept.menu.set_contextmenu
menubar gui.menubar (table)\nA table of menus defining a menubar. (Write-only)\n@see _M.textadept.menu.set_menubar
mime_types _M.textadept.mime_types (module)\nHandles file type detection for Textadept.
min math.min(x, Â·Â·Â·)\nReturns the minimum value among its arguments.
mkdir lfs.mkdir(dirname)\nCreates a new directory. The argument is the name of the new directory.\n\nReturns true if the operation was successful; in case of error, it returns\nnil plus an error string.
modf math.modf(x)\nReturns two numbers, the integral part of `x` and the fractional part of\n`x`.
modify buffer.modify (bool)\nWhether or not the buffer has unsaved changes.\nUnlike `buffer.dirty`, this field is accessible only from the\nglobal buffer.
mouse_dwell_time buffer.mouse_dwell_time (number)\nThe number of milliseconds the mouse must idle in order to generate a\n`DWELL_START` event, or `_SCINTILLA.constants.SC_TIME_FOREVER` to never\ngenerate one.
move_caret_inside_view buffer.move_caret_inside_view(buffer)\nMoves the caret to be visible inside the view if it is not already, removing\nany selections.\n@param buffer The global buffer.
move_selected_lines_down buffer.move_selected_lines_down(buffer)\nMoves the selected lines down one line.\n@param buffer The global buffer.
move_selected_lines_up buffer.move_selected_lines_up(buffer)\nMoves the selected lines up one line.\n@param buffer The global buffer.
multi_paste buffer.multi_paste (number)\nThe multiple selection paste mode.\n\n* `_SCINTILLA.constants.SC_MULTIPASTE_ONCE` (0)\n  Paste into only the main selection.\n* `_SCINTILLA.constants.SC_MULTIPASTE_EACH` (1)\n  Paste into all selections.\n\nThe default value is `0`.
multiple_selection buffer.multiple_selection (bool)\nEnable multiple selection.\nThe default value is `false`.
nested_pair lexer.nested_pair(start_chars, end_chars, end_optional)\nSimilar to `delimited_range()`, but allows for multi-character, nested\ndelimiters *start_chars* and *end_chars*. *end_optional* indicates whether or\nnot unterminated ranges match.\nWith single-character delimiters, this function is identical to\n`delimited_range(start_chars..end_chars, nil, end_optional, true)`.\n@param start_chars The string starting a nested sequence.\n@param end_chars The string ending a nested sequence.\n@param end_optional Optional flag indicating whether or not an ending\n  delimiter is optional or not. If `true`, the range begun by the start\n  delimiter matches until an end delimiter or the end of the input is\n  reached.\n@usage local nested_comment = l.nested_pair('/*', '*/', true)\n@return pattern\n@see delimited_range
new _M.textadept.adeptsense.new(lang)\nCreates and returns a new Adeptsense for *lang* name.\nOnly one sense can exist per language.\n@param lang The lexer language name to create an Adeptsense for.\n@usage local lua_sense = _M.textadept.adeptsense.new('lua')\n@return adeptsense
new buffer.new()\nCreates and returns a new buffer.\nEmits a `BUFFER_NEW` event.\n@return the new buffer.\n@see events.BUFFER_NEW
new_line buffer.new_line(buffer)\nInserts a new line character(s) at the caret depending on the end of line\nmode.\n@param buffer The global buffer.
newline lexer.newline (pattern)\nA pattern matching any newline characters.
next _G.next(table [, index])\nAllows a program to traverse all fields of a table. Its first argument is\na table and its second argument is an index in this table. `next` returns\nthe next index of the table and its associated value. When called with nil\nas its second argument, `next` returns an initial index and its associated\nvalue. When called with the last index, or with nil in an empty table, `next`\nreturns nil. If the second argument is absent, then it is interpreted as\nnil. In particular, you can use `next(t)` to check whether a table is empty.\n\nThe order in which the indices are enumerated is not specified, *even for\nnumeric indices*. (To traverse a table in numeric order, use a numerical\n`for`.)\n\nThe behavior of `next` is undefined if, during the traversal, you assign any\nvalue to a non-existent field in the table. You may however modify existing\nfields. In particular, you may clear existing fields.
next_indic_number _SCINTILLA.next_indic_number()\nReturns a unique indicator number for use with custom indicators.\nUse this function for custom indicators in order to prevent clashes with\nidentifiers of other custom indicators.\n@usage local indic_num = _SCINTILLA.next_indic_number()\n@see buffer.indic_style
next_marker_number _SCINTILLA.next_marker_number()\nReturns a unique marker number for use with `buffer.marker_define()`.\nUse this function for custom markers in order to prevent clashes with\nidentifiers of other custom markers.\n@usage local marknum = _SCINTILLA.next_marker_number()\n@see buffer.marker_define
next_user_list_type _SCINTILLA.next_user_list_type()\nReturns a unique user list type for use with `buffer.user_list_show()`.\nUse this function for custom user lists in order to prevent clashes with\nlist identifiers of other custom user lists.\n@usage local list_type = _SCINTILLA.next_user_list_type()\n@see buffer.user_list_show
nonnewline lexer.nonnewline (pattern)\nA pattern matching any non-newline character.
nonnewline_esc lexer.nonnewline_esc (pattern)\nA pattern matching any non-newline character excluding newlines escaped\nwith '\'.
oct_num lexer.oct_num (pattern)\nA pattern matching an octal number.
open io.open(filename [, mode])\nThis function opens a file, in the mode specified in the string `mode`. It\nreturns a new file handle, or, in case of errors, nil plus an error message.\n\nThe `mode` string can be any of the following:\n  "r": read mode (the default);\n  "w": write mode;\n  "a": append mode;\n  "r+": update mode, all previous data is preserved;\n  "w+": update mode, all previous data is erased;\n  "a+": append update mode, previous data is preserved, writing is only\n        allowed at the end of file.\n\nThe `mode` string can also have a '`b`' at the end, which is needed in\nsome systems to open the file in binary mode.
open_file io.open_file(utf8_filenames)\nOpens *utf8_filenames*, a "\n" delimited string of UTF-8-encoded filenames,\nor user-selected files.\nEmits a `FILE_OPENED` event.\n@param utf8_filenames Optional string list of UTF-8-encoded filenames to\n  open. If `nil`, the user is prompted with a fileselect dialog.\n@see _G.events
open_recent_file io.open_recent_file()\nPrompts the user to open a recently opened file.\n@see recent_files
os _G.os (module)\nLua os module.
output io.output([file])\nSimilar to `io.input`, but operates over the default output file.
overtype buffer.overtype (bool)\nEnable overtype mode, where typed characters overwrite existing ones.\nThe default value is `false`.
pack table.pack(Â·Â·Â·)\nReturns a new table with all parameters stored into keys 1, 2, etc. and with\na field "`n`" with the total number of parameters. Note that the resulting\ntable may not be a sequence.
package _G.package (module)\nLua package module.
page_down buffer.page_down(buffer)\nMoves the caret one page down.\n@param buffer The global buffer.
page_down_extend buffer.page_down_extend(buffer)\nMoves the caret one page down, extending the selected text to the new\nposition.\n@param buffer The global buffer.
page_down_rect_extend buffer.page_down_rect_extend(buffer)\nMoves the caret one page down, extending the rectangular selection to the new\nposition.\n@param buffer The global buffer.
page_up buffer.page_up(buffer)\nMoves the caret one page up.\n@param buffer The global buffer.
page_up_extend buffer.page_up_extend(buffer)\nMoves the caret one page up, extending the selected text to the new position.\n@param buffer The global buffer.
page_up_rect_extend buffer.page_up_rect_extend(buffer)\nMoves the caret one page up, extending the rectangular selection to the new\nposition.\n@param buffer The global buffer.
pairs _G.pairs(t)\nIf `t` has a metamethod `__pairs`, calls it with `t` as argument and returns\nthe first three results from the call.\n\nOtherwise, returns three values: the `next` function, the table `t`, and nil,\nso that the construction\n\n  for k,v in pairs(t) do *body* end\n\nwill iterate over all keyâ€“value pairs of table `t`.\n\nSee function `next` for the caveats of modifying the table during its\ntraversal.
para_down buffer.para_down(buffer)\nMoves the caret one paragraph down.\nParagraphs are surrounded by one or more blank lines.\n@param buffer The global buffer.
para_down_extend buffer.para_down_extend(buffer)\nMoves the caret one paragraph down, extending the selected text to the new\nposition.\nParagraphs are surrounded by one or more blank lines.\n@param buffer The global buffer.
para_up buffer.para_up(buffer)\nMoves the caret one paragraph up.\nParagraphs are surrounded by one or more blank lines.\n@param buffer The global buffer.
para_up_extend buffer.para_up_extend(buffer)\nMoves the caret one paragraph up, extending the selected text to the new\nposition.\nParagraphs are surrounded by one or more blank lines.\n@param buffer The global buffer.
paste buffer.paste(buffer)\nPastes the contents of the clipboard into the buffer, replacing the selected\ntext depending on `buffer.multi_paste`.\n@param buffer The global buffer.
path package.path (string)\nThe path used by `require` to search for a Lua loader.\nAt start-up, Lua initializes this variable with the value of the\nenvironment variable `LUA_PATH_5_2` or the environment variable `LUA_PATH`\nor with a default path defined in `luaconf.h`, if those environment\nvariables are not defined. Any "`;;`" in the value of the environment\nvariable is replaced by the default path.
patterns _M.textadept.mime_types.patterns (table)\nMap of first-line patterns to their associated lexers.\nIf a file type is not recognized by shebang words, each pattern is matched\nagainst the first line in the file.
pcall _G.pcall(f [, arg1, Â·Â·Â·])\nCalls function `f` with the given arguments in *protected mode*. This\nmeans that any error inside `f` is not propagated; instead, `pcall` catches\nthe error and returns a status code. Its first result is the status code (a\nboolean), which is true if the call succeeds without errors. In such case,\n`pcall` also returns all results from the call, after this first result. In\ncase of any error, `pcall` returns false plus the error message.
php _G.keys.php (table)\nContainer for PHP-specific key bindings.
php _G.snippets.php (table)\nContainer for PHP-specific snippets.
php _M.php (module)\nThe php module.\nIt provides utilities for editing PHP code.
pi math.pi (number)\nThe value of 'Ï€'.
point_x_from_position buffer.point_x_from_position(buffer, pos)\nReturns the x-coordinate in the view of position *pos*.\n@param buffer The global buffer.\n@param pos The position in *buffer* to get the x-coordinate in the view of.\n@return number
point_y_from_position buffer.point_y_from_position(buffer, pos)\nReturns the y-coordinate in the view of position *pos*.\n@param buffer The global buffer.\n@param pos The position in *buffer* to get the y-coordinate in the view of.\n@return number
popen io.popen(prog [, mode])\nStarts program `prog` in a separated process and returns a file handle\nthat you can use to read data from this program (if `mode` is `"r"`,\nthe default) or to write data to this program (if `mode` is `"w"`).\n\nThis function is system dependent and is not available on all platforms.
position_after buffer.position_after(buffer, pos)\nReturns the position of the next character after position *pos*, taking code\npage into account, or `buffer.length - 1`.\n@param buffer The global buffer.\n@param pos The position in *buffer* to get the position after from.
position_before buffer.position_before(buffer, pos)\nReturns the position of the previous character before position *pos*, taking\ncode page into account, or `0`.\n@param buffer The global buffer.\n@param pos The position in *buffer* to get the position before from.\n@return number
position_cache buffer.position_cache (number)\nThe number of entries in the position cache.\nThe position cache stores position information for short runs of text so\nthat their layout can be determined more quickly if the run recurs.\nThe default value is `1024`.
position_from_line buffer.position_from_line(buffer, line)\nReturns the position at the beginning of line number *line*.\nReturns `-1` if *line* is greater than `buffer.line_count`.\n@param buffer The global buffer.\n@param line The line number in *buffer* to get the beginning position for.\n@return number
position_from_point buffer.position_from_point(buffer, x, y)\nReturns the position closest to view coordinates *x* and *y*, which may be\nin-between multi-byte characters.\n@param buffer The global buffer.\n@param x The x-coordinate in the view to use.\n@param y The y-coordinate in the view to use.\n@return number
position_from_point_close buffer.position_from_point_close(buffer, x, y)\nReturns the position closest to view coordinates *x* and *y*, which may be\nin-between multi-byte characters, or `-1` if the point is outside the window\nor not close to any text.\n@param buffer The global buffer.\n@param x The x-coordinate in the view to use.\n@param y The y-coordinate in the view to use.\n@return number
pow math.pow(x, y)\nReturns *x^y*. (You can also use the expression `x^y` to compute this\nvalue.)
preload package.preload (table)\nA table to store loaders for specific modules (see `require`).\nThis variable is only a reference to the real table; assignments to this\nvariable do not change the table used by `require`.
print _G.print(Â·Â·Â·)\nReceives any number of arguments and prints their values to `stdout`, using\nthe `tostring` function to convert each argument to a string. `print` is not\nintended for formatted output, but only as a quick way to show a value,\nfor instance for debugging. For complete control over the output, use\n`string.format` and `io.write`.
print gui.print(...)\nPrints messages to the Textadept message buffer.\nOpens a new buffer if one has not already been opened for printing messages.\n@param ... Message strings.
print lexer.print (pattern)\nA pattern matching any printable character (space to `~`).
print_colour_mode buffer.print_colour_mode (number)\nThe print color mode.\n\n* `_SCINTILLA.constants.SC_PRINT_NORMAL` (0)\n  Print with the current set of colors.\n* `_SCINTILLA.constants.SC_PRINT_INVERTLIGHT` (1)\n  Print on a white background with the light values of the current color\n  set.\n  This mode is good for a dark background color.\n* `_SCINTILLA.constants.SC_PRINT_BLACKONWHITE` (2)\n  Print black text on a white background.\n* `_SCINTILLA.constants.SC_PRINT_COLOURONWHITE` (3)\n  Print on a white background with the current color set.\n* `_SCINTILLA.constants.SC_PRINT_COLOURONWHITEDEFAULTBG` (4)\n  Print on a white background with the current color set except for line\n  numbers which use their own background color.
print_magnification buffer.print_magnification (number)\nThe number of points to add to the size of each font when printing.\nNegative values are allowed.\nThe default value is `0`.
print_wrap_mode buffer.print_wrap_mode (number)\nThe print line wrap mode.\n\n* `_SCINTILLA.constants.SC_WRAP_NONE` (0)\n  Truncate long lines.\n* `_SCINTILLA.constants.SC_WRAP_WORD` (1)\n  Wrap long lines at word boundaries if possible.\n* `_SCINTILLA.constants.SC_WRAP_CHAR` (2)\n  Wrap long lines at character boundaries.
process args.process(arg)\nProcesses command line argument table *arg*, handling switches previously\ndefined using `args.register()` and treating unrecognized arguments as\nfilenames to open.\nEmits an `'arg_none'` event when no arguments are present.\n@param arg Argument table.\n@see register\n@see events
properties _SCINTILLA.properties (table)\nMap of Scintilla property names to table values containing their "get"\nfunction IDs, "set" function IDs, return types, and wParam types.\nThe wParam type will be non-zero if the property is indexable.\nTypes are the same as in the `functions` table.\n@see functions
property buffer.property (table)\nMap of key-value string pairs used by lexers.
property_expanded buffer.property_expanded (table, Read-only)\nMap of key-value string pairs used by lexers with `$()` variable\nreplacement performed in values.
property_int buffer.property_int (table, Read-only)\nMap of key-value pairs used by lexers with values interpreted as numbers,\nor `0` if not found.
punct lexer.punct (pattern)\nA pattern matching any punctuation character not alphanumeric (`!` to `/`,\n`:` to `@`, `[` to `'`, `{` to `~`).
punctuation_chars buffer.punctuation_chars (string)\nThe set of characters considered to be punctuation characters.\nSet this only after setting `buffer.word_chars`.\nThe default value is a string containing all characters not considered to\nbe whitespace or word characters.
python _G.keys.python (table)\nContainer for Python-specific key bindings.
python _G.snippets.python (table)\nContainer for Python-specific snippets.
python _M.python (module)\nThe python module.\nIt provides utilities for editing Python code.
quit _G.quit()\nEmits a `QUIT` event, and unless any handler returns `false`, quits\nTextadept.\n@see events.QUIT
rad math.rad(x)\nReturns the angle `x` (given in degrees) in radians.
rails _G.keys.rails (table)\nContainer for Rails-specific key bindings.
rails _G.snippets.rails (table)\nContainer for Rails-specific snippets.
rails _M.rails (module)\nThe rails module.\nIt provides utilities for editing Ruby on Rails code.
random math.random([m [, n]])\nThis function is an interface to the simple pseudo-random generator\nfunction `rand` provided by Standard C. (No guarantees can be given for its\nstatistical properties.)\n\nWhen called without arguments, returns a uniform pseudo-random real\nnumber in the range [0,1). When called with an integer number `m`,\n`math.random` returns a uniform pseudo-random integer in the range [1, m].\nWhen called with two integer numbers `m` and `n`, `math.random` returns a\nuniform pseudo-random integer in the range [m, n].
randomseed math.randomseed(x)\nSets `x` as the "seed" for the pseudo-random generator: equal seeds\nproduce equal sequences of numbers.
rawequal _G.rawequal(v1, v2)\nChecks whether `v1` is equal to `v2`, without invoking any\nmetamethod. Returns a boolean.
rawget _G.rawget(table, index)\nGets the real value of `table[index]`, without invoking any\nmetamethod. `table` must be a table; `index` may be any value.
rawlen _G.rawlen(v)\nReturns the length of the object `v`,\nwhich must be a table or a string,\nwithout invoking any metamethod.\nReturns an integer number.
rawset _G.rawset(table, index, value)\nSets the real value of `table[index]` to `value`, without invoking any\nmetamethod. `table` must be a table, `index` any value different from nil and\nNaN, and `value` any Lua value.\n\nThis function returns `table`.
read file:read(Â·Â·Â·)\nReads the file `file`, according to the given formats, which specify\nwhat to read. For each format, the function returns a string (or a number)\nwith the characters read, or nil if it cannot read data with the specified\nformat. When called without formats, it uses a default format that reads\nthe next line (see below).\n\nThe available formats are\n  "*n": reads a number; this is the only format that returns a number\n        instead of a string.\n  "*a": reads the whole file, starting at the current position. On end of\n        file, it returns the empty string.\n  "*l": reads the next line skipping the end of line, returning nil on\n        end of file. This is the default format.\n  "*L": reads the next line keeping the end of line (if present), returning\n        nil on end of file.\n  *number*: reads a string with up to this number of bytes, returning nil on\n        end of file. If number is zero, it reads nothing and returns an empty\n        string, or nil on end of file.
read io.read(Â·Â·Â·)\nEquivalent to `io.input():read(Â·Â·Â·)`.
read_only buffer.read_only (bool)\nWhether or not the buffer is read-only.\nThe default value is `false`.
recent_files io.recent_files (table)\nList of recently opened files, the most recent being towards the top.
rectangular_selection_anchor buffer.rectangular_selection_anchor (number)\nThe position of the anchor of the rectangular selection.
rectangular_selection_anchor_virtual_space buffer.rectangular_selection_anchor_virtual_space (number)\nThe amount of virtual space for the anchor of the rectangular selection.
rectangular_selection_caret buffer.rectangular_selection_caret (number)\nThe position of the caret of the rectangular selection.
rectangular_selection_caret_virtual_space buffer.rectangular_selection_caret_virtual_space (number)\nThe amount of virtual space for the caret of the rectangular selection.
rectangular_selection_modifier buffer.rectangular_selection_modifier (number)\nThe modifier key used in combination with a mouse drag to create a\nrectangular selection.\n\n* `_SCINTILLA.constants.SCMOD_CTRL` (2)\n  The "Control" modifier key.\n* `_SCINTILLA.constants.SCMOD_ALT` (4)\n  The "Alt" modifier key.\n* `_SCINTILLA.constants.SCMOD_SUPER` (8)\n  The "Super" modifier key, usually defined as the left "Windows" or\n  "Command" key.\n\nThe default value is `2`.
redo buffer.redo(buffer)\nRedoes the next undone action.\n@param buffer The global buffer.
register args.register(short, long, narg, f, description)\nRegisters a command line switch with short and long versions *short* and\n*long*, respectively. *narg* is the number of arguments the switch accepts,\n*f* is the function called when the switch is tripped, and *description* is\nthe switch's description when displaying help.\n@param short The string short version of the switch.\n@param long The string long version of the switch.\n@param narg The number of expected parameters for the switch.\n@param f The Lua function to run when the switch is tripped.\n@param description The string description of the switch for command line\n  help.
register_image buffer.register_image(buffer, type, xpm_data)\nRegisters XPM image *xpm_data* to type number *type* for use in\nautocompletion lists.\n@param buffer The global buffer.\n@param type Integer type to register the image with.\n@param xpm_data The XPM data as described in `buffer:marker_define_pixmap()`.
register_rgba_image buffer.register_rgba_image(buffer, type, pixels)\nRegisters RGBA image *pixels* to type number *type* for use in autocompletion\nlists.\nThe dimensions for *pixels*, `buffer.rgba_image_width` and\n`buffer.rgba_image_height`, must be already defined. *pixels* is a sequence\nof 4 byte pixel values (red, blue, green, and alpha) defining the image line\nby line starting at the top-left pixel.\n@param buffer The global buffer.\n@param type Integer type to register the image with.\n@param pixels The RGBA data as described in\n  `buffer:marker_define_rgba_image()`.
release_all_extended_styles buffer.release_all_extended_styles(buffer)\nReleases all styles allocated with `buffer:allocate_extended_styles()`.\n@param buffer The global buffer.\n@see allocate_extended_styles
reload buffer.reload(buffer)\nReloads the file in the buffer.\n@param buffer The global buffer.
remove os.remove(filename)\nDeletes the file (or empty directory, on POSIX systems) with the given name.\nIf this function fails, it returns nil, plus a string describing the error\nand the error code.
remove table.remove(list [, pos])\nRemoves from `list` the element at position `pos`, returning the value of the\nremoved element. When `pos` is an integer between 1 and `#list`, it shifts\ndown the elements `list[pos+1], list[pos+2], Â·Â·Â·, list[#list]` and erases\nelement `list[#list]`; The index `pos` can also be 0 when `#list` is 0, or\n`#list + 1`; in those cases, the function erases the element `list[pos]`.\n\nThe default value for `pos` is `#list`, so that a call `table.remove(t)`\nremoves the last element of list `t`.
rename os.rename(oldname, newname)\nRenames file or directory named `oldname` to `newname`. If this function\nfails, it returns nil, plus a string describing the error and the error code.
rep string.rep(s, n [, sep])\nReturns a string that is the concatenation of `n` copies of the string `s`\nseparated by the string `sep`. The default value for `sep` is the empty\nstring (that is, no separator).
replace bit32.replace(n, v, field [, width])\nReturns a copy of `n` with the bits `field` to `field + width - 1` replaced\nby the value `v`. See `bit32.extract` for details about `field` and `width`.
replace gui.find.replace()\nMimics pressing the "Replace" button.
replace_all gui.find.replace_all()\nMimics pressing the "Replace All" button.
replace_all_button_text gui.find.replace_all_button_text (string, Write-only)\nThe text of the "Replace All" button.\nThis is primarily used for localization.
replace_button_text gui.find.replace_button_text (string, Write-only)\nThe text of the "Replace" button.\nThis is primarily used for localization.
replace_entry_text gui.find.replace_entry_text (string)\nThe text in the replace entry.
replace_label_text gui.find.replace_label_text (string, Write-only)\nThe text of the "Replace" label.\nThis is primarily used for localization.
replace_sel buffer.replace_sel(buffer, text)\nReplaces the selected text with string *text*, scrolling the caret into view.\n@param buffer The global buffer.\n@param text The text to replace the selected text with.
replace_target buffer.replace_target(buffer, text)\nReplaces the text in the target range with string *text*, returning the\nlength of *text*.\nThe recommended way to delete text in the buffer is to set the target to the\ntext to be removed, and to call this function with an empty string.\n@param buffer The global buffer.\n@param text The text to replace the target range with.\n@return number
replace_target_re buffer.replace_target_re(buffer, text)\nReplaces the text in the target range with string *text* after replacing any\n"\d" sequences, where `d` is a number in the range of `1` to `9`, with the\ntag match values from the regular expression or the entire match for "\0",\nreturning the length of the replacement text.\n@param buffer The global buffer.\n@param text The text to replace the target range with.\n@return number
require _G.require(modname)\nLoads the given module. The function starts by looking into the\n`package.loaded` table to determine whether `modname` is already\nloaded. If it is, then `require` returns the value stored at\n`package.loaded[modname]`. Otherwise, it tries to find a *loader* for\nthe module.\n\nTo find a loader, `require` is guided by the `package.searchers` sequence. By\nchanging this sequence, we can change how `require` looks for a module. The\nfollowing explanation is based on the default configuration for\n`package.searchers`.\n\nFirst `require` queries `package.preload[modname]`. If it has a value,\nthis value (which should be a function) is the loader. Otherwise `require`\nsearches for a Lua loader using the path stored in `package.path`. If\nthat also fails, it searches for a C loader using the path stored in\n`package.cpath`. If that also fails, it tries an *all-in-one* loader (see\n`package.searchers`).\n\nOnce a loader is found, `require` calls the loader with two arguments:\n`modname` and an extra value dependent on how it got the loader. (If the\nloader came from a file, this extra value is the file name.) If the loader\nreturns any non-nil value, `require` assigns the returned value to\n`package.loaded[modname]`. If the loader does not return a non-nil value and\nhas not assigned any value to `package.loaded[modname]`, then `require`\nassigns <b>true</b> to this entry. In any case, `require` returns the final\nvalue of `package.loaded[modname]`.\n\nIf there is any error loading or running the module, or if it cannot find\nany loader for the module, then `require` raises an error.
reset _G.reset()\nResets the Lua state by reloading all initialization scripts.\nLanguage-specific modules for opened files are NOT reloaded. Re-opening the\nfiles that use them will reload those modules instead.\nThis function is useful for modifying user scripts (such as\n*~/.textadept/init.lua* and *~/.textadept/modules/textadept/keys.lua*) on\nthe fly without having to restart Textadept. `arg` is set to `nil` when\nreinitializing the Lua State. Any scripts that need to differentiate between\nstartup and reset can test `arg`.
resume coroutine.resume(co [, val1, Â·Â·Â·])\nStarts or continues the execution of coroutine `co`. The first time\nyou resume a coroutine, it starts running its body. The values `val1`,\n... are passed as the arguments to the body function. If the coroutine\nhas yielded, `resume` restarts it; the values `val1`, ... are passed\nas the results from the yield.\n\nIf the coroutine runs without any errors, `resume` returns true plus any\nvalues passed to `yield` (if the coroutine yields) or any values returned\nby the body function (if the coroutine terminates). If there is any error,\n`resume` returns false plus the error message.
reverse string.reverse(s)\nReturns a string that is the string `s` reversed.
rgba_image_height buffer.rgba_image_height (number)\nThe height for an RGBA image to be defined using\n`buffer:marker_define_rgba_image()`.
rgba_image_scale buffer.rgba_image_scale (number)\nThe scale factor in percent for an RGBA image to be defined using\n`buffer:marker_define_rgba_image()`.\nThis is useful on OSX with a retina display where each display unit is 2\npixels: use a factor of `200` so that each image pixel is dsplayed using a\nscreen pixel. The default scale, `100`, will stretch each image pixel to\ncover 4 screen pixels on a retina display.
rgba_image_width buffer.rgba_image_width (number)\nThe width for an RGBA image to be defined using\n`buffer:marker_define_rgba_image()` and\n`buffer:register_rgba_image()`.
rhtml _G.keys.rhtml (table)\nContainer for RHTML-specific key bindings.
rhtml _G.snippets.rhtml (table)\nContainer for RHTML-specific snippets.
rhtml _M.rhtml (module)\nThe RHTML module.\nIt provides utilities for editing RHTML.
rmdir lfs.rmdir(dirname)\nRemoves an existing directory. The argument is the name of the directory.\n\nReturns true if the operation was successful; in case of error, it returns\nnil plus an error string.
rotate_selection buffer.rotate_selection(buffer)\nSets the next additional selection to be the main selection.\n@param buffer The global buffer.
rrotate bit32.rrotate(x, disp)\nReturns the number `x` rotated `disp` bits to the right. The number `disp`\nmay be any representable integer.\n\nFor any valid displacement, the following identity holds:\n\n  assert(bit32.rrotate(x, disp) == bit32.rrotate(x, disp % 32))\n\nIn particular, negative displacements rotate to the left.
rshift bit32.rshift(x, disp)\nReturns the number `x` shifted `disp` bits to the right. The number `disp`\nmay be any representable integer. Negative displacements shift to the left.\nIn any direction, vacant bits are filled with zeros. In particular,\ndisplacements with absolute values higher than 31 result in zero (all bits\nare shifted out).\n\nFor positive displacements, the following equality holds:\n\n  assert(bit32.rshift(b, disp) == math.floor(b % 2^32 / 2^disp))\n\nThis shift operation is what is called logical shift.
ruby _G.keys.ruby (table)\nContainer for Ruby-specific key bindings.
ruby _G.snippets.ruby (table)\nContainer for Ruby-specific snippets.
ruby _M.ruby (module)\nThe ruby module.\nIt provides utilities for editing Ruby code.
run _M.textadept.run (module)\nCompile and run/execute source files with Textadept.\nTypically, language-specific modules populate the `compile_command`,\n`run_command`, and `error_detail` tables for a particular language's file\nextension.
run _M.textadept.run.run()\nRuns/executes the file based on its extension using the command from the\n`run_command` table.\nEmits a `RUN_OUTPUT` event.\n@see run_command\n@see _G.events
run_command _M.textadept.run.run_command (table)\nMap of file extensions (excluding the leading '.') to their associated\n"run" shell command line strings or functions returning such strings.\nCommand line strings may have the following macros:\n\n  + `%(filepath)`: The full path of the current file.\n  + `%(filedir)`: The current file's directory path.\n  + `%(filename)`: The name of the file, including its extension.\n  + `%(filename_noext)`: The name of the file, excluding its extension.\n\nThis table is typically populated by language-specific modules.
running coroutine.running()\nReturns the running coroutine plus a boolean, true when the running coroutine\nis the main one.
save _M.textadept.session.save(filename)\nSaves a Textadept session to file *filename* or a user-selected file.\nSaves split views, opened buffers, cursor information, and recent files.\n@param filename Optional absolute path to the session file to save. If `nil`,\n  the user is prompted for one.\n@usage _M.textadept.session.save(filename)\n@see DEFAULT_SESSION
save buffer.save(buffer)\nSaves the buffer to the file.\nEmits `FILE_BEFORE_SAVE` and `FILE_AFTER_SAVE` events.\n@param buffer The global buffer.\n@see _G.events
save_all io.save_all()\nSaves all unsaved buffers to their respective files.\n@see buffer.save
save_as buffer.save_as(buffer, utf8_filename)\nSaves the buffer to the *utf8_filename* or user-specified filename.\nEmits a `FILE_SAVED_AS` event.\n@param buffer The global buffer.\n@param utf8_filename The new filepath to save the buffer to. Must be UTF-8\n  encoded.\n@see _G.events
scroll_caret buffer.scroll_caret(buffer)\nScrolls the caret into view based on the policies set with\n`buffer:set_x_caret_policy()` and `buffer:set_y_caret_policy()`.\n@param buffer The global buffer.\n@see set_x_caret_policy\n@see set_y_caret_policy
scroll_range buffer.scroll_range(buffer, secondary_pos, primary_pos)\nScrolls the range between *primary_pos* and *secondary_pos* into view, with\npriority given to *primary_pos*.\nSimilar to `buffer:scroll_caret()`, but with *primary_pos* instead of\n`buffer.current_pos`.\nThis is useful for scrolling search results into view.\n@param buffer The global buffer.\n@param secondary_pos The secondary range position to scroll into view.\n@param primary_pos The primary range position to scroll into view.
scroll_to_end buffer.scroll_to_end(buffer)\nScrolls to the end of the buffer without moving the caret.\n@param buffer The global buffer.
scroll_to_start buffer.scroll_to_start(buffer)\nScrolls to the beginning of the buffer without moving the caret.\n@param buffer The global buffer.
scroll_width buffer.scroll_width (number)\nThe assumed buffer width for horizontal scrolling purposes.\nFor performance, the view does not measure the display width of the buffer\nto determine the properties of the horizontal scroll bar, but uses an\nassumed width instead. To ensure the width of the currently visible lines\ncan be scrolled use\n`buffer.scroll_width_tracking`.\nThe default value is `2000`.
scroll_width_tracking buffer.scroll_width_tracking (bool)\nSet the scroll width to the maximum width of a displayed line beyond\n`buffer.scroll_width`.\nThe default value is `false`.
search_anchor buffer.search_anchor(buffer)\nSets the current position to anchor subsequent searches with\n`buffer:search_next()` and `buffer:search_prev()`.\n@param buffer The global buffer.
search_flags buffer.search_flags (number)\nThe bit-mask of search flags used by\n`buffer:search_in_target()`.\n\n* `_SCINTILLA.constants.SCFIND_WHOLEWORD` (2)\n  Match text surrounded by non-word characters.\n* `_SCINTILLA.constants.SCFIND_MATCHCASE` (4)\n  Match text case sensitively.\n* `_SCINTILLA.constants.SCFIND_WORDSTART` (0x00100000)\n  Match text when the previous character is a non-word character.\n* `_SCINTILLA.constants.SCFIND_REGEXP` (0x00200000)\n  Interpret the search string as a regular expression.\n* `_SCINTILLA.constants.SCFIND_POSIX` (0x00400000)\n  Interpret '(' and ')' as tags instead of "\\(" and "\\)" in a regular\n  expression.\n\nThe default value is `0`.\n\nRegular expression characters recognized are:\n\n* `.`\n  Matches any character.\n* `[set]`\n  Matches any character in *set*, including ranges (e.g. `[A-Za-z]`).\n* `[^set]`\n  Matches the complement of *set*.\n* `*`\n  Matches zero or more of the previous match.\n* `+`\n  Matches one or more of the previous match.\n* `\<`\n  Matches the beginning of a word.\n  `buffer.word_chars` defines word characters.\n* `\>`\n  Matches the end of a word.\n  `buffer.word_chars` defines word characters.\n* `^`\n  Matches the start of a line unless inside a set.\n* `$`\n  Matches the end of a line unless inside a set.\n* `\(`\n  The beginning of a tagged matching region.\n* `\)`\n  The end of a tagged matching region.\n* `\n`\n  The matched text of the *n*th tagged region. In replacement text, "\0" is\n  all matched text.\n* `\x`\n  Represents character *x*, ignoring any special meaning it may have by\n  itself.
search_in_target buffer.search_in_target(buffer, text)\nSearches for the first occurrence of string *text* in the target range\nbounded by `buffer.target_start` and `buffer.target_end` using search flags\n`buffer.search_flags` and, if found, sets the new target range to that\noccurrence, returning its position or `-1` otherwise.\n@param buffer The global buffer.\n@param text The text to search the target range for.\n@return number\n@see search_flags
search_next buffer.search_next(buffer, flags, text)\nSearches for and selects the first occurrence of string *text* starting at\nthe search anchor using search flags *flags*, returning the position of the\noccurrence or `-1`.\nSelected text is not scrolled into view.\n@param buffer The global buffer.\n@param flags The search flags to use. See `buffer.search_flags`.\n@param text The text to search for.\n@return number\n@see search_flags
search_prev buffer.search_prev(buffer, flags, text)\nSearches for and selects the last occurrence of string *text* before the\nsearch anchor using search flags *flags*, returning the position of the\noccurrence or `-1`.\n@param buffer The global buffer.\n@param flags The search flags to use. See `buffer.search_flags`.\n@param text The text to search for.\n@return number\n@see search_flags
searchers package.searchers (table)\nA table used by `require` to control how to load modules.\nEach entry in this table is a *searcher function*. When looking for a\nmodule, `require` calls each of these searchers in ascending order, with\nthe module name (the argument given to `require`) as its sole parameter.\nThe function can return another function (the module *loader*) plus an\nextra value that will be passed to that loader, or a string explaining why\nit did not find that module (or nil if it has nothing to say).\nLua initializes this table with four functions.\nThe first searcher simply looks for a loader in the `package.preload`\ntable.\nThe second searcher looks for a loader as a Lua library, using the path\nstored at `package.path`. The search is done as described in function\n`package.searchpath`.\nThe third searcher looks for a loader as a C library, using the path given\nby the variable `package.cpath`. Again, the search is done as described in\nfunction `package.searchpath`. For instance, if the C path is the string\n  "./?.so;./?.dll;/usr/local/?/init.so"\nthe searcher for module `foo` will try to open the files `./foo.so`,\n`./foo.dll`, and `/usr/local/foo/init.so`, in that order. Once it finds\na C library, this searcher first uses a dynamic link facility to link the\napplication with the library. Then it tries to find a C function inside the\nlibrary to be used as the loader. The name of this C function is the string\n"`luaopen_`" concatenated with a copy of the module name where each dot\nis replaced by an underscore. Moreover, if the module name has a hyphen,\nits prefix up to (and including) the first hyphen is removed. For instance,\nif the module name is `a.v1-b.c`, the function name will be `luaopen_b_c`.\nThe fourth searcher tries an *all-in-one loader*. It searches the C\npath for a library for the root name of the given module. For instance,\nwhen requiring `a.b.c`, it will search for a C library for `a`. If found,\nit looks into it for an open function for the submodule; in our example,\nthat would be `luaopen_a_b_c`. With this facility, a package can pack\nseveral C submodules into one single library, with each submodule keeping\nits original open function.\nAll searchers except the first one (preload) return as the extra value the\nfile name where the module was found, as returned by `package.searchpath`.\nThe first searcher returns no extra value.
searchpath package.searchpath(name, path [, sep [, rep]])\nSearches for the given `name` in the given `path`.\n\nA path is a string containing a sequence of _templates_ separated by\nsemicolons. For each template, the function replaces each interrogation mark\n(if any) in the template with a copy of `name` wherein all occurrences of\n`sep` (a dot, by default) were replaced by `rep` (the system's directory\nseparator, by default), and then tries to open the resulting file name.\nFor instance, if the path is the string\n  "./?.lua;./?.lc;/usr/local/?/init.lua"\nthe search for the name `foo.a` will try to open the files `./foo/a.lua`,\n`./foo/a.lc`, and `/usr/local/foo/a/init.lua`, in that order.\nReturns the resulting name of the first file that it can open in read mode\n(after closing the file), or nil plus an error message if none succeeds.\n(This error message lists all file names it tried to open.)
seek file:seek([whence [, offset]])\nSets and gets the file position, measured from the beginning of the\nfile, to the position given by `offset` plus a base specified by the string\n`whence`, as follows:\n  "set": base is position 0 (beginning of the file);\n  "cur": base is current position;\n  "end": base is end of file;\n\nIn case of success, function `seek` returns the final file position,\nmeasured in bytes from the beginning of the file. If `seek` fails, it returns\nnil, plus a string describing the error.\n\nThe default value for `whence` is `"cur"`, and for `offset` is 0. Therefore,\nthe call `file:seek()` returns the current file position, without changing\nit; the call `file:seek("set")` sets the position to the beginning of the\nfile (and returns 0); and the call `file:seek("end")` sets the position\nto the end of the file, and returns its size.
sel_alpha buffer.sel_alpha (number)\nThe alpha value, ranging from `0` (transparent) to `255` (opaque), of the\nselection.\nThe default value is `256`, for no alpha.
sel_eol_filled buffer.sel_eol_filled (bool)\nExtend the selection to the right margin of the view.\nThe default value is `false`.
select _G.select(index, Â·Â·Â·)\nIf `index` is a number, returns all arguments after argument number\n`index`; a negative number indexes from the end (-1 is the last argument).\nOtherwise, `index` must be the string `"#"`, and `select` returns the total\nnumber of extra arguments it received.
select_all buffer.select_all(buffer)\nSelects all of the text in the buffer without scrolling the view.\n@param buffer The global buffer.
select_command _M.textadept.menu.select_command()\nPrompts the user to select a menu command to run.
select_enclosed _M.textadept.editing.select_enclosed(left, right)\nSelects the text in-between strings *left* and *right* containing the caret.\nIf already selected, toggles between selecting the *left* and *right*\nenclosures too.\n@param left The left part of the enclosure.\n@param right The right part of the enclosure.
select_indented_block _M.textadept.editing.select_indented_block()\nSelects indented text blocks intelligently.\nIf no block of text is selected, all text with the current level of\nindentation is selected. If a block of text is selected and the lines\nimmediately above and below it are one indentation level lower, they are\nadded to the selection. In all other cases, the behavior is the same as if no\ntext is selected.
select_lexer _M.textadept.mime_types.select_lexer()\nPrompts the user to select a lexer for the current buffer.\n@see buffer.set_lexer
select_line _M.textadept.editing.select_line()\nSelects the current line.
select_paragraph _M.textadept.editing.select_paragraph()\nSelects the current paragraph.\nParagraphs are surrounded by one or more blank lines.
select_word _M.textadept.editing.select_word()\nSelects the current word.\n@see buffer.word_chars
selection_duplicate buffer.selection_duplicate(buffer)\nDuplicates the selected text or the current line.\n@param buffer The global buffer.
selection_empty buffer.selection_empty (bool, Read-only)\nWhether or not no text is selected.
selection_end buffer.selection_end (number)\nThe position of the end of the selected text.\nWhen set, becomes the current position, but is not scrolled into view.
selection_is_rectangle buffer.selection_is_rectangle (bool, Read-only)\nWhether or not the selection is a rectangular selection.
selection_mode buffer.selection_mode (number)\nThe selection mode.\n\n* `_SCINTILLA.constants.SC_SEL_STREAM` (0)\n  Character selection.\n* `_SCINTILLA.constants.SC_SEL_RECTANGLE` (1)\n  Rectangular selection.\n* `_SCINTILLA.constants.SC_SEL_LINES` (2)\n  Line selection.\n* `_SCINTILLA.constants.SC_SEL_THIN` (3)\n  Thin rectangular selection. This is the mode after a rectangular\n  selection has been typed into and ensures that no characters are\n  selected.\n\nWhen set, caret movement alters the selected text until this field is set\nagain to the same value or `buffer:cancel()` is called.
selection_n_anchor buffer.selection_n_anchor (table)\nTable of anchor positions for existing selections numbered from zero, the\nmain selection.
selection_n_anchor_virtual_space buffer.selection_n_anchor_virtual_space (table)\nTable of the amount of virtual space for anchors for existing selections\nnumbered from zero, the main selection.
selection_n_caret buffer.selection_n_caret (table)\nTable of caret positions for existing selections numbered from zero, the\nmain selection.
selection_n_caret_virtual_space buffer.selection_n_caret_virtual_space (table)\nTable of the amount of virtual space for carets for existing selections\nnumbered from zero, the main selection.
selection_n_end buffer.selection_n_end (table)\nTable of positions at the end of existing selections numbered from zero,\nthe main selection.
selection_n_start buffer.selection_n_start (table)\nTable of positions at the beginning of existing selections numbered from\nzero, the main selection.
selection_start buffer.selection_start (number)\nThe position of the beginning of the selected text.\nWhen set, becomes the anchor, but is not scrolled into view.
selections buffer.selections (number, Read-only)\nThe number of active selections.
self _M.textadept.adeptsense.syntax.self (table)\nThe language's syntax-equivalent of `self`. The default value is\n  `'self'`.
sense _M.cpp.sense\nThe C/C++ Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/cpp/tags* and user apidocs\n  from *`_USERHOME`/modules/cpp/api*.
sense _M.css.sense\nThe CSS Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/css/tags* and user apidocs\n  from *`_USERHOME`/modules/css/api*.
sense _M.hypertext.sense\nThe HTML Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/hypertext/tags* and user\n  apidocs from *`_USERHOME`/modules/hypertext/api*.
sense _M.java.sense\nThe Java Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/java/tags* and user apidocs\n  from *`_USERHOME`/modules/java/api*.
sense _M.lua.sense\nThe Lua Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/lua/tags* and user apidocs\n  from *`_USERHOME`/modules/lua/api*.
sense _M.php.sense\nThe PHP Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/php/tags* and user apidocs\n  from *`_USERHOME`/modules/php/api*.
sense _M.python.sense\nThe Python Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/python/tags* and user apidocs\n  from *`_USERHOME`/modules/python/api*.
sense _M.rails.sense\nThe Rails Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/rails/tags* and user apidocs\n  from *`_USERHOME`/modules/rails/api*.
sense _M.rhtml.sense\nThe RHTML Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/rhtml/tags* and user apidocs\n  from *`_USERHOME`/modules/rhtml/api*.
sense _M.ruby.sense\nThe Ruby Adeptsense.\n  It loads user tags from *`_USERHOME`/modules/ruby/tags* and user apidocs\n  from *`_USERHOME`/modules/ruby/api*.
session _M.textadept.session (module)\nSession support for Textadept.
set_chars_default buffer.set_chars_default(buffer)\nResets the set of whitespace and word characters to their default characters.\n@param buffer The global buffer.\n@see whitespace_chars\n@see word_chars
set_contextmenu _M.textadept.menu.set_contextmenu(menu)\nSets `gui.context_menu` from *menu*, an ordered list of menu items.\nMenu items are tables containing menu text and either a function to call or\na table containing a function with its parameters to call when an item is\nclicked. Menu items may also be sub-menus, ordered lists of menu items with\nan additional `title` key for the sub-menu's title text.\n@param menu The menu table to create the context menu from.\n@see gui.context_menu\n@see gui.menu
set_empty_selection buffer.set_empty_selection(buffer, pos)\nSets the current position to position *pos* without scrolling the view,\nremoving any selections.\n@param buffer The buffer\n@param pos The position in *buffer* to move to.
set_encoding buffer.set_encoding(buffer, encoding)\nSets the encoding for the buffer to *encoding*, converting its contents from\nthe old encoding to the new one.\n@param buffer The global buffer.\n@param encoding The string encoding to set. Valid encodings are ones that GNU\n  iconv accepts.\n@usage buffer.set_encoding(buffer, 'ASCII')
set_fold_margin_colour buffer.set_fold_margin_colour(buffer, use_setting, color)\nOverrides the default color of the fold margin with *color*, in "0xBBGGRR"\nformat, if *use_setting* is `true`.\n@param buffer The global buffer.\n@param use_setting Whether or not to use *color*.\n@param color The color in "0xBBGGRR" format.
set_fold_margin_hi_colour buffer.set_fold_margin_hi_colour(buffer, use_setting, color)\nOverrides the default highlight color of the fold margin with *color*, in\n"0xBBGGRR" format, if *use_setting* is `true`.\n@param buffer The global buffer.\n@param use_setting Whether or not to use *color*.\n@param color The color in "0xBBGGRR" format.
set_hotspot_active_back buffer.set_hotspot_active_back(buffer, use_setting, color)\nOverrides the default background color of active hotspots with *color*, in\n"0xBBGGRR" format, if *use_setting* is `true`.\n@param buffer The global buffer.\n@param use_setting Whether or not to use *color*.\n@param color The color in "0xBBGGRR" format.
set_hotspot_active_fore buffer.set_hotspot_active_fore(buffer, use_setting, color)\nOverrides the default foreground color of active hotspots with *color*, in\n"0xBBGGRR" format, if *use_setting* is `true`.\n@param buffer The global buffer.\n@param use_setting Whether or not to use *color*.\n@param color The color in "0xBBGGRR" format.
set_length_for_encode buffer.set_length_for_encode(buffer, bytes)\nSets the length of *string* in `buffer:encoded_from_utf8()` to *bytes*.\n@param buffer The global buffer.\n@param bytes The number of bytes to encode, or `-1` for measuring to first\n  null byte.
set_lexer buffer.set_lexer(buffer, lang)\nSets the name of the lexer used by the buffer to *lang* or the auto-detected\nlanguage and then loads the appropriate language-specific module if the\nmodule exists.\n@param buffer The global buffer.\n@param lang Optional string language name to set. If `nil`, attempts to\n  auto-detect the buffer's language.\n@usage buffer.set_lexer(buffer, 'language_name')
set_menubar _M.textadept.menu.set_menubar(menubar)\nSets `gui.menubar` from *menubar*, a table of menus.\nEach menu is an ordered list of menu items and has a `title` key for the\ntitle text. Menu items are tables containing menu text and either a function\nto call or a table containing a function with its parameters to call when an\nitem is clicked. Menu items may also be sub-menus, ordered lists of menu\nitems with an additional `title` key for the sub-menu's title text.\n@param menubar The table of menu tables to create the menubar from.\n@see gui.menubar\n@see gui.menu
set_property lexer.set_property(key, value)\nAssociates string property *key* with string *value*.\n@param key The string property key.\n@param value The string value.
set_save_point buffer.set_save_point(buffer)\nTells Scintilla the buffer has no unsaved changes.\n@param buffer The global buffer.
set_sel buffer.set_sel(buffer, start_pos, end_pos)\nSelects the range of text from *start_pos* to *end_pos* in the buffer,\nscrolling the selected text into view.\n@param buffer The global buffer.\n@param start_pos The start position of the range of text in *buffer* to\n  select. If negative, it means the end of the buffer.\n@param end_pos The end position of the range of text in *buffer* to select.\n  If negative, it means remove any selection (i.e. set the `anchor` to the\n  same position as `current_pos`).
set_sel_back buffer.set_sel_back(buffer, use_setting, color)\nOverrides the default background color of all selected text with *color*, in\n"0xBBGGRR" format, if *use_setting* is `true`.\n@param buffer The global buffer.\n@param use_setting Whether or not to use *color*.\n@param color The color in "0xBBGGRR" format.
set_sel_fore buffer.set_sel_fore(buffer, use_setting, color)\nOverrides the default foreground color of all selected text with *color*, in\n"0xBBGGRR" format, if *use_setting* is `true`.\n@param buffer The global buffer.\n@param use_setting Whether or not to use *color*.\n@param color The color in "0xBBGGRR" format.
set_selection buffer.set_selection(buffer, caret, anchor)\nSelects the range of text from *anchor* to *caret* in the buffer, removing\nall other selections.\n@param buffer The global buffer.\n@param caret The caret position of the range of text to select in *buffer*.\n@param anchor The anchor position of the range of text to select in *buffer*.
set_styling buffer.set_styling(buffer, length, style)\nSets the style of the next *length* characters, from the current styling\nposition, to style number *style*, in the range from `0` to `255`, and\nincrements the styling position by *length*.\n@param buffer The global buffer.\n@param length The number of characters to style.\n@param style The style number to set.
set_text buffer.set_text(buffer, text)\nReplaces all of the text in the buffer with string *text*.\n@param buffer The global buffer.\n@param text The text to set.
set_theme gui.set_theme(name, ...)\nSets the editor theme name to *name* and optionally sets key-value pair\nargument properties.\nUser themes override Textadept's default themes when they have the same name.\nIf *name* contains slashes, it is assumed to be an absolute path to a theme\ninstead of a theme name.\n@param name The name or absolute path of a theme to set.\n@param ... Optional key-value argument pairs for theme properties to set.\n  These override the theme's defaults.\n@usage gui.set_theme('light', 'font', 'Monospace', 'fontsize', 12)
set_visible_policy buffer.set_visible_policy(buffer, visible_policy, visible_slop)\nSets the visible policy bit-mask *visible_policy* for displaying lines using\n`buffer:ensure_visible_enforce_policy()` to *visible_slop* number of lines\nfrom the bottom of the view.\nIt is similar in operation to `buffer:set_y_caret_policy()`.\n@param buffer The global buffer.\n@param visible_policy The combination of `_SCINTILLA.constants.VISIBLE_SLOP`\n  (0x01) and `_SCINTILLA.constants.VISIBLE_STRICT` (0x04) policy flags to set.\n@param visible_slop The slop value to use.
set_whitespace_back buffer.set_whitespace_back(buffer, use_setting, color)\nOverrides the background color of whitespace with *color*, in "0xBBGGRR"\nformat, if *use_setting* is `true`.\n@param buffer The global buffer.\n@param use_setting Whether or not to use *color*.\n@param color The color in "0xBBGGRR" format.
set_whitespace_fore buffer.set_whitespace_fore(buffer, use_setting, color)\nOverrides the foreground color of whitespace with *color*, in "0xBBGGRR"\nformat, if *use_setting* is `true`.\n@param use_setting Whether or not to use *color*.\n@param color The color in "0xBBGGRR" format.
set_x_caret_policy buffer.set_x_caret_policy(buffer, caret_policy, caret_slop)\nSet the way the caret is kept visible when going sideways.\nThe exclusion zone is given in pixels.\n@param buffer The global buffer.\n@param caret_policy The combination of `_SCINTILLA.constants.CARET_SLOP`\n  (0x01), `_SCINTILLA.constants.CARET_STRICT` (0x04),\n  `_SCINTILLA.constants.CARET_EVEN` (0x08), and\n  `_SCINTILLA.constants.CARET_JUMPS` (0x10) policy flags to set.\n@param caret_slop The slop value to use.
set_y_caret_policy buffer.set_y_caret_policy(buffer, caret_policy, caret_slop)\nSet the way the line the caret is on is kept visible.\n@param buffer The global buffer.\n@param caret_policy The combination of `_SCINTILLA.constants.CARET_SLOP`\n  (0x01), `_SCINTILLA.constants.CARET_STRICT` (0x04),\n  `_SCINTILLA.constants.CARET_EVEN` (0x08), and\n  `_SCINTILLA.constants.CARET_JUMPS` (0x10) policy flags to set.\n@param caret_slop The slop value to use.
sethook debug.sethook([thread, ] hook, mask [, count])\nSets the given function as a hook. The string `mask` and the number\n`count` describe when the hook will be called. The string mask may have\nthe following characters, with the given meaning:\n  "c": the hook is called every time Lua calls a function;\n  "r": the hook is called every time Lua returns from a function;\n  "l": the hook is called every time Lua enters a new line of code.\n\nWith a `count` different from zero, the hook is called after every `count`\ninstructions.\n\nWhen called without arguments, `debug.sethook` turns off the hook.\n\nWhen the hook is called, its first parameter is a string describing\nthe event that has triggered its call: `"call"` (or `"tail call"`),\n`"return"`, `"line"`, and `"count"`. For line events, the hook also gets the\nnew line number as its second parameter. Inside a hook, you can call\n`getinfo` with level 2 to get more information about the running function\n(level 0 is the `getinfo` function, and level 1 is the hook function).
setlocal debug.setlocal([thread, ] level, local, value)\nThis function assigns the value `value` to the local variable with\nindex `local` of the function at level `level` of the stack. The function\nreturns nil if there is no local variable with the given index, and raises\nan error when called with a `level` out of range. (You can call `getinfo`\nto check whether the level is valid.) Otherwise, it returns the name of\nthe local variable.\n\nSee `debug.getlocal` for more information about variable indices and names.
setlocale os.setlocale(locale [, category])\nSets the current locale of the program. `locale` is a system-dependent string\nspecifying a locale; `category` is an optional string describing which\ncategory to change: `"all"`, `"collate"`, `"ctype"`, `"monetary"`,\n`"numeric"`, or `"time"`; the default category is `"all"`. The function\nreturns the name of the new locale, or nil if the request cannot be honored.\n\nIf `locale` is the empty string, the current locale is set to an\nimplementation-defined native locale. If `locale` is the string "`C`",\nthe current locale is set to the standard C locale.\n\nWhen called with nil as the first argument, this function only returns\nthe name of the current locale for the given category.\n\nThis function may not be thread safe because of its reliance on C function\n`setlocale`.
setmaxstack lpeg.setmaxstack(max)\nSets the maximum size for the backtrack stack used by LPeg to track calls and\nchoices. Most well-written patterns need little backtrack levels and\ntherefore you seldom need to change this maximum; but a few useful patterns\nmay need more space. Before changing this maximum you should try to rewrite\nyour pattern to avoid the need for extra space.
setmetatable _G.setmetatable(table, metatable)\nSets the metatable for the given table. (You cannot change the metatable\nof other types from Lua, only from C.) If `metatable` is nil, removes the\nmetatable of the given table. If the original metatable has a `"__metatable"`\nfield, raises an error.\n\nThis function returns `table`.
setmetatable debug.setmetatable(value, table)\nSets the metatable for the given `value` to the given `table` (which\ncan be nil).
setmode lfs.setmode(file, mode)\nSets the writing mode for a file. The mode string can be either binary or\ntext. Returns the previous mode string for the file. This function is only\navailable in Windows, so you may want to make sure that lfs.setmode exists\nbefore using it.
setupvalue debug.setupvalue(f, up, value)\nThis function assigns the value `value` to the upvalue with index `up`\nof the function `f`. The function returns nil if there is no upvalue with the\ngiven index. Otherwise, it returns the name of the upvalue.
setuservalue debug.setuservalue(udata, value)\nSets the given `value` as the Lua value associated to the given `udata`.\n`value` must be a table or nil; `udata` must be a full userdata.\n\nReturns `udata`.
setvbuf file:setvbuf(mode [, size])\nSets the buffering mode for an output file. There are three available\nmodes:\n  "no": no buffering; the result of any output operation appears immediately.\n  "full": full buffering; output operation is performed only when the\n          buffer is full or when you explicitly `flush` the file (see\n          `io.flush`).\n  "line": line buffering; output is buffered until a newline is output or\n          there is any input from some special files (such as a terminal\n          device).\n\nFor the last two cases, `size` specifies the size of the buffer, in\nbytes. The default is an appropriate size.
shebangs _M.textadept.mime_types.shebangs (table)\nMap of shebang words to their associated lexers.\nIf the file has a shebang line, a line that starts with "#!" and is the first\nline in the file, each shebang word is matched against that line.
show_apidoc _M.textadept.adeptsense.show_apidoc(sense)\nShows a call tip with API documentation for the symbol behind the caret.\nIf documentation is already being shown, cycles through multiple definitions.\n@param sense The Adeptsense returned by `adeptsense.new()`. If `nil`, uses\n  the current language's Adeptsense (if it exists).\n@return list of apidocs on success or `nil`.\n@see get_symbol\n@see get_apidoc
show_completions gui.command_entry.show_completions(completions)\nShows the completion list *completions* for the current word prefix.\nWord prefix characters are alphanumerics and underscores. On selection, the\nword prefix is replaced with the completion.\n@param completions The table of completions to show. Non-string values are\n  ignored.
show_lines buffer.show_lines(buffer, start_line, end_line)\nShows the range of lines from line number *start_line* to *end_line*.\nThis has no effect on fold levels or fold flags and the first line cannot be\nhidden.\n@param buffer The global buffer.\n@param start_line The start line of the range of lines in *buffer* to show.\n@param end_line The end line of the range of lines in *buffer* to show.
sin math.sin(x)\nReturns the sine of `x` (assumed to be in radians).
singular _M.rails.singular\nA map of plural controller names to their singulars. Add key-value pairs to\n  this if the local function `singularize()` is incorrectly converting your\n  plural controller name to its singular model name.
sinh math.sinh(x)\nReturns the hyperbolic sine of `x`.
size gui.size (table)\nA table containing the width and height values of the Textadept window.
size view.size (number)\nThe position of the split resizer (if this view is part of a split view).
snapopen io.snapopen(utf8_paths, filter, exclude_FILTER, ...)\nQuickly open files from *utf8_paths*, a "\n" delimited string of\nUTF-8-encoded directory paths, using a filtered list dialog.\nFiles shown in the dialog do not match any pattern in string or table\n*filter*, and, unless *exclude_FILTER* is `true`, `lfs.FILTER` as well. A\nfilter table contains Lua patterns that match filenames to exclude, with\npatterns matching folders to exclude listed in a `folders` sub-table.\nPatterns starting with '!' exclude files and folders that do not match the\npattern that follows. Use a table of raw file extensions assigned to an\n`extensions` key for fast filtering by extension. All strings must be encoded\nin `_G._CHARSET`, not UTF-8. The number of files in the list is capped at\n`SNAPOPEN_MAX`.\n@param utf8_paths String list of UTF-8-encoded directory paths to search.\n@param filter Optional filter for files and folders to exclude.\n@param exclude_FILTER Optional flag indicating whether or not to exclude the\n  default filter `lfs.FILTER` in the search. If `false`, adds `lfs.FILTER` to\n  *filter*.\n  The default value is `false` to include the default filter.\n@param ... Optional additional parameters to pass to `gui.dialog()`.\n@usage io.snapopen(buffer.filename:match('^.+/')) -- list all files in the\n  current file's directory, subject to the default filter\n@usage io.snapopen('/project', '!%.lua$') -- list all Lua files in a project\n   directory\n@usage io.snapopen('/project', {folders = {'build'}}) -- list all source\n  files in a project directory\n@see lfs.FILTER\n@see SNAPOPEN_MAX
snippets _G.snippets (table)\nMap of snippet triggers with their snippet text, with language-specific\nsnippets tables assigned to a lexer name key.\nThis table also contains the `_M.textadept.snippets` module.
snippets _M.textadept.snippets (module)\nSnippets for Textadept.
sort table.sort(list [, comp])\nSorts list elements in a given order, *in-place*, from `list[1]` to\n`list[#list]`. If `comp` is given, then it must be a function that receives\ntwo list elements and returns true when the first element must come before\nthe second in the final order (so that `not comp(list[i+1],list[i])` will be\ntrue after the sort). If `comp` is not given, then the standard Lua operator\n`<` is used instead.\n\nThe sort algorithm is not stable; that is, elements considered equal by the\ngiven order may have their relative positions changed by the sort.
space lexer.space (pattern)\nA pattern matching any whitespace character (`\t`, `\v`, `\f`, `\n`, `\r`,\nspace).
split view.split(view, vertical)\nSplits the view into top and bottom views, unless *vertical* is `true`,\nfocuses the new view, and returns both the old and new views.\nIf *vertical* is `false`, splits the view vertically into left and\nright views.\nEmits a `VIEW_NEW` event.\n@param view The view to split.\n@param vertical Optional flag indicating whether or not to split the view\n  vertically. The default value is `false`, for horizontal.\n@return old view and new view.\n@see events.VIEW_NEW
sqrt math.sqrt(x)\nReturns the square root of `x`. (You can also use the expression `x^0.5`\nto compute this value.)
start_styling buffer.start_styling(buffer, position, mask)\nBegin styling at position *position* with the 8-bit styling bit-mask *mask*\nthat determines which style bits can be set with `buffer:set_styling()`.\n@param buffer The global buffer.\n@param position The position in *buffer* to start styling at.\n@param mask The bit mask of style bits that can be set when styling.\n@usage buffer:start_styling(0, 0xFF)
starts_line lexer.starts_line(patt)\nCreates and returns a pattern that matches pattern *patt* only at the\nbeginning of a line.\n@param patt The LPeg pattern to match on the beginning of a line.\n@usage local preproc = token(l.PREPROCESSOR, #P('#') * l.starts_line('#' *\n  l.nonnewline^0))\n@return pattern
status coroutine.status(co)\nReturns the status of coroutine `co`, as a string: `"running"`, if\nthe coroutine is running (that is, it called `status`); `"suspended"`, if\nthe coroutine is suspended in a call to `yield`, or if it has not started\nrunning yet; `"normal"` if the coroutine is active but not running (that\nis, it has resumed another coroutine); and `"dead"` if the coroutine has\nfinished its body function, or if it has stopped with an error.
statusbar_text gui.statusbar_text (string, Write-only)\nThe text displayed by the statusbar.
stderr io.stderr (file)\nStandard error.
stdin io.stdin (file)\nStandard in.
stdout io.stdout (file)\nStandard out.
string _G.string (module)\nLua string module.
stuttered_page_down buffer.stuttered_page_down(buffer)\nMoves the caret to the bottom of the page, or if already there, one page\ndown.\n@param buffer The global buffer.
stuttered_page_down_extend buffer.stuttered_page_down_extend(buffer)\nLike `buffer:stuttered_page_down()`, but extends the selected text to the new\nposition.\n@param buffer The global buffer.
stuttered_page_up buffer.stuttered_page_up(buffer)\nMoves the caret to the top of the page, or if already there, one page up.\n@param buffer The global buffer.
stuttered_page_up_extend buffer.stuttered_page_up_extend(buffer)\nLike `buffer:stuttered_page_up()`, but extends the selected text to the new\nposition.\n@param buffer The global buffer.
style_at buffer.style_at (table, Read-only)\nTable of style bytes at positions in the buffer starting from zero.
style_back buffer.style_back (table)\nTable of background colors, in "0xBBGGRR" format, for style numbers from\n`0` to `255`.
style_bits buffer.style_bits (number)\nThe number of bits in an 8-bit style byte to use for styling.\nThe number of styling bits required by the current lexer is\n`buffer.style_bits_needed`.\nThe default value is `5`.
style_bits_needed buffer.style_bits_needed (number, Read-only)\nThe number of styling bits required by the current lexer.
style_bold buffer.style_bold (table)\nTable of flags indicating whether or not text within styles has a bold font\nface for style numbers from `0` to `255`.\nThe default values are `false`.
style_case buffer.style_case (table)\nTable of letter case modes for text within styles for style numbers from\n`0` to `255`.\n\n* `_SCINTILLA.constants.SC_CASE_MIXED` (0)\n  Display text in mixed case.\n* `_SCINTILLA.constants.SC_CASE_UPPER` (1)\n  Display text in upper case.\n* `_SCINTILLA.constants.SC_CASE_LOWER` (2)\n  Display text in lower case.\n\nThe default values are `0`.
style_changeable buffer.style_changeable (table)\nTable of flags indicating whether or not text within styles is changeable\nfor style numbers from `0` to `255`.\nThe default values are `true`.\nCurrently, read-only styles do not allow the caret into the range of text,\nbut ranges containing read-only text are deletable.
style_character_set buffer.style_character_set (table)\nTable of character sets for style numbers from `0` to `255`.\n\n* `_SCINTILLA.constants.SC_CHARSET_ANSI` (0)\n* `_SCINTILLA.constants.SC_CHARSET_DEFAULT` (1)\n* `_SCINTILLA.constants.SC_CHARSET_CYRILLIC` (1251)\n* `_SCINTILLA.constants.SC_CHARSET_EASTEUROPE` (238)\n* `_SCINTILLA.constants.SC_CHARSET_GB2312` (134)\n* `_SCINTILLA.constants.SC_CHARSET_HANGUL` (129)\n* `_SCINTILLA.constants.SC_CHARSET_RUSSIAN` (204)\n* `_SCINTILLA.constants.SC_CHARSET_SHIFTJIS` (128)\n* `_SCINTILLA.constants.SC_CHARSET_8859_15` (1000)\n\nThe default values are `1`.
style_clear_all buffer.style_clear_all(buffer)\nSets all styles to have the same properties as\n`_SCINTILLA.constants.STYLE_DEFAULT`.\n@param buffer The global buffer.
style_eol_filled buffer.style_eol_filled (table)\nTable of flags indicating whether or not to extend the background colors of\nstyles whose characters occur last on lines all the way to the right margin\nof the view for style numbers from `0` to `255`.\nThe default values are `false`.
style_font buffer.style_font (table)\nTable of font faces for style numbers from `0` to `255`.
style_fore buffer.style_fore (table)\nTable of foreground colors, in "0xBBGGRR" format, for style numbers from\n`0` to `255`.
style_hot_spot buffer.style_hot_spot (table)\nTable of flags indicating whether or not text within styles is clickable\nfor style numbers from `0` to `255`.\nThe default values are `false`.
style_italic buffer.style_italic (table)\nTable of flags indicating whether or not text within styles has an italic\nfont face for style numbers from `0` to `255`.\nThe default values are `false`.
style_reset_default buffer.style_reset_default(buffer)\nResets `_SCINTILLA.constants.STYLE_DEFAULT` to its initial state.\n@param buffer The global buffer.
style_size buffer.style_size (table)\nTable of font sizes, expressed in whole number points, for style numbers\nfrom `0` to `255`.
style_size_fractional buffer.style_size_fractional (table)\nTable of character sizes, expressed in hundredths of a point, for style\nnumbers from `0` to `255`.\nFor example, a text size of 9.4 points is set using `940`.
style_underline buffer.style_underline (table)\nTable of flags indicating whether or not text within styles has an\nunderlined font face for style numbers from `0` to `255`.\nThe default values are `false`.
style_visible buffer.style_visible (table)\nTable of flags indicating whether or not text within styles is visible for\nstyle numbers from `0` to `255`.\nThe default values are `true`.
style_weight buffer.style_weight (table)\nTable of character weights ranging from `1` (very light) to `999` (very\nheavy) for text within styles for style numbers from `0` to `255`.\nHowever, most fonts only support a small number of weights:\n\n* `_SCINTILLA.constants.SC_WEIGHT_NORMAL` (400)\n  Normal.\n* `_SCINTILLA.constants.SC_WEIGHT_SEMIBOLD` (600)\n  Semi-bold.\n* `_SCINTILLA.constants.SC_WEIGHT_BOLD` (700)\n  Bold.\n\nThe default values are `400`.
sub string.sub(s, i [, j])\nReturns the substring of `s` that starts at `i` and continues until\n`j`; `i` and `j` can be negative. If `j` is absent, then it is assumed to\nbe equal to -1 (which is the same as the string length). In particular,\nthe call `string.sub(s,1,j)` returns a prefix of `s` with length `j`, and\n`string.sub(s, -i)` returns a suffix of `s` with length `i`.\n\nIf, after the translation of negative indices, `i` is less than 1, it is\ncorrected to 1. If `j` is greater than the string length, it is corrected to\nthat length. If, after these corrections, `i` is greater than `j`, the\nfunction returns the empty string.
swap_main_anchor_caret buffer.swap_main_anchor_caret(buffer)\nSwaps the anchor and caret positions of the main selection.\n@param buffer The global buffer.
switch_buffer gui.switch_buffer()\nPrompts the user to select a buffer to switch to.
symbol_chars _M.textadept.adeptsense.syntax.symbol_chars (table)\nA Lua pattern of characters allowed in a symbol,\n  including member operators. The pattern should be a character set.\n  The default value is `'[%w_%.]'`.
symlinkattributes lfs.symlinkattributes(filepath [, aname])\nIdentical to lfs.attributes except that it obtains information about the link\nitself (not the file it refers to). This function is not available in Windows\nso you may want to make sure that lfs.symlinkattributes exists before using\nit.
syntax _M.textadept.adeptsense.syntax (table)\nMap of language-specific syntax settings.\n@see get_class
tab buffer.tab(buffer)\nIndents the selected lines, replaces the selected text on a line with a Tab\ncharacter ("\t"), or inserts a Tab character at the caret.\n@param buffer The global buffer.
tab_indents buffer.tab_indents (bool)\nTabbing indents within indentation.\nThe default value is `false`.
tab_width buffer.tab_width (number)\nThe number of space characters represented by a tab character.\nThe default value is `8`.
table _G.table (module)\nLua table module.
tag buffer.tag (table)\nList of tag match values from a regular expression search.
tan math.tan(x)\nReturns the tangent of `x` (assumed to be in radians).
tanh math.tanh(x)\nReturns the hyperbolic tangent of `x`.
target_as_utf8 buffer.target_as_utf8(buffer)\nReturns the result of the text in the target range converted from the\nbuffer's code page into UTF-8.\n@param buffer The global buffer.
target_end buffer.target_end (number)\nThe position of the end of the target range.\nThis is also set by a successful\n`buffer:search_in_target()`.
target_from_selection buffer.target_from_selection(buffer)\nSets the beginning and end positions of the target range to be the beginning\nand end positions of the main selection.\n@param buffer The global buffer.
target_start buffer.target_start (number)\nThe position of the beginning of the target range.\nThis is also set by a successful\n`buffer:search_in_target()`.
text_height buffer.text_height(buffer, line)\nReturns the height in pixels of line number *line*.\n@param buffer The global buffer.\n@param line The line number in *buffer* to get the pixel height of.\n@return number
text_length buffer.text_length (number, Read-only)\nThe number of characters in the buffer.
text_range buffer.text_range(buffer, start_pos, end_pos)\nReturns the range of text from *start_pos* to *end_pos* in the buffer.\n@param buffer The global buffer.\n@param start_pos The start position of the range of text to get in *buffer*.\n@param end_pos The end position of the range of text to get in *buffer*.
text_width buffer.text_width(buffer, style_num, text)\nReturns the width in pixels of string *text* styled with style number\n*style_num*, in the range of `0` to `255`.\n@param buffer The global buffer.\n@param style_num The style number between `0` and `255` to use.\n@param text The text to measure the width of.\n@return number
textadept _M.textadept (module)\nThe textadept module.\nIt provides utilities for editing text in Textadept.
time os.time([table])\nReturns the current time when called without arguments, or a time\nrepresenting the date and time specified by the given table. This table\nmust have fields `year`, `month`, and `day`, and may have fields `hour`\n(default is 12), `min` (default is 0), `sec` (default is 0), and `isdst`\n(default is nil). For a description of these fields, see the `os.date`\nfunction.\n\nThe returned value is a number, whose meaning depends on your system. In\nPOSIX, Windows, and some other systems, this number counts the number of\nseconds since some given start time (the "epoch"). In other systems, the\nmeaning is not specified, and the number returned by `time` can be used only\nas an argument to `os.date` and `os.difftime`.
timeout _G.timeout(interval, f, ...)\nCalls the function *f* with the given arguments after *interval* seconds and\nthen repeatedly while *f* returns `true`. A `nil` or `false` return value\nstops repetition.\n@param interval The interval in seconds to call *f* after.\n@param f The function to call.\n@param ... Additional arguments to pass to *f*.
title gui.title (string, Write-only)\nThe title of the Textadept window.
tmpfile io.tmpfile()\nReturns a handle for a temporary file. This file is opened in update\nmode and it is automatically removed when the program ends.
tmpname os.tmpname()\nReturns a string with a file name that can be used for a temporary\nfile. The file must be explicitly opened before its use and explicitly\nremoved when no longer needed.\n\nOn POSIX systems, this function also creates a file with that name, to avoid\nsecurity risks. (Someone else might create the file with wrong permissions in\nthe time between getting the name and creating the file.) You still have to\nopen the file to use it and to remove it (even if you do not use it).\n\nWhen possible, you may prefer to use `io.tmpfile`, which automatically\nremoves the file when the program ends.
toggle _M.textadept.bookmarks.toggle(on)\nToggles the bookmark on the current line unless *on* is given.\nIf *on* is `true` or `false`, adds or removes the bookmark, respectively.\n@param on Optional flag indicating whether to add or remove a bookmark on the\n  current line. The default value is `nil`, toggling a bookmark.
toggle_block _M.ruby.toggle_block()\nToggles between `{ ... }` and `do ... end` Ruby blocks.\nIf the caret is inside a `{ ... }` single-line block, that block is converted\nto a multiple-line `do .. end` block. If the caret is on a line that contains\nsingle-line `do ... end` block, that block is converted to a single-line\n`{ ... }` block. If the caret is inside a multiple-line `do ... end` block,\nthat block is converted to a single-line `{ ... }` block with all newlines\nreplaced by a space. Indentation is important. The `do` and `end` keywords\nmust be on lines with the same level of indentation to toggle correctly.
toggle_caret_sticky buffer.toggle_caret_sticky(buffer)\nCycles between caret sticky option settings\n`_SCINTILLA.constants.SC_CARETSTICKY_ON`,\n`_SCINTILLA.constants.SC_CARETSTICKY_WHITESPACE`, and\n`_SCINTILLA.constants.SC_CARETSTICKY_OFF`.\n@param buffer The global buffer.\n@see caret_sticky
toggle_fold buffer.toggle_fold(buffer, line)\nToggles the fold state of a fold header line between expanded, where all\nof its child lines are displayed, and contracted, where all of its child\nlines are hidden.\n@param buffer The global buffer.\n@param line The line number in *buffer* to toggle the fold on.
token lexer.token(name, patt)\nCreates and returns a token pattern with the name *name* and pattern *patt*.\nIf *name* is not a predefined token name, its style must be defined in the\nlexer's `_tokenstyles` table.\n@param name The name of token. If this name is not a predefined token name,\n  then a style needs to be assiciated with it in the lexer's `_tokenstyles`\n  table.\n@param patt The LPeg pattern associated with the token.\n@usage local ws = token(l.WHITESPACE, l.space^1)\n@usage local annotation = token('annotation', '@' * l.word)\n@return pattern
tonumber _G.tonumber(e [, base])\nWhen called with no `base`, `tonumber` tries to convert its argument to a\nnumber. If the argument is already a number or a string convertible to a\nnumber (see Â§3.4.2), then `tonumber` returns this number; otherwise, it\nreturns nil.\n\nWhen called with `base`, then `e` should be a string to be interpreted as an\ninteger numeral in that base. The base may be any integer between 2 and 36,\ninclusive. In bases above 10, the letter '`A`' (in either upper or lower\ncase) represents 10, '`B`' represents 11, and so forth, with '`Z`'\nrepresenting 35. If the string `e` is not a valid numeral in the given base,\nthe function returns nil
tostring _G.tostring(v)\nReceives a value of any type and converts it to a string in a reasonable\nformat. (For complete control of how numbers are converted, use\n`string.format`.)\n\nIf the metatable of `v` has a `"__tostring"` field, then `tostring` calls the\ncorresponding value with `v` as argument, and uses the result of the call as\nits result.
touch lfs.touch(filepath [, atime [, mtime]])\nSet access and modification times of a file. This function is a bind to utime\nfunction. The first argument is the filename, the second argument (atime) is\nthe access time, and the third argument (mtime) is the modification time.\nBoth times are provided in seconds (which should be generated with Lua\nstandard function os.time). If the modification time is omitted, the access\ntime provided is used; if both times are omitted, the current time is used.\n\nReturns true if the operation was successful; in case of error, it returns\nnil plus an error string.
traceback debug.traceback([thread, ] [message] [, level])\nIf `message` is present but is neither a string nor nil, this function\nreturns `message` without further processing. Otherwise, it returns a string\nwith a traceback of the call stack. An optional `message` string is appended\nat the beginning of the traceback. An optional `level` number tells at which\nlevel to start the traceback (default is 1, the function calling\n`traceback`).
transpose_chars _M.textadept.editing.transpose_chars()\nTransposes characters intelligently.\nIf the caret is at the end of a line, the two characters before the caret are\ntransposed. Otherwise, the characters to the left and right are.
try_to_autocomplete_end _M.lua.try_to_autocomplete_end()\nTries to autocomplete control structures like `if`, `while`, `for`, etc. with\nthe `end` keyword.\n@see control_structure_patterns
try_to_autocomplete_end _M.ruby.try_to_autocomplete_end()\nTries to autocomplete Ruby's `end` keyword for control structures like `if`,\n`while`, `for`, etc.\n@see control_structure_patterns
two_phase_draw buffer.two_phase_draw (bool)\nDraw in two phases: first the background and then the foreground.\nThe default is `true`.
type _G.type(v)\nReturns the type of its only argument, coded as a string. The possible\nresults of this function are "\n`nil`" (a string, not the value nil), "`number`", "`string`", "`boolean`",\n"`table`", "`function`", "`thread`", and "`userdata`".
type io.type(obj)\nChecks whether `obj` is a valid file handle. Returns the string `"file"`\nif `obj` is an open file handle, `"closed file"` if `obj` is a closed file\nhandle, or nil if `obj` is not a file handle.
type lpeg.type(value)\nIf the given value is a pattern, returns the string "pattern". Otherwise\nreturns nil.
type_assignments _M.textadept.adeptsense.syntax.type_assignments (table)\nA map of Lua patterns to class types for variable\n  assignments, typically used for dynamically typed languages. For example,\n  `sense.syntax.type_assignments['^"'] = 'string'`  would recognize string\n  assignments in Lua so the `foo` in `foo = "bar"` would be recognized as\n  type `string`. The class type value may contain `%n` pattern captures.
type_declarations _M.textadept.adeptsense.syntax.type_declarations (table)\nA list of Lua patterns used for determining the\n  class type of a symbol. The first capture returned must be the class name.\n  Use `%_` to match the symbol.\n  The default value is `'(%u[%w_%.]+)%s+%_'`.
type_declarations_exclude _M.textadept.adeptsense.syntax.type_declarations_exclude (table)\nA table of types to exclude, even if they\n  match a `type_declarations` pattern. Each excluded type is a table key and\n  has a `true` boolean value. For example, `{Foo = true}` excludes any type\n  whose name is `Foo`.\n  The default value is `{}`.
typeover_chars _M.textadept.editing.typeover_chars (table)\nTable of characters to move over when typed, with language-specific typeover\ncharacter tables assigned to a lexer name key.\nThe ASCII values of characters are keys and are assigned non-`nil` values.\nThe default characters are ')', ']', '}', ''', and '"'.\n@see TYPEOVER_CHARS
undo buffer.undo(buffer)\nUndoes the most recent action.\n@param buffer The global buffer.
undo_collection buffer.undo_collection (bool)\nCollect undo information.\nWhen setting to `false`, call\n`buffer:empty_undo_buffer()` to avoid desynchronizing\nthe undo buffer with the buffer text.\nThe default value is `true`.
unlock lfs.unlock(filehandle[, start[, length]])\nUnlocks a file or a part of it. This function works on open files; the file\nhandle should be specified as the first argument. The optional arguments\nstart and length can be used to specify a starting point and its length; both\nshould be numbers.\n\nReturns true if the operation was successful; in case of error, it returns\nnil plus an error string.
unpack table.unpack(list [, i [, j]])\nReturns the elements from the given table. This function is equivalent to\n\n  return list[i], list[i+1], Â·Â·Â·, list[j]\n\nBy default, `i` is 1 and `j` is `#list`.
unsplit view.unsplit(view)\nUnsplits the view if possible, returning `true` on success.\n@param view The view to unsplit.\n@return boolean if the view was unsplit or not.
upper lexer.upper (pattern)\nA pattern matching any upper case character (`A-Z`).
upper string.upper(s)\nReceives a string and returns a copy of this string with all lowercase\nletters changed to uppercase. All other characters are left unchanged. The\ndefinition of what a lowercase letter is depends on the current locale.
upper_case buffer.upper_case(buffer)\nConverts the selected text to upper case letters.\n@param buffer The global buffer.
upvalueid debug.upvalueid(f, n)\nReturns an unique identifier (as a light userdata) for the upvalue numbered\n`n` from the given function.\n\nThese unique identifiers allow a program to check whether different closures\nshare upvalues. Lua closures that share an upvalue (that is, that access a\nsame external local variable) will return identical ids for those upvalue\nindices.
upvaluejoin debug.upvaluejoin(f1, n1, f2, n2)\nMake the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue\nof the Lua closure `f2`.
use_tabs buffer.use_tabs (bool)\nUse tabs or spaces in indentation.\nThe default value is `true`, for using tabs.
user_list_show buffer.user_list_show(buffer, list_type, item_list)\nDisplays a list from *item_list*, a sorted string whose items are delimited\nby `buffer.auto_c_separator` characters, using the list identifier number\n*list_type* which is greater than zero and sent in a `USER_LIST_SELECTION`\nevent after selecting an item.\n@param buffer The global buffer.\n@param list_type The list identifier number greater than zero to use.\n@param item_list The sorted string of words to show, separated by\n  `buffer.auto_c_separator` characters (initially spaces).\n@see _SCINTILLA.next_user_list_type
v_scroll_bar buffer.v_scroll_bar (bool)\nDisplay the vertical scroll bar.\nThe default value is `true`.
vc_home buffer.vc_home(buffer)\nMoves the caret to the first visible character on the current line, or if\nalready there, to the beginning of the current line.\n@param buffer The global buffer.
vc_home_display buffer.vc_home_display(buffer)\nMoves the caret to the first visible character on the current wrapped line,\nor if already there, to the beginning of the current wrapped line.\n@param buffer The global buffer.
vc_home_display_extend buffer.vc_home_display_extend(buffer)\nLike `buffer:vc_home_display()`, but extends the selected text to the new\nposition.\n@param buffer The global buffer.
vc_home_extend buffer.vc_home_extend(buffer)\nLike `buffer:vc_home()`, but extends the selected text to the new position.\n@param buffer The global buffer.
vc_home_rect_extend buffer.vc_home_rect_extend(buffer)\nLike `buffer:vc_home()`, but extends the rectangular selection to the new\nposition.\n@param buffer The global buffer.
vc_home_wrap buffer.vc_home_wrap(buffer)\nMoves the caret to the first visible character on the wrapped line, or if\nalready there, to the beginning of the actual line.\n@param buffer The global buffer.
vc_home_wrap_extend buffer.vc_home_wrap_extend(buffer)\nLike `buffer:vc_home_wrap()`, but extends the selected text to the new\nposition.\n@param buffer The global buffer.
version lpeg.version()\nReturns a string with the running version of LPeg.
vertical_centre_caret buffer.vertical_centre_caret(buffer)\nCenters current line in the view.\n@param buffer The global buffer.
view _G.view (module)\nA Textadept view object.
view _G.view (table)\nThe currently focused view.
view_eol buffer.view_eol (bool)\nDisplay end of line characters.\nThe default value is `false`.
view_ws buffer.view_ws (number)\nThe whitespace character visibility mode.\n\n* `_SCINTILLA.constants.SCWS_INVISIBLE` (0)\n  Whitespace is invisible.\n* `_SCINTILLA.constants.SCWS_VISIBLEALWAYS` (1)\n  Display whitespace as dots and arrows.\n* `_SCINTILLA.constants.SCWS_VISIBLEAFTERINDENT` (2)\n  Display non-indentation whitespace as dots and arrows.\n\nThe default value is `0`.
virtual_space_options buffer.virtual_space_options (number)\nThe virtual space mode.\n\n* `_SCINTILLA.constants.SCVS_NONE` (0)\n  Disable virtual space.\n* `_SCINTILLA.constants.SCVS_RECTANGULARSELECTION` (1)\n  Enable virtual space only for rectangular selections.\n* `_SCINTILLA.constants.SCVS_USERACCESSIBLE` (2)\n  Enable virtual space.\n\nThe default value is `0`.
visible_from_doc_line buffer.visible_from_doc_line(buffer, line)\nReturns the displayed line number of actual line number *line*, taking hidden\nlines into account, or `-1` if *line* is outside the range of lines in the\nbuffer.\nLines can occupy more than one display line if they wrap.\n@param buffer The global buffer.\n@param line The line number in *buffer* to use.\n@return number
whitespace_chars buffer.whitespace_chars (string)\nThe set of characters considered to be whitespace characters when moving\nor selecting text by word.\nSet this only after setting `buffer.word_chars`.\nThe default value is a string containing all non-newline characters less\nthan ASCII value 33.
whitespace_size buffer.whitespace_size (number)\nThe size of the dots in pixels used to represent space characters when\nwhitespace is visible.\nThe default value is `1`.
whole_word gui.find.whole_word (bool)\nMatch only whole-words in searches.\nThe default value is `false`.
whole_word_label_text gui.find.whole_word_label_text (string, Write-only)\nThe text of the "Whole word" label.\nThis is primarily used for localization.
word lexer.word (pattern)\nA pattern matching a typical word starting with a letter or underscore and\nthen any alphanumeric or underscore characters.
word_chars _M.textadept.adeptsense.syntax.word_chars (table)\nA Lua pattern of characters allowed in a word.\n  The default value is `'%w_'`.
word_chars buffer.word_chars (string)\nThe set of characters considered to be word characters when moving or\nselecting text by word.\nThe default value is a string containing alphanumeric characters, an\nunderscore, and all characters greater than ASCII value 127.
word_end_position buffer.word_end_position(buffer, pos, only_word_chars)\nReturns the position of the end of the word at position *pos*.\n`buffer.word_chars` contains word characters. If *pos* has a non-word\ncharacter to its right and *only_word_chars* is `false`, returns the position\nof the first word character.\n@param buffer The global buffer.\n@param pos The position in *buffer* of the word.\n@param only_word_chars If `true`, stops searching at the first non-word\n  character in the search direction. Otherwise, the first character in the\n  search direction sets the type of the search as word or non-word and the\n  search stops at the first non-matching character. Searches are also\n  terminated by the start or end of the buffer.
word_left buffer.word_left(buffer)\nMoves the caret left one word.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_left_end buffer.word_left_end(buffer)\nMoves the caret left one word, positioning the caret at the end of the\nprevious word.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_left_end_extend buffer.word_left_end_extend(buffer)\nLike `buffer:word_left_end()`, but extends the selected text to the new\nposition.\n@param buffer The global buffer.
word_left_extend buffer.word_left_extend(buffer)\nMoves the caret left one word, extending the selected text to the new\nposition.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_match lexer.word_match(words, word_chars, case_insensitive)\nCreates and returns a pattern that matches any word in the set *words*\ncase-sensitively, unless *case_insensitive* is `true`, with the set of word\ncharacters being alphanumerics, underscores, and all of the characters in\n*word_chars*.\nThis is a convenience function for simplifying a set of ordered choice word\npatterns.\n@param words A table of words.\n@param word_chars Optional string of additional characters considered to be\n  part of a word. By default, word characters are alphanumerics and\n  underscores ("%w_" in Lua). This parameter may be `nil` or the empty string\n  to indicate no additional word characters.\n@param case_insensitive Optional boolean flag indicating whether or not the\n  word match is case-insensitive. The default is `false`.\n@usage local keyword = token(l.KEYWORD, word_match{'foo', 'bar', 'baz'})\n@usage local keyword = token(l.KEYWORD, word_match({'foo-bar', 'foo-baz',\n  'bar-foo', 'bar-baz', 'baz-foo', 'baz-bar'}, '-', true))\n@return pattern
word_part_left buffer.word_part_left(buffer)\nMoves to the previous underscore or change in capitalization within the\ncurrent word.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_part_left_extend buffer.word_part_left_extend(buffer)\nMoves to the previous underscore or change in capitalization within the\ncurrent word, extending the selected text to the new position.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_part_right buffer.word_part_right(buffer)\nMoves to the next underscore or change in capitalization within the current\nword.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_part_right_extend buffer.word_part_right_extend(buffer)\nMoves to the next underscore or change in capitalization within the current\nword, extending the selected text to the new position.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_right buffer.word_right(buffer)\nMoves the caret right one word.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_right_end buffer.word_right_end(buffer)\nMoves the caret right one word, positioning the cursor at the end of the\ncurrent word.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_right_end_extend buffer.word_right_end_extend(buffer)\nLike `buffer:word_right_end()`, but extends the selected text to the new\nposition.\n@param buffer The global buffer.
word_right_extend buffer.word_right_extend(buffer)\nMoves the caret right one word, extending the selected text to the new\nposition.\n`buffer.word_chars` contains word characters.\n@param buffer The global buffer.
word_start_position buffer.word_start_position(buffer, pos, only_word_chars)\nReturns the position of the beginning of the word at position *pos*.\n`buffer.word_chars` contains word characters. If *pos* has a non-word\ncharacter to its left and *only_word_chars* is `false`, returns the position\nof the last word character.\n@param buffer The global buffer.\n@param pos The position in *buffer* of the word.\n@param only_word_chars If `true`, stops searching at the first non-word\n  character in the search direction. Otherwise, the first character in the\n  search direction sets the type of the search as word or non-word and the\n  search stops at the first non-matching character. Searches are also\n  terminated by the start or end of the buffer.
wrap coroutine.wrap(f)\nCreates a new coroutine, with body `f`. `f` must be a Lua\nfunction. Returns a function that resumes the coroutine each time it is\ncalled. Any arguments passed to the function behave as the extra arguments to\n`resume`. Returns the same values returned by `resume`, except the first\nboolean. In case of error, propagates the error.
wrap_count buffer.wrap_count(buffer, line)\nReturns the number of wrapped lines needed to display line number *line*.\n@param buffer The global buffer.\n@param line The line number in *buffer* to use.\n@return number
wrap_indent_mode buffer.wrap_indent_mode (number)\nThe wrapped line indent mode.\n\n* `_SCINTILLA.constants.SC_WRAP_INDENT_FIXED` (0)\n  Indent wrapped lines by `buffer.wrap_start_indent`.\n* `_SCINTILLA.constants.SC_WRAP_INDENT_SAME` (1)\n  Indent wrapped lines the same as the first line.\n* `_SCINTILLA.constants.SC_WRAP_INDENT_INDENT` (2)\n  Indent wrapped lines one more level than the first line.\n\nThe default value is `0`.
wrap_mode buffer.wrap_mode (number)\nLong line wrap mode.\n\n* `_SCINTILLA.constants.SC_WRAP_NONE` (0)\n  Long lines are not wrapped.\n* `_SCINTILLA.constants.SC_WRAP_WORD` (1)\n  Wrap long lines at word boundaries.\n* `_SCINTILLA.constants.SC_WRAP_CHAR` (2)\n  Wrap long lines at character boundaries.\n\nThe default value is `0`.
wrap_start_indent buffer.wrap_start_indent (number)\nThe number of spaces to indent wrapped lines by if\n`buffer.wrap_indent_mode` is\n`_SCINTILLA.constants.SC_WRAP_INDENT_FIXED`.\nThe default value is `0`.
wrap_visual_flags buffer.wrap_visual_flags (number)\nThe wrapped line visual display mode.\n\n* `_SCINTILLA.constants.SC_WRAPVISUALFLAG_NONE` (0)\n  No visual flags.\n* `_SCINTILLA.constants.SC_WRAPVISUALFLAG_END` (1)\n  Show visual flag at the end of the line.\n* `_SCINTILLA.constants.SC_WRAPVISUALFLAG_START` (2)\n  Show visual flag at the beginning of the sub-line.\n* `_SCINTILLA.constants.SC_WRAPVISUALFLAG_MARGIN` (4)\n  Show visual flag in the line number margin of the sub-line.\n\nThe default value is `0`.
wrap_visual_flags_location buffer.wrap_visual_flags_location (number)\nThe wrapped line visual flag drawing mode.\n\n* `_SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_DEFAULT` (0)\n  Draw the visual flag near the right border.\n* `_SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_END_BY_TEXT` (1)\n  Draw the visual flag near text at the end of the line.\n* `_SCINTILLA.constants.SC_WRAPVISUALFLAGLOC_START_BY_TEXT` (2)\n  Draw the visual flag near text at the beginning of the subline.\n\nThe default value is `0`.
write file:write(Â·Â·Â·)\nWrites the value of each of its arguments to `file`. The arguments must be\nstrings or numbers.\n\nIn case of success, this function returns `file`. Otherwise it returns nil\nplus a string describing the error.
write io.write(Â·Â·Â·)\nEquivalent to `io.output():write(Â·Â·Â·)`.
x_offset buffer.x_offset (number)\nThe horizontal scroll position in pixels.\nA value of `0` is the normal position with the first text column visible at\nthe left of the view.
xdigit lexer.xdigit (pattern)\nA pattern matching any hexadecimal digit (`0-9`, `A-F`, `a-f`).
xor bit32.xor(...)\nReturns the bitwise "exclusive or" of its operands.
xpcall _G.xpcall(f, msgh [, arg1, Â·Â·Â·])\nThis function is similar to `pcall`, except that it sets a new message\nhandler `msgh`.
yield coroutine.yield(Â·Â·Â·)\nSuspends the execution of the calling coroutine. Any arguments to `yield` are\npassed as extra results to `resume`.
zoom buffer.zoom (number)\nThe number of points to add to the size of all fonts.\nNegative values are allowed.\nThe default value is `0`.
zoom_in buffer.zoom_in(buffer)\nIncreases the size of all fonts by one point, up to 20.\n@param buffer The global buffer.
zoom_out buffer.zoom_out(buffer)\nDecreases the size of all fonts by one point, down to -10.\n@param buffer The global buffer.